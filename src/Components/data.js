export const dataText = [
  "This category is not shown on its member pages unless the appropriate user preference (appearance → show hidden categories) is set.\n\nContents \n\nTop\n0–9\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\n\n\n\n",
  "\n\n\n\n",
  "\n\n\n\n",
  "Contains reusable Python modules.\n\n\n\n\n",
  "This category lists developers of the Python programming language and important members of the Python community.\n\n\n\n\n",
  "\n\n\n\n",
  "A web framework is a software framework that is designed to support the development of web applications, web services and web APIs. The framework aims to alleviate the overhead associated with common activities used in web development. For example, many frameworks provide libraries for database access, template processing and session management, and often promote code reuse. Though they often target development of dynamic websites they are also applicable to static websites.\nThis category lists web frameworks written in and/or designed for use with Python.\n\n\n\n\n",
  'General-purpose programming language\n\n\nPythonParadigmMulti-paradigm: object-oriented,[1] procedural (imperative), functional, structured, reflectiveDesigned byGuido van RossumDeveloperPython Software FoundationFirst appeared20 February 1991; 33 years ago (1991-02-20)[2]Stable release3.12.3 \n   / 9 April 2024; 45 days ago (9 April 2024)\nTyping disciplineduck, dynamic, strong;[3] optional type annotations (since 3.5, but those hints are ignored, except with unofficial tools)[4]OSTier 1: 64-bit Linux, macOS; 64- and 32-bit Windows 10+[5]Tier 2: E.g. 32-bit WebAssembly (WASI) Tier 3: 64-bit FreeBSD, iOS; e.g. Raspberry Pi OSUnofficial (or has been known to work): Other Unix-like/BSD variants and e.g. Android 5.0+ (official from Python 3.13 planned[6]) and a few other platforms[7][8][9]LicensePython Software Foundation LicenseFilename extensions.py, .pyw, .pyz,[10]\n.pyi, .pyc, .pydWebsitepython.orgMajor implementationsCPython, PyPy, Stackless Python, MicroPython, CircuitPython, IronPython, JythonDialectsCython, RPython, Starlark[11]Influenced byABC,[12] Ada,[13] ALGOL 68,[14] APL,[15] C,[16] C++,[17] CLU,[18] Dylan,[19] Haskell,[20][15] Icon,[21] Lisp,[22] Modula-3,[14][17] Perl,[23] Standard ML[15]InfluencedApache Groovy, Boo, Cobra, CoffeeScript,[24] D, F#, GDScript, Genie,[25] Go, JavaScript,[26][27] Julia,[28] Mojo,[29] Nim, Ring,[30] Ruby,[31] Swift[32]\n Python Programming at Wikibooks\n\nPython is a high-level, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation.[33]\nPython is dynamically typed and garbage-collected. It supports multiple programming paradigms, including structured (particularly procedural), object-oriented and functional programming. It is often described as a "batteries included" language due to its comprehensive standard library.[34][35]\nGuido van Rossum began working on Python in the late 1980s as a successor to the ABC programming language and first released it in 1991 as Python 0.9.0.[36] Python 2.0 was released in 2000. Python 3.0, released in 2008, was a major revision not completely backward-compatible with earlier versions. Python 2.7.18, released in 2020, was the last release of Python 2.[37]\nPython consistently ranks as one of the most popular programming languages, and has gained widespread use in the machine learning community.[38][39][40][41]\n\n\nHistory[edit]\nThe designer of Python, Guido van Rossum, at OSCON 2006\nMain article: History of Python\nPython was invented in the late 1980s[42] by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC programming language, which was inspired by SETL,[43] capable of exception handling and interfacing with the Amoeba operating system.[12] Its implementation began in December 1989.[44] Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his "permanent vacation" from his responsibilities as Python\'s "benevolent dictator for life" (BDFL), a title the Python community bestowed upon him to reflect his long-term commitment as the project\'s chief decision-maker[45] (he\'s since come out of retirement and is self-titled "BDFL-emeritus"). In January 2019, active Python core developers elected a five-member Steering Council to lead the project.[46][47]\nPython 2.0 was released on 16 October 2000, with many major new features such as list comprehensions, cycle-detecting garbage collection, reference counting, and Unicode support.[48] Python 3.0, released on 3 December 2008, with many of its major features backported to Python 2.6.x[49] and 2.7.x. Releases of Python 3 include the 2to3 utility, which automates the translation of Python 2 code to Python 3.[50]\nPython 2.7\'s end-of-life was initially set for 2015, then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3.[51][52] No further security patches or other improvements will be released for it.[53][54] Currently only 3.8 and later are supported (2023 security issues were fixed in e.g. 3.7.17, the final 3.7.x release[55]). While Python 2.7 and older is officially unsupported, a different unofficial Python implementation, PyPy, continues to support Python 2, i.e. "2.7.18+" (plus 3.9 and 3.10), with the plus meaning (at least some) "backported security updates".[56]\nIn 2021 (and again twice in 2022), security updates were expedited, since all Python versions were insecure (including 2.7[57]) because of security issues leading to possible remote code execution[58] and web-cache poisoning.[59] In 2022, Python 3.10.4 and 3.9.12 were expedited[60] and 3.8.13, because of many security issues.[61] When Python 3.9.13 was released in May 2022, it was announced that the 3.9 series (joining the older series 3.8 and 3.7) would only receive security fixes in the future.[62] On 7 September 2022, four new releases were made due to a potential denial-of-service attack: 3.10.7, 3.9.14, 3.8.14, and 3.7.14.[63][64]\nAs of October 2023,[update] Python 3.12 is the stable release, and 3.12 and 3.11 are the only versions with active (as opposed to just security) support. Notable changes in 3.11 from 3.10 include increased program execution speed and improved error reporting.[65]\nPython 3.12 adds syntax (and in fact every Python since at least 3.5 adds some syntax) to the language, the new (soft) keyword type (recent releases have added a lot of typing support e.g. new type union operator in 3.10), and 3.11 for exception handling, and 3.10 the match and case (soft) keywords, for structural pattern matching statements. Python 3.12 also drops outdated modules and functionality, and future versions will too, see below in Development section.\nPython 3.11 claims to be between 10 and 60% faster than Python 3.10, and Python 3.12 adds another 5% on top of that. It also has improved error messages, and many other changes.\nSince 27 June 2023[update], Python 3.8 is the oldest supported version of Python (albeit in the \'security support\' phase), due to Python 3.7 reaching end-of-life.[66]\nPython 3.13 introduced an incremental (shorter pauses for collection in programs with a lot of objects) garbage collector, an experimental JIT compiler;[67], and removals from the C API. Some standard library modules, 19 dead batteries, and many deprecated classes, functions and methods, and more will be removed in Python 3.15 and or 3.16.[68] Starting with 3.13, it and later versions have 2 years of full support (up from one and a half); followed by 3 years of security support (for same total support as before).\n\nDesign philosophy and features[edit]\nPython is a multi-paradigm programming language. Object-oriented programming and structured programming are fully supported, and many of their features support functional programming and aspect-oriented programming (including metaprogramming[69] and metaobjects).[70] Many other paradigms are supported via extensions, including design by contract[71][72] and logic programming.[73]\nPython uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory management.[74] It uses dynamic name resolution (late binding), which binds method and variable names during program execution.\nIts design offers some support for functional programming in the Lisp tradition. It has filter,mapandreduce functions; list comprehensions, dictionaries, sets, and generator expressions.[75] The standard library has two modules (itertools and functools) that implement functional tools borrowed from Haskell and Standard ML.[76]\nIts core philosophy is summarized in the Zen of Python (PEP 20), which includes aphorisms such as:[77]\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nReadability counts.\nHowever, Python features regularly violate these principles and received criticism for adding unnecessary language bloat.[78][79] Responses to these criticisms are that the Zen of Python is a guideline rather than a rule.[80] The addition of some new features had been so controversial that Guido van Rossum resigned as Benevolent Dictator for Life following vitriol over the addition of the assignment expression operator in Python 3.8.[81][82]\nNevertheless, rather than building all of its functionality into its core, Python was designed to be highly extensible via modules. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum\'s vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with ABC, which espoused the opposite approach.[42]\nPython claims to strive for a simpler, less-cluttered syntax and grammar while giving developers a choice in their coding methodology. In contrast to Perl\'s "there is more than one way to do it" motto, Python embraces a "there should be one—and preferably only one—obvious way to do it." philosophy.[77] In practice, however, Python provides many ways to achieve the same task. There are, for example, at least three ways to format a string literal, with no certainty as to which one a programmer should use.[83] Alex Martelli, a Fellow at the Python Software Foundation and Python book author, wrote: "To describe something as \'clever\' is not considered a compliment in the Python culture."[84]\nPython\'s developers usually strive to avoid premature optimization and reject patches to non-critical parts of the CPython reference implementation that would offer marginal increases in speed at the cost of clarity.[85] Execution speed can be improved by moving speed-critical functions to extension modules written in languages such as C, or by using a just-in-time compiler like PyPy. It is also possible to cross-compile to other languages, but it either doesn\'t provide the full speed-up that might be expected, since Python is a very dynamic language, or a restricted subset of Python is compiled, and possibly semantics are slightly changed.[86]\nPython\'s developers aim for it to be fun to use. This is reflected in its name—a tribute to the British comedy group Monty Python[87]—and in occasionally playful approaches to tutorials and reference materials, such as the use of the terms "spam" and "eggs" (a reference to a Monty Python sketch) in examples, instead of the often-used "foo" and "bar".[88][89] A common neologism in the Python community is pythonic, which has a wide range of meanings related to program style. "Pythonic" code may use Python idioms well, be natural or show fluency in the language, or conform with Python\'s minimalist philosophy and emphasis on readability. Code that is difficult to understand or reads like a rough transcription from another programming language is called unpythonic.[90][91]\n\nSyntax and semantics[edit]\nMain article: Python syntax and semantics\nPython is meant to be an easily readable language. Its formatting is visually uncluttered and often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use curly brackets to delimit blocks, and semicolons after statements are allowed but rarely used. It has fewer syntactic exceptions and special cases than C or Pascal.[92]\n\nIndentation[edit]\nMain article: Python syntax and semantics § Indentation\nPython uses whitespace indentation, rather than curly brackets or keywords, to delimit blocks. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.[93] Thus, the program\'s visual structure accurately represents its semantic structure.[94] This feature is sometimes termed the off-side rule. Some other languages use indentation this way; but in most, indentation has no semantic meaning. The recommended indent size is four spaces.[95]\n\nStatements and control flow[edit]\nPython\'s statements include:\n\nThe assignment statement, using a single equals sign =\nThe if statement, which conditionally executes a block of code, along with else and elif (a contraction of else-if)\nThe for statement, which iterates over an iterable object, capturing each element to a local variable for use by the attached block\nThe while statement, which executes a block of code as long as its condition is true\nThe try statement, which allows exceptions raised in its attached code block to be caught and handled by except clauses (or new syntax except* in Python 3.11 for exception groups[96]); it also ensures that clean-up code in a finally block is always run regardless of how the block exits\nThe raise statement, used to raise a specified exception or re-raise a caught exception\nThe class statement, which executes a block of code and attaches its local namespace to a class, for use in object-oriented programming\nThe def statement, which defines a function or method\nThe with statement, which encloses a code block within a context manager (for example, acquiring a lock before it is run, then releasing the lock; or opening and closing a file), allowing resource-acquisition-is-initialization (RAII)-like behavior and replacing a common try/finally idiom[97]\nThe break statement, which exits a loop\nThe continue statement, which skips the rest of the current iteration and continues with the next\nThe del statement, which removes a variable—deleting the reference from the name to the value, and producing an error if the variable is referred to before it is redefined\nThe pass statement, serving as a NOP, syntactically needed to create an empty code block\nThe assert statement, used in debugging to check for conditions that should apply\nThe yield statement, which returns a value from a generator function (and also an operator); used to implement coroutines\nThe return statement, used to return a value from a function\nThe import and from statements, used to import modules whose functions or variables can be used in the current program\nThe assignment statement (=) binds a name as a reference to a separate, dynamically allocated object. Variables may subsequently be rebound at any time to any object. In Python, a variable name is a generic reference holder without a fixed data type; however, it always refers to some object with a type. This is called dynamic typing—in contrast to statically-typed languages, where each variable may contain only a value of a certain type.\nPython does not support tail call optimization or first-class continuations, and, according to Van Rossum, it never will.[98][99] However, better support for coroutine-like functionality is provided by extending Python\'s generators.[100] Before 2.5, generators were lazy iterators; data was passed unidirectionally out of the generator. From Python 2.5 on, it is possible to pass data back into a generator function; and from version 3.3, it can be passed through multiple stack levels.[101]\n\nExpressions[edit]\nPython\'s expressions include:\n\nThe +, -, and * operators for mathematical addition, subtraction, and multiplication are similar to other languages, but the behavior of division differs. There are two types of divisions in Python: floor division (or integer division) // and floating-point/division.[102] Python uses the ** operator for exponentiation.\nPython uses the + operator for string concatenation. Python uses the * operator for duplicating a string a specified number of times.\nThe @ infix operator. It is intended to be used by libraries such as NumPy for matrix multiplication.[103][104]\nThe syntax :=, called the "walrus operator", was introduced in Python 3.8. It assigns values to variables as part of a larger expression.[105]\nIn Python, == compares by value. Python\'s is operator may be used to compare object identities (comparison by reference), and comparisons may be chained—for example, a <= b <= c.\nPython uses and, or, and not as Boolean operators.\nPython has a type of expression named a list comprehension, and a more general expression named a generator expression.[75]\nAnonymous functions are implemented using lambda expressions; however, there may be only one expression in each body.\nConditional expressions are written as x if c else y[106] (different in order of operands from the c ? x : y operator common to many other languages).\nPython makes a distinction between lists and tuples. Lists are written as [1, 2, 3], are mutable, and cannot be used as the keys of dictionaries (dictionary keys must be immutable in Python). Tuples, written as (1, 2, 3), are immutable and thus can be used as keys of dictionaries, provided all of the tuple\'s elements are immutable. The + operator can be used to concatenate two tuples, which does not directly modify their contents, but produces a new tuple containing the elements of both. Thus, given the variable t initially equal to (1, 2, 3), executing t = t + (4, 5) first evaluates t + (4, 5), which yields (1, 2, 3, 4, 5), which is then assigned back to t—thereby effectively "modifying the contents" of t while conforming to the immutable nature of tuple objects. Parentheses are optional for tuples in unambiguous contexts.[107]\nPython features sequence unpacking where multiple expressions, each evaluating to anything that can be assigned (to a variable, writable property, etc.) are associated in an identical manner to that forming tuple literals—and, as a whole, are put on the left-hand side of the equal sign in an assignment statement. The statement expects an iterable object on the right-hand side of the equal sign that produces the same number of values as the provided writable expressions; when iterated through them, it assigns each of the produced values to the corresponding expression on the left.[108]\nPython has a "string format" operator % that functions analogously to printf format strings in C—e.g. "spam=%s eggs=%d" % ("blah", 2) evaluates to "spam=blah eggs=2". In Python 2.6+ and 3+, this was supplemented by the format() method of the str class, e.g. "spam={0} eggs={1}".format("blah", 2). Python 3.6 added "f-strings": spam = "blah"; eggs = 2; f\'spam={spam} eggs={eggs}\'.[109]\nStrings in Python can be concatenated by "adding" them (with the same operator as for adding integers and floats), e.g. "spam" + "eggs" returns "spameggs". If strings contain numbers, they are added as strings rather than integers, e.g. "2" + "2" returns "22".\nPython has various string literals:\nDelimited by single or double quotes; unlike in Unix shells, Perl, and Perl-influenced languages, single and double quotes work the same. Both use the backslash (\\) as an escape character. String interpolation became available in Python 3.6 as "formatted string literals".[109]\nTriple-quoted (beginning and ending with three single or double quotes), which may span multiple lines and function like here documents in shells, Perl, and Ruby.\nRaw string varieties, denoted by prefixing the string literal with r. Escape sequences are not interpreted; hence raw strings are useful where literal backslashes are common, such as regular expressions and Windows-style paths. (Compare "@-quoting" in C#.)\nPython has array index and array slicing expressions in lists, denoted as a[key], a[start:stop] or a[start:stop:step]. Indexes are zero-based, and negative indexes are relative to the end. Slices take elements from the start index up to, but not including, the stop index. The third slice parameter, called step or stride, allows elements to be skipped and reversed. Slice indexes may be omitted—for example, a[:] returns a copy of the entire list. Each element of a slice is a shallow copy.\nIn Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as Common Lisp, Scheme, or Ruby. This leads to duplicating some functionality. For example:\n\nList comprehensions vs. for-loops\nConditional expressions vs. if blocks\nThe eval() vs. exec() built-in functions (in Python 2, exec is a statement); the former is for expressions, the latter is for statements\nStatements cannot be a part of an expression—so list and other comprehensions or lambda expressions, all being expressions, cannot contain statements. A particular case is that an assignment statement such as a = 1 cannot form part of the conditional expression of a conditional statement.\n\nMethods[edit]\nMethods on objects are functions attached to the object\'s class; the syntax instance.method(argument) is, for normal methods and functions, syntactic sugar for Class.method(instance, argument). Python methods have an explicit self parameter to access instance data, in contrast to the implicit self (or this) in some other object-oriented programming languages (e.g., C++, Java, Objective-C, Ruby).[110] Python also provides methods, often called dunder methods (due to their names beginning and ending with double-underscores), to allow user-defined classes to modify how they are handled by native operations including length, comparison, in arithmetic operations and type conversion.[111]\n\nTyping[edit]\nThe standard type hierarchy in Python 3\nPython uses duck typing and has typed objects but untyped variable names. Type constraints are not checked at compile time; rather, operations on an object may fail, signifying that it is not of a suitable type. Despite being dynamically typed, Python is strongly typed, forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them.\nPython allows programmers to define their own types using classes, most often used for object-oriented programming. New instances of classes are constructed by calling the class (for example, SpamClass() or EggsClass()), and the classes are instances of the metaclass type (itself an instance of itself), allowing metaprogramming and reflection.\nBefore version 3.0, Python had two kinds of classes (both using the same syntax):  old-style and new-style;[112] current Python versions only support the semantics of the new style.\nPython supports optional type annotations.[4][113] These annotations are not enforced by the language, but may be used by external tools such as mypy to catch errors.[114][115] Mypy also supports a Python compiler called mypyc, which leverages type annotations for optimization.[116]\n\n\nSummary of Python 3\'s built-in types\n\n\nType\n\nMutability\n\nDescription\n\nSyntax examples\n\n\nbool\n\nimmutable\n\nBoolean value\n\nTrueFalse\n\n\nbytearray\n\nmutable\n\nSequence of bytes\n\nbytearray(b\'Some ASCII\')bytearray(b"Some ASCII")bytearray([119, 105, 107, 105])\n\n\nbytes\n\nimmutable\n\nSequence of bytes\n\nb\'Some ASCII\'b"Some ASCII"bytes([119, 105, 107, 105])\n\n\ncomplex\n\nimmutable\n\nComplex number with real and imaginary parts\n\n3+2.7j3 + 2.7j\n\n\ndict\n\nmutable\n\nAssociative array (or dictionary) of key and value pairs; can contain mixed types (keys and values), keys must be a hashable type\n\n{\'key1\': 1.0, 3: False}{}\n\n\ntypes.EllipsisType\n\nimmutable\n\nAn ellipsis placeholder to be used as an index in NumPy arrays\n\n...Ellipsis\n\n\nfloat\n\nimmutable\n\nDouble-precision floating-point number. The precision is machine-dependent but in practice is generally implemented as a 64-bit IEEE 754 number with 53 bits of precision.[117]\n\n\n1.33333\n\n\n\nfrozenset\n\nimmutable\n\nUnordered set, contains no duplicates; can contain mixed types, if hashable\n\nfrozenset([4.0, \'string\', True])\n\n\nint\n\nimmutable\n\nInteger of unlimited magnitude[118]\n\n42\n\n\nlist\n\nmutable\n\nList, can contain mixed types\n\n[4.0, \'string\', True][]\n\n\ntypes.NoneType\n\nimmutable\n\nAn object representing the absence of a value, often called null in other languages\n\nNone\n\n\ntypes.NotImplementedType\n\nimmutable\n\nA placeholder that can be returned from overloaded operators to indicate unsupported operand types.\n\nNotImplemented\n\n\nrange\n\nimmutable\n\nAn immutable sequence of numbers commonly used for looping a specific number of times in for loops[119]\n\nrange(-1, 10)range(10, -5, -2)\n\n\nset\n\nmutable\n\nUnordered set, contains no duplicates; can contain mixed types, if hashable\n\n{4.0, \'string\', True}set()\n\n\nstr\n\nimmutable\n\nA character string: sequence of Unicode codepoints\n\n\'Wikipedia\'"Wikipedia""""Spanning\nmultiple\nlines"""\nSpanning\nmultiple\nlines\n\n\n\ntuple\n\nimmutable\n\nCan contain mixed types\n\n(4.0, \'string\', True)(\'single element\',)()\n\nArithmetic operations[edit]\nPython has the usual symbols for arithmetic operators (+, -, *, /), the floor division operator // and the modulo operation % (where the remainder can be negative, e.g. 4 % -3 == -2). It also has ** for exponentiation, e.g. 5**3 == 125 and 9**0.5 == 3.0, and a matrix‑multiplication operator @ .[120] These operators work like in traditional math; with the same precedence rules, the operators infix (+ and - can also be unary to represent positive and negative numbers respectively).\nThe division between integers produces floating-point results. The behavior of division has changed significantly over time:[121]\n\nCurrent Python (i.e. since 3.0) changed / to always be floating-point division, e.g. 5/2 == 2.5.\nThe floor division // operator was introduced. So 7//3 == 2, -7//3 == -3, 7.5//3 == 2.0 and -7.5//3 == -3.0. Adding from __future__ import division causes a module used in Python 2.7 to use Python 3.0 rules for division (see above).\nIn Python terms, / is true division (or simply division), and // is floor division. / before version 3.0 is classic division.[121]\nRounding towards negative infinity, though different from most languages, adds consistency. For instance, it means that the equation (a + b)//b == a//b + 1 is always true. It also means that the equation b*(a//b) + a%b == a is valid for both positive and negative values of a. However, maintaining the validity of this equation means that while the result of a%b is, as expected, in the half-open interval [0, b), where b is a positive integer, it has to lie in the interval (b, 0] when b is negative.[122]\nPython provides a round function for rounding a float to the nearest integer. For tie-breaking, Python 3 uses round to even: round(1.5) and round(2.5) both produce 2.[123] Versions before 3 used round-away-from-zero: round(0.5) is 1.0, round(-0.5) is −1.0.[124]\nPython allows Boolean expressions with multiple equality relations in a manner that is consistent with general use in mathematics. For example, the expression a < b < c tests whether a is less than b and b is less than c.[125] C-derived languages interpret this expression differently: in C, the expression would first evaluate a < b, resulting in 0 or 1, and that result would then be compared with c.[126]\nPython uses arbitrary-precision arithmetic for all integer operations. The Decimal type/class in the decimal module provides decimal floating-point numbers to a pre-defined arbitrary precision and several rounding modes.[127] The Fraction class in the fractions module provides arbitrary precision for rational numbers.[128]\nDue to Python\'s extensive mathematics library, and the third-party library NumPy that further extends the native capabilities, it is frequently used as a scientific scripting language to aid in problems such as numerical data processing and manipulation.[129][130]\n\nProgramming examples[edit]\n"Hello, World!" program:\n\nprint(\'Hello, world!\')\n\nProgram to calculate the factorial of a positive integer:\n\nn = int(input(\'Type a number, and its factorial will be printed: \'))\n\nif n < 0:\n    raise ValueError(\'You must enter a non-negative integer\')\n\nfactorial = 1\nfor i in range(2, n + 1):\n    factorial *= i\n\nprint(factorial)\n\nLibraries[edit]\nPython\'s large standard library[131] provides tools suited to many tasks and is commonly cited as one of its greatest strengths. For Internet-facing applications, many standard formats and protocols such as MIME and HTTP are supported. It includes modules for creating graphical user interfaces, connecting to relational databases, generating pseudorandom numbers, arithmetic with arbitrary-precision decimals,[127] manipulating regular expressions, and unit testing.\nSome parts of the standard library are covered by specifications—for example, the Web Server Gateway Interface (WSGI) implementation wsgiref follows PEP 333[132]—but most are specified by their code, internal documentation, and test suites. However, because most of the standard library is cross-platform Python code, only a few modules need altering or rewriting for variant implementations.\nAs of 17 March 2024,[update] the Python Package Index (PyPI), the official repository for third-party Python software, contains over 523,000[133] packages with a wide range of functionality, including:\n\n\nAutomation\nData analytics\nDatabases\nDocumentation\nGraphical user interfaces\nImage processing\nMachine learning\nMobile apps\nMultimedia\nComputer networking\nScientific computing\nSystem administration\nTest frameworks\nText processing\nWeb frameworks\nWeb scraping\nDevelopment environments[edit]\nSee also: Comparison of integrated development environments § Python\nMost Python implementations (including CPython) include a read–eval–print loop (REPL), permitting them to function as a command line interpreter for which users enter statements sequentially and receive results immediately.\nPython also comes with an Integrated development environment (IDE) called IDLE, which is more beginner-oriented.\nOther shells, including IDLE and IPython, add further abilities such as improved auto-completion, session state retention, and syntax highlighting.\nAs well as standard desktop integrated development environments including PyCharm, IntelliJ Idea, Visual Studio Code etc, there are web browser-based IDEs, including SageMath, for developing science- and math-related programs; PythonAnywhere, a browser-based IDE and hosting environment; and Canopy IDE, a commercial IDE emphasizing scientific computing.[134]\n\nImplementations[edit]\nSee also: List of Python software § Python implementations\nReference implementation[edit]\nCPython is the reference implementation of Python. It is written in C, meeting the C89 standard (Python 3.11 uses C11[135]) with several select C99 features. CPython includes its own C extensions, but third-party extensions are not limited to older C versions—e.g. they can be implemented with C11 or C++.[136][137] CPython compiles Python programs into an intermediate bytecode[138] which is then executed by its virtual machine.[139] CPython is distributed with a large standard library written in a mixture of C and native Python, and is available for many platforms, including Windows (starting with Python 3.9, the Python installer deliberately fails to install on Windows 7 and 8;[140][141] Windows XP was supported until Python 3.5) and most modern Unix-like systems, including macOS (and Apple M1 Macs, since Python 3.9.1, with experimental installer), with unofficial support for VMS.[142] Platform portability was one of its earliest priorities.[143] (During Python 1 and 2 development, even OS/2 and Solaris were supported,[144] but support has since been dropped for many platforms.)\nPython, since 3.7, only supports operating systems with multi-threading support.\n\nOther implementations[edit]\nPyPy is a fast, compliant interpreter of Python 2.7 and 3.8.[145][146] Its just-in-time compiler often brings a significant speed improvement over CPython, but some libraries written in C cannot be used with it.[147]\nStackless Python is a significant fork of CPython that implements microthreads; it does not use the call stack in the same way, thus allowing massively concurrent programs. PyPy also has a stackless version.[148]\nMicroPython and CircuitPython are Python 3 variants optimized for microcontrollers, including Lego Mindstorms EV3.[149]\nPyston is a variant of the Python runtime that uses just-in-time compilation to speed up the execution of Python programs.[150]\nCinder is a performance-oriented fork of CPython 3.8 that contains a number of optimizations, including bytecode inline caching, eager evaluation of coroutines, a method-at-a-time JIT, and an experimental bytecode compiler.[151]\nSnek[152][153][154] Embedded Computing Language (compatible with e.g. 8-bit AVR microcontrollers such as ATmega 328P-based Arduino, as well as larger ones compatible with MicroPython) "is Python-inspired, but it is not Python. It is possible to write Snek programs that run under a full Python system, but most Python programs will not run under Snek."[155] It is an imperative language not including OOP / classes, unlike Python, and simplifying to one number type with 32-bit single-precision (similar to JavaScript, except smaller).\nUnsupported implementations[edit]\nOther just-in-time Python compilers have been developed, but are now unsupported:\n\nGoogle began a project named Unladen Swallow in 2009, with the aim of speeding up the Python interpreter five-fold by using the LLVM, and of improving its multithreading ability to scale to thousands of cores,[156] while ordinary implementations suffer from the global interpreter lock.\nPsyco is a discontinued just-in-time specializing compiler that integrates with CPython and transforms bytecode to machine code at runtime. The emitted code is specialized for certain data types and is faster than the standard Python code. Psyco does not support Python 2.7 or later.\nPyS60 was a Python 2 interpreter for Series 60 mobile phones released by Nokia in 2005. It implemented many of the modules from the standard library and some additional modules for integrating with the Symbian operating system. The Nokia N900 also supports Python with GTK widget libraries, enabling programs to be written and run on the target device.[157]\nCross-compilers to other languages[edit]\nThere are several compilers/transpilers to high-level object languages, with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language:\n\nBrython,[158] Transcrypt[159][160] and Pyjs (latest release in 2012) compile Python to JavaScript.\nCodon compiles a subset of statically typed Python[161] to machine code (via LLVM) and supports native multithreading.[162]\nCython compiles (a superset of) Python to C. The resulting code is also usable with Python via direct C-level API calls into the Python interpreter.\nPyJL compiles/transpiles a subset of Python to "human-readable, maintainable, and high-performance Julia source code".[86] Despite claiming high performance, no tool can claim to do that for arbitrary Python code; i.e. it\'s known not possible to compile to a faster language or machine code. Unless semantics of Python are changed, but in many cases speedup is possible with few or no changes in the Python code. The faster Julia source code can then be used from Python, or compiled to machine code, and based that way.\nNuitka compiles Python into C.[163]\nNumba uses LLVM to compile a subset of Python to machine code.\nPythran compiles a subset of Python 3 to C++ (C++11).[164]\nRPython can be compiled to C, and is used to build the PyPy interpreter of Python.\nThe Python → 11l → C++ transpiler[165] compiles a subset of Python 3 to C++ (C++17).\nSpecialized:\n\nMyHDL is a Python-based hardware description language (HDL), that converts MyHDL code to Verilog or VHDL code.\nOlder projects (or not to be used with Python 3.x and latest syntax):\n\nGoogle\'s Grumpy (latest release in 2017) transpiles Python 2 to Go.[166][167][168]\nIronPython allows running Python 2.7 programs (and an alpha, released in 2021, is also available for "Python 3.4, although features and behaviors from later versions may be included"[169]) on the .NET Common Language Runtime.[170]\nJython compiles Python 2.7 to Java bytecode, allowing the use of the Java libraries from a Python program.[171]\nPyrex (latest release in 2010) and Shed Skin (latest release in 2013) compile to C and C++ respectively.\nPerformance[edit]\nPerformance comparison of various Python implementations on a non-numerical (combinatorial) workload was presented at EuroSciPy \'13.[172] Python\'s performance compared to other programming languages is also benchmarked by The Computer Language Benchmarks Game.[173]\n\nDevelopment[edit]\nPython\'s development is conducted largely through the Python Enhancement Proposal (PEP) process, the primary mechanism for proposing major new features, collecting community input on issues, and documenting Python design decisions.[174] Python coding style is covered in PEP 8.[175] Outstanding PEPs are reviewed and commented on by the Python community and the steering council.[174]\nEnhancement of the language corresponds with the development of the CPython reference implementation. The mailing list python-dev is the primary forum for the language\'s development. Specific issues were originally discussed in the Roundup bug tracker hosted at by the foundation.[176] In 2022, all issues and discussions were migrated to GitHub.[177] Development originally took place on a self-hosted source-code repository running Mercurial, until Python moved to GitHub in January 2017.[178]\nCPython\'s public releases come in three types, distinguished by which part of the version number is incremented:\n\nBackward-incompatible versions, where code is expected to break and needs to be manually ported. The first part of the version number is incremented. These releases happen infrequently—version 3.0 was released 8 years after 2.0. According to Guido van Rossum, a version 4.0 is very unlikely to ever happen.[179]\nMajor or "feature" releases are largely compatible with the previous version but introduce new features. The second part of the version number is incremented. Starting with Python 3.9, these releases are expected to happen annually.[180][181] Each major version is supported by bug fixes for several years after its release.[182]\nBugfix releases,[183] which introduce no new features, occur about every 3 months and are made when a sufficient number of bugs have been fixed upstream since the last release. Security vulnerabilities are also patched in these releases. The third and final part of the version number is incremented.[183]\nMany alpha, beta, and release-candidates are also released as previews and for testing before final releases. Although there is a rough schedule for each release, they are often delayed if the code is not ready. Python\'s development team monitors the state of the code by running the large unit test suite during development.[184]\nThe major academic conference on Python is PyCon. There are also special Python mentoring programs, such as PyLadies.\nPython 3.12 removed wstr meaning Python extensions[185] need to be modified,[186] and 3.10 added pattern matching to the language.[187]\nPython 3.12 dropped some outdated modules, and more will be dropped in the future, deprecated as of 3.13; already deprecated array \'u\' format code will emit DeprecationWarning since 3.13 and will be removed in Python 3.16. The \'w\' format code should be used instead. Part of ctypes is also deprecated and http.server.CGIHTTPRequestHandler will emit a DeprecationWarning, and will be removed in 3.15. Using that code already has a high potential for both security and functionality bugs. Parts of the typing module are deprecated, e.g. creating a typing.NamedTuple class using keyword arguments to denote the fields and such (and more) will be disallowed in Python 3.15.\n\nAPI documentation generators[edit]\nTools that can generate documentation for Python API include pydoc (available as part of the standard library), Sphinx, Pdoc and its forks, Doxygen and Graphviz, among others.[188]\n\nNaming[edit]\nPython\'s name is derived from the British comedy group Monty Python, whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture;[189] for example, the metasyntactic variables often used in Python literature are spam and eggs instead of the traditional foo and bar.[189][190] The official Python documentation also contains various references to Monty Python routines.[191][192] Users of Python are sometimes referred to as "Pythonistas".[193]\nThe prefix Py- is used to show that something is related to Python. Examples of the use of this prefix in names of Python applications or libraries include Pygame, a binding of SDL to Python (commonly used to create games); PyQt and PyGTK, which bind Qt and GTK to Python respectively; and PyPy, a Python implementation originally written in Python.\n\nPopularity[edit]\nSince 2003, Python has consistently ranked in the top ten most popular programming languages in the TIOBE Programming Community Index where as of December 2022[update] it was the most popular language (ahead of C, C++, and Java).[40] It was selected as Programming Language of the Year (for "the highest rise in ratings in a year") in 2007, 2010, 2018, and 2020 (the only language to have done so four times as of 2020[update][194]).\nLarge organizations that use Python include Wikipedia, Google,[195] Yahoo!,[196] CERN,[197] NASA,[198] Facebook,[199] Amazon, Instagram,[200] Spotify,[201] and some smaller entities like ILM[202] and ITA.[203] The social news networking site Reddit was written mostly in Python.[204]\n\nUses[edit]\nMain article: List of Python software\nPython Powered\nPython can serve as a scripting language for web applications, e.g. via mod_wsgi for the Apache webserver.[205] With Web Server Gateway Interface, a standard API has evolved to facilitate these applications. Web frameworks like Django, Pylons, Pyramid, TurboGears, web2py, Tornado, Flask, Bottle, and Zope support developers in the design and maintenance of complex applications. Pyjs and IronPython can be used to develop the client-side of Ajax-based applications. SQLAlchemy can be used as a data mapper to a relational database. Twisted is a framework to program communications between computers, and is used (for example) by Dropbox.\nLibraries such as NumPy, SciPy and Matplotlib allow the effective use of Python in scientific computing,[206][207] with specialized libraries such as Biopython and Astropy providing domain-specific functionality. SageMath is a computer algebra system with a notebook interface programmable in Python: its library covers many aspects of mathematics, including algebra, combinatorics, numerical mathematics, number theory, and calculus.[208] OpenCV has Python bindings with a rich set of features for computer vision and image processing.[209]\nPython is commonly used in artificial intelligence projects and machine learning projects with the help of libraries like TensorFlow, Keras, Pytorch, scikit-learn and the Logic language ProbLog.[210][211][212][213][214] As a scripting language with a modular architecture, simple syntax, and rich text processing tools, Python is often used for natural language processing.[215]\nThe combination of Python and Prolog has proved to be particularly useful for AI applications, with Prolog providing knowledge representation and reasoning capablities. The Janus system, in particular, exploits the similarites between these two languages,\nin part because of their use of dynamic typing, and the simple recursive nature of their\ndata structures. Typical applications of this combination include  natural language processing, visual query\nanswering, geospatial reasoning, and handling of semantic web data.[216][217]\nThe Natlog system, implemented in Python, uses Definite Clause Grammars (DCGs) as prompt generators for text-to-text generators like GPT3 and text-to-image generators like DALL-E or Stable Diffusion.[218]\nPython can also be used for graphical user interface (GUI) by using libraries like Tkinter.[219][220]\nPython has been successfully embedded in many software products as a scripting language, including in finite element method software such as Abaqus, 3D parametric modelers like FreeCAD, 3D animation packages such as 3ds Max, Blender, Cinema 4D, Lightwave, Houdini, Maya, modo, MotionBuilder, Softimage, the visual effects compositor Nuke, 2D imaging programs like GIMP,[221] Inkscape, Scribus and Paint Shop Pro,[222] and musical notation programs like scorewriter and capella. GNU Debugger uses Python as a pretty printer to show complex structures such as C++ containers. Esri promotes Python as the best choice for writing scripts in ArcGIS.[223] It has also been used in several video games,[224][225] and has been adopted as first of the three available programming languages in Google App Engine, the other two being Java and Go.[226]\nMany operating systems include Python as a standard component. It ships with most Linux distributions,[227] AmigaOS 4 (using Python 2.7), FreeBSD (as a package), NetBSD, and OpenBSD (as a package) and can be used from the command line (terminal). Many Linux distributions use installers written in Python: Ubuntu uses the Ubiquity installer, while Red Hat Linux and Fedora Linux use the Anaconda installer. Gentoo Linux uses Python in its package management system, Portage.\nPython is used extensively in the information security industry, including in exploit development.[228][229]\nMost of the Sugar software for the One Laptop per Child XO, developed at Sugar Labs as of 2008[update], is written in Python.[230] The Raspberry Pi single-board computer project has adopted Python as its main user-programming language.\nLibreOffice includes Python and intends to replace Java with Python. Its Python Scripting Provider is a core feature[231] since Version 4.0 from 7 February 2013.\n\nLanguages influenced by Python[edit]\nPython\'s design and philosophy have influenced many other programming languages:\n\nBoo uses indentation, a similar syntax, and a similar object model.[232]\nCobra uses indentation and a similar syntax, and its Acknowledgements document lists Python first among languages that influenced it.[233]\nCoffeeScript, a programming language that cross-compiles to JavaScript, has Python-inspired syntax.\nECMAScript–JavaScript borrowed iterators and generators from Python.[234]\nGDScript, a scripting language very similar to Python, built-in to the Godot game engine.[235]\nGo is designed for the "speed of working in a dynamic language like Python"[236] and shares the same syntax for slicing arrays.\nGroovy was motivated by the desire to bring the Python design philosophy to Java.[237]\nJulia was designed to be "as usable for general programming as Python".[28]\nMojo is a non-strict[29][238] superset of Python (e.g. still missing classes, and adding e.g. struct).[239]\nNim uses indentation and similar syntax.[240]\nRuby\'s creator, Yukihiro Matsumoto, has said: "I wanted a scripting language that was more powerful than Perl, and more object-oriented than Python. That\'s why I decided to design my own language."[241]\nSwift, a programming language developed by Apple, has some Python-inspired syntax.[242]\nKotlin blends Python and Java features, minimizing boilerplate code for enhanced developer efficiency.[243]\nPython\'s development practices have also been emulated by other languages. For example, the practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python, a PEP) is also used in Tcl,[244] Erlang,[245] and Swift.[246]\n\nSee also[edit]\n\nComputer programming portalFree and open-source software portal\nPython syntax and semantics\npip (package manager)\nList of programming languages\nHistory of programming languages\nComparison of programming languages\n\nReferences[edit]\n\n\n^ "General Python FAQ – Python 3.9.2 documentation". docs.python.org. Archived from the original on 24 October 2012. Retrieved 28 March 2021.\n\n^ "Python 0.9.1 part 01/21". alt.sources archives. Archived from the original on 11 August 2021. Retrieved 11 August 2021.\n\n^ "Why is Python a dynamic language and also a strongly typed language". Python Wiki. Archived from the original on 14 March 2021. Retrieved 27 January 2021.\n\n^ a b "PEP 483 – The Theory of Type Hints". Python.org. Archived from the original on 14 June 2020. Retrieved 14 June 2018.\n\n^ "PEP 11 – CPython platform support | peps.python.org". Python Enhancement Proposals (PEPs). Retrieved 22 April 2024.\n\n^ "PEP 738 – Adding Android as a supported platform | peps.python.org". Python Enhancement Proposals (PEPs). Retrieved 19 May 2024.\n\n^ "Download Python for Other Platforms". Python.org. Archived from the original on 27 November 2020. Retrieved 18 August 2023.\n\n^ "test – Regression tests package for Python – Python 3.7.13 documentation". docs.python.org. Archived from the original on 17 May 2022. Retrieved 17 May 2022.\n\n^ "platform – Access to underlying platform\'s identifying data – Python 3.10.4 documentation". docs.python.org. Archived from the original on 17 May 2022. Retrieved 17 May 2022.\n\n^ Holth, Moore (30 March 2014). "PEP 0441 – Improving Python ZIP Application Support". Archived from the original on 26 December 2018. Retrieved 12 November 2015.\n\n^ "Starlark Language". Archived from the original on 15 June 2020. Retrieved 25 May 2019.\n\n^ a b "Why was Python created in the first place?". General Python FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 22 March 2007. I had extensive experience with implementing an interpreted language in the ABC group at CWI, and from working with this group I had learned a lot about language design. This is the origin of many Python features, including the use of indentation for statement grouping and the inclusion of very high-level data types (although the details are all different in Python).\n\n^ "Ada 83 Reference Manual (raise statement)". Archived from the original on 22 October 2019. Retrieved 7 January 2020.\n\n^ a b Kuchling, Andrew M. (22 December 2006). "Interview with Guido van Rossum (July 1998)". amk.ca. Archived from the original on 1 May 2007. Retrieved 12 March 2012. I\'d spent a summer at DEC\'s Systems Research Center, which introduced me to Modula-2+; the Modula-3 final report was being written there at about the same time. What I learned there later showed up in Python\'s exception handling, modules, and the fact that methods explicitly contain \'self\' in their parameter list. String slicing came from Algol-68 and Icon.\n\n^ a b c "itertools – Functions creating iterators for efficient looping – Python 3.7.1 documentation". docs.python.org. Archived from the original on 14 June 2020. Retrieved 22 November 2016. This module implements a number of iterator building blocks inspired by constructs from APL, Haskell, and SML.\n\n^ van Rossum, Guido (1993). "An Introduction to Python for UNIX/C Programmers". Proceedings of the NLUUG Najaarsconferentie (Dutch UNIX Users Group). CiteSeerX 10.1.1.38.2023. even though the design of C is far from ideal, its influence on Python is considerable.\n\n^ a b "Classes". The Python Tutorial. Python Software Foundation. Archived from the original on 23 October 2012. Retrieved 20 February 2012. It is a mixture of the class mechanisms found in C++ and Modula-3\n\n^ Lundh, Fredrik. "Call By Object". effbot.org. Archived from the original on 23 November 2019. Retrieved 21 November 2017. replace "CLU" with "Python", "record" with "instance", and "procedure" with "function or method", and you get a pretty accurate description of Python\'s object model.\n\n^ Simionato, Michele. "The Python 2.3 Method Resolution Order". Python Software Foundation. Archived from the original on 20 August 2020. Retrieved 29 July 2014. The C3 method itself has nothing to do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers\n\n^ Kuchling, A. M. "Functional Programming HOWTO". Python v2.7.2 documentation. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 9 February 2012. List comprehensions and generator expressions [...] are a concise notation for such operations, borrowed from the functional programming language Haskell.\n\n^ Schemenauer, Neil; Peters, Tim; Hetland, Magnus Lie (18 May 2001). "PEP 255 – Simple Generators". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 9 February 2012.\n\n^ "More Control Flow Tools". Python 3 documentation. Python Software Foundation. Archived from the original on 4 June 2016. Retrieved 24 July 2015. By popular demand, a few features commonly found in functional programming languages like Lisp have been added to Python. With the lambda keyword, small anonymous functions can be created.\n\n^ "re – Regular expression operations – Python 3.10.6 documentation". docs.python.org. Archived from the original on 18 July 2018. Retrieved 6 September 2022. This module provides regular expression matching operations similar to those found in Perl.\n\n^ "CoffeeScript". coffeescript.org. Archived from the original on 12 June 2020. Retrieved 3 July 2018.\n\n^ "The Genie Programming Language Tutorial". Archived from the original on 1 June 2020. Retrieved 28 February 2020.\n\n^ "Perl and Python influences in JavaScript". www.2ality.com. 24 February 2013. Archived from the original on 26 December 2018. Retrieved 15 May 2015.\n\n^ Rauschmayer, Axel. "Chapter 3: The Nature of JavaScript; Influences". O\'Reilly, Speaking JavaScript. Archived from the original on 26 December 2018. Retrieved 15 May 2015.\n\n^ a b "Why We Created Julia". Julia website. February 2012. Archived from the original on 2 May 2020. Retrieved 5 June 2014. We want something as usable for general programming as Python [...]\n\n^ a b Krill, Paul (4 May 2023). "Mojo language marries Python and MLIR for AI development". InfoWorld. Archived from the original on 5 May 2023. Retrieved 5 May 2023.\n\n^ Ring Team (4 December 2017). "Ring and other languages". ring-lang.net. ring-lang. Archived from the original on 25 December 2018. Retrieved 4 December 2017.\n\n^ Bini, Ola (2007). Practical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform. Berkeley: APress. p. 3. ISBN 978-1-59059-881-8.\n\n^ Lattner, Chris (3 June 2014). "Chris Lattner\'s Homepage". Chris Lattner. Archived from the original on 25 December 2018. Retrieved 3 June 2014. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.\n\n^ Kuhlman, Dave. "A Python Book: Beginning Python, Advanced Python, and Python Exercises". Section 1.1. Archived from the original (PDF) on 23 June 2012.\n\n^ "About Python". Python Software Foundation. Archived from the original on 20 April 2012. Retrieved 24 April 2012., second section "Fans of Python use the phrase "batteries included" to describe the standard library, which covers everything from asynchronous processing to zip files."\n\n^ "PEP 206 – Python Advanced Library". Python.org. Archived from the original on 5 May 2021. Retrieved 11 October 2021.\n\n^ Rossum, Guido Van (20 January 2009). "The History of Python: A Brief Timeline of Python". The History of Python. Archived from the original on 5 June 2020. Retrieved 5 March 2021.\n\n^ Peterson, Benjamin (20 April 2020). "Python 2.7.18, the last release of Python 2". Python Insider. Archived from the original on 26 April 2020. Retrieved 27 April 2020.\n\n^ "Stack Overflow Developer Survey 2022". Stack Overflow. Archived from the original on 27 June 2022. Retrieved 12 August 2022.\n\n^ "The State of Developer Ecosystem in 2020 Infographic". JetBrains: Developer Tools for Professionals and Teams. Archived from the original on 1 March 2021. Retrieved 5 March 2021.\n\n^ a b "TIOBE Index". TIOBE. Archived from the original on 25 February 2018. Retrieved 3 January 2023. The TIOBE Programming Community index is an indicator of the popularity of programming languages Updated as required.\n\n^ "PYPL PopularitY of Programming Language index". pypl.github.io. Archived from the original on 14 March 2017. Retrieved 26 March 2021.\n\n^ a b Venners, Bill (13 January 2003). "The Making of Python". Artima Developer. Artima. Archived from the original on 1 September 2016. Retrieved 22 March 2007.\n\n^ van Rossum, Guido (29 August 2000). "SETL (was: Lukewarm about range literals)". Python-Dev (Mailing list). Archived from the original on 14 July 2018. Retrieved 13 March 2011.\n\n^ van Rossum, Guido (20 January 2009). "A Brief Timeline of Python". The History of Python. Archived from the original on 5 June 2020. Retrieved 20 January 2009.\n\n^ Fairchild, Carlie (12 July 2018). "Guido van Rossum Stepping Down from Role as Python\'s Benevolent Dictator For Life". Linux Journal. Archived from the original on 13 July 2018. Retrieved 13 July 2018.\n\n^ "PEP 8100". Python Software Foundation. Archived from the original on 4 June 2020. Retrieved 4 May 2019.\n\n^ "PEP 13 – Python Language Governance". Python.org. Archived from the original on 27 May 2021. Retrieved 25 August 2021.\n\n^ Kuchling, A. M.; Zadka, Moshe (16 October 2000). "What\'s New in Python 2.0". Python Software Foundation. Archived from the original on 23 October 2012. Retrieved 11 February 2012.\n\n^ van Rossum, Guido (5 April 2006). "PEP 3000 – Python 3000". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 3 March 2016. Retrieved 27 June 2009.\n\n^ "2to3 – Automated Python 2 to 3 code translation". docs.python.org. Archived from the original on 4 June 2020. Retrieved 2 February 2021.\n\n^ "PEP 373 – Python 2.7 Release Schedule". python.org. Archived from the original on 19 May 2020. Retrieved 9 January 2017.\n\n^ "PEP 466 – Network Security Enhancements for Python 2.7.x". python.org. Archived from the original on 4 June 2020. Retrieved 9 January 2017.\n\n^ "Sunsetting Python 2". Python.org. Archived from the original on 12 January 2020. Retrieved 22 September 2019.\n\n^ "PEP 373 – Python 2.7 Release Schedule". Python.org. Archived from the original on 13 January 2020. Retrieved 22 September 2019.\n\n^ "Python Release Python 3.7.17". Python.org. Archived from the original on 31 July 2023. Retrieved 18 August 2023.\n\n^ mattip (25 December 2023). "PyPy v7.3.14 release". PyPy. Archived from the original on 5 January 2024. Retrieved 5 January 2024.\n\n^ "CVE-2021-3177". Red Hat Customer Portal. Archived from the original on 6 March 2021. Retrieved 26 February 2021.\n\n^ "CVE-2021-3177". CVE. Archived from the original on 27 February 2021. Retrieved 26 February 2021.\n\n^ "CVE-2021-23336". CVE. Archived from the original on 24 February 2021. Retrieved 26 February 2021.\n\n^ Langa, Łukasz (24 March 2022). "Python 3.10.4 and 3.9.12 are now available out of schedule". Python Insider. Archived from the original on 21 April 2022. Retrieved 19 April 2022.\n\n^ Langa, Łukasz (16 March 2022). "Python 3.10.3, 3.9.11, 3.8.13, and 3.7.13 are now available with security content". Python Insider. Archived from the original on 17 April 2022. Retrieved 19 April 2022.\n\n^ Langa, Łukasz (17 May 2022). "Python 3.9.13 is now available". Python Insider. Archived from the original on 17 May 2022. Retrieved 21 May 2022.\n\n^ Langa, Łukasz (7 September 2022). "Python releases 3.10.7, 3.9.14, 3.8.14, and 3.7.14 are now available". Python Insider. Archived from the original on 13 September 2022. Retrieved 16 September 2022.\n\n^ "CVE-2020-10735". CVE. Archived from the original on 20 September 2022. Retrieved 16 September 2022.\n\n^ corbet (24 October 2022). "Python 3.11 released [LWN.net]". lwn.net. Retrieved 15 November 2022.\n\n^ "Python". endoflife.date. 10 August 2023. Archived from the original on 18 September 2021. Retrieved 15 August 2023.\n\n^ "What\'s New In Python 3.13". Python documentation. Retrieved 30 April 2024.\n\n^ Wouters, Thomas (9 April 2024). "Python Insider: Python 3.12.3 and 3.13.0a6 released". Python Insider. Retrieved 29 April 2024.\n\n^ The Cain Gang Ltd. "Python Metaclasses: Who? Why? When?" (PDF). Archived from the original (PDF) on 30 May 2009. Retrieved 27 June 2009.\n\n^ "3.3. Special method names". The Python Language Reference. Python Software Foundation. Archived from the original on 15 December 2018. Retrieved 27 June 2009.\n\n^ "PyDBC: method preconditions, method postconditions and class invariants for Python". Archived from the original on 23 November 2019. Retrieved 24 September 2011.\n\n^ "Contracts for Python". Archived from the original on 15 June 2020. Retrieved 24 September 2011.\n\n^ "PyDatalog". Archived from the original on 13 June 2020. Retrieved 22 July 2012.\n\n^ "Extending and Embedding the Python Interpreter: Reference Counts". Docs.python.org. Archived from the original on 18 October 2012. Retrieved 5 June 2020. Since Python makes heavy use of malloc() and free(), it needs a strategy to avoid memory leaks as well as the use of freed memory. The chosen method is called reference counting.\n\n^ a b Hettinger, Raymond (30 January 2002). "PEP 289 – Generator Expressions". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 14 June 2020. Retrieved 19 February 2012.\n\n^ "6.5 itertools – Functions creating iterators for efficient looping". Docs.python.org. Archived from the original on 14 June 2020. Retrieved 22 November 2016.\n\n^ a b Peters, Tim (19 August 2004). "PEP 20 – The Zen of Python". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 26 December 2018. Retrieved 24 November 2008.\n\n^ Lutz, Mark (January 2022). "Python Changes 2014+". Learning Python. Archived from the original on 15 March 2024. Retrieved 25 February 2024.\n\n^ Thomas, Robin (3 May 2023). "Python is not a great programming language". GitHub Gist. Archived from the original on 31 December 2023. Retrieved 25 February 2024.\n\n^ "Confusion regarding a rule in The Zen of Python". Python Help - Discussions on Python.org. 3 May 2022. Archived from the original on 25 February 2024. Retrieved 25 February 2024.\n\n^ Ambi, Chetan (4 July 2021). "The Most Controversial Python Walrus Operator". Python Simplified. Archived from the original on 27 August 2023. Retrieved 5 February 2024.\n\n^ Grifski, Jeremy (24 May 2020). "The Controversy Behind The Walrus Operator in Python". The Renegade Coder. Archived from the original on 28 December 2023. Retrieved 25 February 2024.\n\n^ Bader, Dan. "Python String Formatting Best Practices". Real Python. Archived from the original on 18 February 2024. Retrieved 25 February 2024.\n\n^ Martelli, Alex; Ravenscroft, Anna; Ascher, David (2005). Python Cookbook, 2nd Edition. O\'Reilly Media. p. 230. ISBN 978-0-596-00797-3. Archived from the original on 23 February 2020. Retrieved 14 November 2015.\n\n^ "Python Culture". ebeab. 21 January 2014. Archived from the original on 30 January 2014.\n\n^ a b "Transpiling Python to Julia using PyJL" (PDF). Archived (PDF) from the original on 19 November 2023. Retrieved 20 September 2023. After manually modifying one line of code by specifying the necessary type information, we obtained a speedup of 52.6×, making the translated Julia code 19.5× faster than the original Python code.\n\n^ "Why is it called Python?". General Python FAQ. Docs.python.org. Archived from the original on 24 October 2012. Retrieved 3 January 2023.\n\n^ "15 Ways Python Is a Powerful Force on the Web". Archived from the original on 11 May 2019. Retrieved 3 July 2018.\n\n^ "pprint – Data pretty printer – Python 3.11.0 documentation". docs.python.org. Archived from the original on 22 January 2021. Retrieved 5 November 2022. stuff=[\'spam\', \'eggs\', \'lumberjack\', \'knights\', \'ni\']\n\n^ Clark, Robert (26 April 2019). "How to be Pythonic and why you should care". Medium. Archived from the original on 13 August 2021. Retrieved 20 January 2021.\n\n^ "Code Style – The Hitchhiker\'s Guide to Python". docs.python-guide.org. Archived from the original on 27 January 2021. Retrieved 20 January 2021.\n\n^ "Is Python a good language for beginning programmers?". General Python FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 21 March 2007.\n\n^ "Myths about indentation in Python". Secnetix.de. Archived from the original on 18 February 2018. Retrieved 19 April 2011.\n\n^ Guttag, John V. (12 August 2016). Introduction to Computation and Programming Using Python: With Application to Understanding Data. MIT Press. ISBN 978-0-262-52962-4.\n\n^ "PEP 8 – Style Guide for Python Code". Python.org. Archived from the original on 17 April 2019. Retrieved 26 March 2019.\n\n^ "8. Errors and Exceptions – Python 3.12.0a0 documentation". docs.python.org. Archived from the original on 9 May 2022. Retrieved 9 May 2022.\n\n^ "Highlights: Python 2.5". Python.org. Archived from the original on 4 August 2019. Retrieved 20 March 2018.\n\n^ van Rossum, Guido (22 April 2009). "Tail Recursion Elimination". Neopythonic.blogspot.be. Archived from the original on 19 May 2018. Retrieved 3 December 2012.\n\n^ van Rossum, Guido (9 February 2006). "Language Design Is Not Just Solving Puzzles". Artima forums. Artima. Archived from the original on 17 January 2020. Retrieved 21 March 2007.\n\n^ van Rossum, Guido; Eby, Phillip J. (10 May 2005). "PEP 342 – Coroutines via Enhanced Generators". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 29 May 2020. Retrieved 19 February 2012.\n\n^ "PEP 380". Python.org. Archived from the original on 4 June 2020. Retrieved 3 December 2012.\n\n^ "division". python.org. Archived from the original on 20 July 2006. Retrieved 30 July 2014.\n\n^ "PEP 0465 – A dedicated infix operator for matrix multiplication". python.org. Archived from the original on 4 June 2020. Retrieved 1 January 2016.\n\n^ "Python 3.5.1 Release and Changelog". python.org. Archived from the original on 14 May 2020. Retrieved 1 January 2016.\n\n^ "What\'s New in Python 3.8". Archived from the original on 8 June 2020. Retrieved 14 October 2019.\n\n^ van Rossum, Guido; Hettinger, Raymond (7 February 2003). "PEP 308 – Conditional Expressions". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 13 March 2016. Retrieved 13 July 2011.\n\n^ "4. Built-in Types – Python 3.6.3rc1 documentation". python.org. Archived from the original on 14 June 2020. Retrieved 1 October 2017.\n\n^ "5.3. Tuples and Sequences – Python 3.7.1rc2 documentation". python.org. Archived from the original on 10 June 2020. Retrieved 17 October 2018.\n\n^ a b "PEP 498 – Literal String Interpolation". python.org. Archived from the original on 15 June 2020. Retrieved 8 March 2017.\n\n^ "Why must \'self\' be used explicitly in method definitions and calls?". Design and History FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 19 February 2012.\n\n^ Sweigart, Al (2020). Beyond the Basic Stuff with Python: Best Practices for Writing Clean Code. No Starch Press. p. 322. ISBN 978-1-59327-966-0. Archived from the original on 13 August 2021. Retrieved 7 July 2021.\n\n^ "The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1". Archived from the original on 26 October 2012. Retrieved 12 January 2011.\n\n^ "PEP 484 – Type Hints | peps.python.org". peps.python.org. Archived from the original on 27 November 2023. Retrieved 29 November 2023.\n\n^ "typing — Support for type hints". Python documentation. Python Software Foundation. Archived from the original on 21 February 2020. Retrieved 22 December 2023.\n\n^ "mypy – Optional Static Typing for Python". Archived from the original on 6 June 2020. Retrieved 28 January 2017.\n\n^ "Introduction". mypyc.readthedocs.io. Archived from the original on 22 December 2023. Retrieved 22 December 2023.\n\n^ "15. Floating Point Arithmetic: Issues and Limitations – Python 3.8.3 documentation". docs.python.org. Archived from the original on 6 June 2020. Retrieved 6 June 2020. Almost all machines today (November 2000) use IEEE-754 floating point arithmetic, and almost all platforms map Python floats to IEEE-754 "double precision".\n\n^ Zadka, Moshe; van Rossum, Guido (11 March 2001). "PEP 237 – Unifying Long Integers and Integers". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 28 May 2020. Retrieved 24 September 2011.\n\n^ "Built-in Types". Archived from the original on 14 June 2020. Retrieved 3 October 2019.\n\n^ "PEP 465 – A dedicated infix operator for matrix multiplication". python.org. Archived from the original on 29 May 2020. Retrieved 3 July 2018.\n\n^ a b Zadka, Moshe; van Rossum, Guido (11 March 2001). "PEP 238 – Changing the Division Operator". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 28 May 2020. Retrieved 23 October 2013.\n\n^ "Why Python\'s Integer Division Floors". 24 August 2010. Archived from the original on 5 June 2020. Retrieved 25 August 2010.\n\n^ "round", The Python standard library, release 3.2, §2: Built-in functions, archived from the original on 25 October 2012, retrieved 14 August 2011\n\n^ "round", The Python standard library, release 2.7, §2: Built-in functions, archived from the original on 27 October 2012, retrieved 14 August 2011\n\n^ Beazley, David M. (2009). Python Essential Reference (4th ed.). Addison-Wesley Professional. p. 66. ISBN 9780672329784.\n\n^ Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language (2nd ed.). p. 206.\n\n^ a b Batista, Facundo (17 October 2003). "PEP 327 – Decimal Data Type". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 4 June 2020. Retrieved 24 November 2008.\n\n^ "What\'s New in Python 2.6". Python v2.6.9 documentation. 29 October 2013. Archived from the original on 23 December 2019. Retrieved 26 September 2015.\n\n^ "10 Reasons Python Rocks for Research (And a Few Reasons it Doesn\'t) – Hoyt Koepke". University of Washington Department of Statistics. Archived from the original on 31 May 2020. Retrieved 3 February 2019.\n\n^ Shell, Scott (17 June 2014). "An introduction to Python for scientific computing" (PDF). Archived (PDF) from the original on 4 February 2019. Retrieved 3 February 2019.\n\n^ Piotrowski, Przemyslaw (July 2006). "Build a Rapid Web Development Environment for Python Server Pages and Oracle". Oracle Technology Network. Oracle. Archived from the original on 2 April 2019. Retrieved 12 March 2012.\n\n^ Eby, Phillip J. (7 December 2003). "PEP 333 – Python Web Server Gateway Interface v1.0". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 14 June 2020. Retrieved 19 February 2012.\n\n^ "PyPI". PyPI. 17 March 2024. Archived from the original on 17 March 2024.\n\n^ Enthought, Canopy. "Canopy". www.enthought.com. Archived from the original on 15 July 2017. Retrieved 20 August 2016.\n\n^ "PEP 7 – Style Guide for C Code | peps.python.org". peps.python.org. Archived from the original on 24 April 2022. Retrieved 28 April 2022.\n\n^ "4. Building C and C++ Extensions – Python 3.9.2 documentation". docs.python.org. Archived from the original on 3 March 2021. Retrieved 1 March 2021.\n\n^ van Rossum, Guido (5 June 2001). "PEP 7 – Style Guide for C Code". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 1 June 2020. Retrieved 24 November 2008.\n\n^ "CPython byte code". Docs.python.org. Archived from the original on 5 June 2020. Retrieved 16 February 2016.\n\n^ "Python 2.5 internals" (PDF). Archived (PDF) from the original on 6 August 2012. Retrieved 19 April 2011.\n\n^ "Changelog – Python 3.9.0 documentation". docs.python.org. Archived from the original on 7 February 2021. Retrieved 8 February 2021.\n\n^ "Download Python". Python.org. Archived from the original on 8 December 2020. Retrieved 13 December 2020.\n\n^ "history [vmspython]". www.vmspython.org. Archived from the original on 2 December 2020. Retrieved 4 December 2020.\n\n^ "An Interview with Guido van Rossum". Oreilly.com. Archived from the original on 16 July 2014. Retrieved 24 November 2008.\n\n^ "Download Python for Other Platforms". Python.org. Archived from the original on 27 November 2020. Retrieved 4 December 2020.\n\n^ "PyPy compatibility". Pypy.org. Archived from the original on 6 June 2020. Retrieved 3 December 2012.\n\n^ Team, The PyPy (28 December 2019). "Download and Install". PyPy. Archived from the original on 8 January 2022. Retrieved 8 January 2022.\n\n^ "speed comparison between CPython and Pypy". Speed.pypy.org. Archived from the original on 10 May 2021. Retrieved 3 December 2012.\n\n^ "Application-level Stackless features – PyPy 2.0.2 documentation". Doc.pypy.org. Archived from the original on 4 June 2020. Retrieved 17 July 2013.\n\n^ "Python-for-EV3". LEGO Education. Archived from the original on 7 June 2020. Retrieved 17 April 2019.\n\n^ Yegulalp, Serdar (29 October 2020). "Pyston returns from the dead to speed Python". InfoWorld. Archived from the original on 27 January 2021. Retrieved 26 January 2021.\n\n^ "cinder: Instagram\'s performance-oriented fork of CPython". GitHub. Archived from the original on 4 May 2021. Retrieved 4 May 2021.\n\n^ Aroca, Rafael (7 August 2021). "Snek Lang: feels like Python on Arduinos". Yet Another Technology Blog. Archived from the original on 5 January 2024. Retrieved 4 January 2024.\n\n^ Aufranc (CNXSoft), Jean-Luc (16 January 2020). "Snekboard Controls LEGO Power Functions with CircuitPython or Snek Programming Languages (Crowdfunding) - CNX Software". CNX Software - Embedded Systems News. Archived from the original on 5 January 2024. Retrieved 4 January 2024.\n\n^ Kennedy (@mkennedy), Michael. "Ready to find out if you\'re git famous?". pythonbytes.fm. Archived from the original on 5 January 2024. Retrieved 4 January 2024.\n\n^ Packard, Keith (20 December 2022). "The Snek Programming Language: A Python-inspired Embedded Computing Language" (PDF). Archived (PDF) from the original on 4 January 2024. Retrieved 4 January 2024.\n\n^ "Plans for optimizing Python". Google Project Hosting. 15 December 2009. Archived from the original on 11 April 2016. Retrieved 24 September 2011.\n\n^ "Python on the Nokia N900". Stochastic Geometry. 29 April 2010. Archived from the original on 20 June 2019. Retrieved 9 July 2015.\n\n^ "Brython". brython.info. Archived from the original on 3 August 2018. Retrieved 21 January 2021.\n\n^ "Transcrypt – Python in the browser". transcrypt.org. Archived from the original on 19 August 2018. Retrieved 22 December 2020.\n\n^ "Transcrypt: Anatomy of a Python to JavaScript Compiler". InfoQ. Archived from the original on 5 December 2020. Retrieved 20 January 2021.\n\n^ "Codon: Differences with Python". Archived from the original on 25 May 2023. Retrieved 28 August 2023.\n\n^ Lawson, Loraine (14 March 2023). "MIT-Created Compiler Speeds up Python Code". The New Stack. Archived from the original on 6 April 2023. Retrieved 28 August 2023.\n\n^ "Nuitka Home | Nuitka Home". nuitka.net. Archived from the original on 30 May 2020. Retrieved 18 August 2017.\n\n^ Guelton, Serge; Brunet, Pierrick; Amini, Mehdi; Merlini, Adrien; Corbillon, Xavier; Raynaud, Alan (16 March 2015). "Pythran: enabling static optimization of scientific Python programs". Computational Science & Discovery. 8 (1). IOP Publishing: 014001. Bibcode:2015CS&D....8a4001G. doi:10.1088/1749-4680/8/1/014001. ISSN 1749-4699.\n\n^ "The Python → 11l → C++ transpiler". Archived from the original on 24 September 2022. Retrieved 17 July 2022.\n\n^ "google/grumpy". 10 April 2020. Archived from the original on 15 April 2020. Retrieved 25 March 2020 – via GitHub.\n\n^ "Projects". opensource.google. Archived from the original on 24 April 2020. Retrieved 25 March 2020.\n\n^ Francisco, Thomas Claburn in San. "Google\'s Grumpy code makes Python Go". www.theregister.com. Archived from the original on 7 March 2021. Retrieved 20 January 2021.\n\n^ "GitHub – IronLanguages/ironpython3: Implementation of Python 3.x for .NET Framework that is built on top of the Dynamic Language Runtime". GitHub. Archived from the original on 28 September 2021.\n\n^ "IronPython.net /". ironpython.net. Archived from the original on 17 April 2021.\n\n^ "Jython FAQ". www.jython.org. Archived from the original on 22 April 2021. Retrieved 22 April 2021.\n\n^ Murri, Riccardo (2013). Performance of Python runtimes on a non-numeric scientific code. European Conference on Python in Science (EuroSciPy). arXiv:1404.6388. Bibcode:2014arXiv1404.6388M.\n\n^ "The Computer Language Benchmarks Game". Archived from the original on 14 June 2020. Retrieved 30 April 2020.\n\n^ a b Warsaw, Barry; Hylton, Jeremy; Goodger, David (13 June 2000). "PEP 1 – PEP Purpose and Guidelines". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 6 June 2020. Retrieved 19 April 2011.\n\n^ "PEP 8 – Style Guide for Python Code". Python.org. Archived from the original on 17 April 2019. Retrieved 26 March 2019.\n\n^ Cannon, Brett. "Guido, Some Guys, and a Mailing List: How Python is Developed". python.org. Python Software Foundation. Archived from the original on 1 June 2009. Retrieved 27 June 2009.\n\n^ "Moving Python\'s bugs to GitHub [LWN.net]". Archived from the original on 2 October 2022. Retrieved 2 October 2022.\n\n^ "Python Developer\'s Guide – Python Developer\'s Guide". devguide.python.org. Archived from the original on 9 November 2020. Retrieved 17 December 2019.\n\n^ Hughes, Owen (24 May 2021). "Programming languages: Why Python 4.0 might never arrive, according to its creator". TechRepublic. Archived from the original on 14 July 2022. Retrieved 16 May 2022.\n\n^ "PEP 602 – Annual Release Cycle for Python". Python.org. Archived from the original on 14 June 2020. Retrieved 6 November 2019.\n\n^ "Changing the Python release cadence [LWN.net]". lwn.net. Archived from the original on 6 November 2019. Retrieved 6 November 2019.\n\n^ Norwitz, Neal (8 April 2002). "[Python-Dev] Release Schedules (was Stability & change)". Archived from the original on 15 December 2018. Retrieved 27 June 2009.\n\n^ a b Aahz; Baxter, Anthony (15 March 2001). "PEP 6 – Bug Fix Releases". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 27 June 2009.\n\n^ "Python Buildbot". Python Developer\'s Guide. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 24 September 2011.\n\n^ "1. Extending Python with C or C++ – Python 3.9.1 documentation". docs.python.org. Archived from the original on 23 June 2020. Retrieved 14 February 2021.\n\n^ "PEP 623 – Remove wstr from Unicode". Python.org. Archived from the original on 5 March 2021. Retrieved 14 February 2021.\n\n^ "PEP 634 – Structural Pattern Matching: Specification". Python.org. Archived from the original on 6 May 2021. Retrieved 14 February 2021.\n\n^ "Documentation Tools". Python.org. Archived from the original on 11 November 2020. Retrieved 22 March 2021.\n\n^ a b "Whetting Your Appetite". The Python Tutorial. Python Software Foundation. Archived from the original on 26 October 2012. Retrieved 20 February 2012.\n\n^ "In Python, should I use else after a return in an if block?". Stack Overflow. Stack Exchange. 17 February 2011. Archived from the original on 20 June 2019. Retrieved 6 May 2011.\n\n^ Lutz, Mark (2009). Learning Python: Powerful Object-Oriented Programming. O\'Reilly Media, Inc. p. 17. ISBN 9781449379322. Archived from the original on 17 July 2017. Retrieved 9 May 2017.\n\n^ Fehily, Chris (2002). Python. Peachpit Press. p. xv. ISBN 9780201748840. Archived from the original on 17 July 2017. Retrieved 9 May 2017.\n\n^ Lubanovic, Bill (2014). Introducing Python. Sebastopol, CA : O\'Reilly Media. p. 305. ISBN 978-1-4493-5936-2. Retrieved 31 July 2023.\n\n^ Blake, Troy (18 January 2021). "TIOBE Index for January 2021". Technology News and Information by SeniorDBA. Archived from the original on 21 March 2021. Retrieved 26 February 2021.\n\n^ "Quotes about Python". Python Software Foundation. Archived from the original on 3 June 2020. Retrieved 8 January 2012.\n\n^ "Organizations Using Python". Python Software Foundation. Archived from the original on 21 August 2018. Retrieved 15 January 2009.\n\n^ "Python : the holy grail of programming". CERN Bulletin (31/2006). CERN Publications. 31 July 2006. Archived from the original on 15 January 2013. Retrieved 11 February 2012.\n\n^ Shafer, Daniel G. (17 January 2003). "Python Streamlines Space Shuttle Mission Design". Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 24 November 2008.\n\n^ "Tornado: Facebook\'s Real-Time Web Framework for Python – Facebook for Developers". Facebook for Developers. Archived from the original on 19 February 2019. Retrieved 19 June 2018.\n\n^ "What Powers Instagram: Hundreds of Instances, Dozens of Technologies". Instagram Engineering. 11 December 2016. Archived from the original on 15 June 2020. Retrieved 27 May 2019.\n\n^ "How we use Python at Spotify". Spotify Labs. 20 March 2013. Archived from the original on 10 June 2020. Retrieved 25 July 2018.\n\n^ Fortenberry, Tim (17 January 2003). "Industrial Light & Magic Runs on Python". Python Software Foundation. Archived from the original on 6 June 2020. Retrieved 11 February 2012.\n\n^ Taft, Darryl K. (5 March 2007). "Python Slithers into Systems". eWeek.com. Ziff Davis Holdings. Archived from the original on 13 August 2021. Retrieved 24 September 2011.\n\n^ GitHub – reddit-archive/reddit: historical code from reddit.com., The Reddit Archives, archived from the original on 1 June 2020, retrieved 20 March 2019\n\n^ "Usage statistics and market share of Python for websites". 2012. Archived from the original on 13 August 2021. Retrieved 18 December 2012.\n\n^ Oliphant, Travis (2007). "Python for Scientific Computing". Computing in Science and Engineering. 9 (3): 10–20. Bibcode:2007CSE.....9c..10O. CiteSeerX 10.1.1.474.6460. doi:10.1109/MCSE.2007.58. S2CID 206457124. Archived from the original on 15 June 2020. Retrieved 10 April 2015.\n\n^ Millman, K. Jarrod; Aivazis, Michael (2011). "Python for Scientists and Engineers". Computing in Science and Engineering. 13 (2): 9–12. Bibcode:2011CSE....13b...9M. doi:10.1109/MCSE.2011.36. Archived from the original on 19 February 2019. Retrieved 7 July 2014.\n\n^ Science education with SageMath, Innovative Computing in Science Education, archived from the original on 15 June 2020, retrieved 22 April 2019\n\n^ "OpenCV: OpenCV-Python Tutorials". docs.opencv.org. Archived from the original on 23 September 2020. Retrieved 14 September 2020.\n\n^ Dean, Jeff; Monga, Rajat; et al. (9 November 2015). "TensorFlow: Large-scale machine learning on heterogeneous systems" (PDF). TensorFlow.org. Google Research. Archived (PDF) from the original on 20 November 2015. Retrieved 10 November 2015.\n\n^ Piatetsky, Gregory. "Python eats away at R: Top Software for Analytics, Data Science, Machine Learning in 2018: Trends and Analysis". KDnuggets. Archived from the original on 15 November 2019. Retrieved 30 May 2018.\n\n^ "Who is using scikit-learn? – scikit-learn 0.20.1 documentation". scikit-learn.org. Archived from the original on 6 May 2020. Retrieved 30 November 2018.\n\n^ Jouppi, Norm. "Google supercharges machine learning tasks with TPU custom chip". Google Cloud Platform Blog. Archived from the original on 18 May 2016. Retrieved 19 May 2016.\n\n^ De Raedt, Luc; Kimmig, Angelika (2015). "Probabilistic (logic) programming concepts". Machine Learning. 100 (1): 5–47. doi:10.1007/s10994-015-5494-z. S2CID 3166992.\n\n^ "Natural Language Toolkit – NLTK 3.5b1 documentation". www.nltk.org. Archived from the original on 13 June 2020. Retrieved 10 April 2020.\n\n^ Andersen, C. and Swift, T., 2023. The Janus System: a bridge to new prolog applications. In Prolog: The Next 50 Years (pp. 93-104). Cham: Springer Nature Switzerland.\n\n^ "SWI-Prolog Python interface". Archived from the original on 15 March 2024. Retrieved 15 March 2024.\n\n^ Tarau, P., 2023. Reflections on automation, learnability and expressiveness in logic-based programming languages. In Prolog: The Next 50 Years (pp. 359-371). Cham: Springer Nature Switzerland.\n\n^ "Tkinter — Python interface to TCL/Tk". Archived from the original on 18 October 2012. Retrieved 9 June 2023.\n\n^ "Python Tkinter Tutorial". 3 June 2020. Archived from the original on 9 June 2023. Retrieved 9 June 2023.\n\n^ "Installers for GIMP for Windows – Frequently Asked Questions". 26 July 2013. Archived from the original on 17 July 2013. Retrieved 26 July 2013.\n\n^ "jasc psp9components". Archived from the original on 19 March 2008.\n\n^ "About getting started with writing geoprocessing scripts". ArcGIS Desktop Help 9.2. Environmental Systems Research Institute. 17 November 2006. Archived from the original on 5 June 2020. Retrieved 11 February 2012.\n\n^ CCP porkbelly (24 August 2010). "Stackless Python 2.7". EVE Community Dev Blogs. CCP Games. Archived from the original on 11 January 2014. Retrieved 11 January 2014. As you may know, EVE has at its core the programming language known as Stackless Python.\n\n^ Caudill, Barry (20 September 2005). "Modding Sid Meier\'s Civilization IV". Sid Meier\'s Civilization IV Developer Blog. Firaxis Games. Archived from the original on 2 December 2010. we created three levels of tools ... The next level offers Python and XML support, letting modders with more experience manipulate the game world and everything in it.\n\n^ "Python Language Guide (v1.0)". Google Documents List Data API v1.0. Archived from the original on 15 July 2010.\n\n^ "Python Setup and Usage". Python Software Foundation. Archived from the original on 17 June 2020. Retrieved 10 January 2020.\n\n^ "Immunity: Knowing You\'re Secure". Archived from the original on 16 February 2009.\n\n^ "Core Security". Core Security. Archived from the original on 9 June 2020. Retrieved 10 April 2020.\n\n^ "What is Sugar?". Sugar Labs. Archived from the original on 9 January 2009. Retrieved 11 February 2012.\n\n^ "4.0 New Features and Fixes". LibreOffice.org. The Document Foundation. 2013. Archived from the original on 9 February 2014. Retrieved 25 February 2013.\n\n^ "Gotchas for Python Users". boo.codehaus.org. Codehaus Foundation. Archived from the original on 11 December 2008. Retrieved 24 November 2008.\n\n^ Esterbrook, Charles. "Acknowledgements". cobra-language.com. Cobra Language. Archived from the original on 8 February 2008. Retrieved 7 April 2010.\n\n^ "Proposals: iterators and generators [ES4 Wiki]". wiki.ecmascript.org. Archived from the original on 20 October 2007. Retrieved 24 November 2008.\n\n^ "Frequently asked questions". Godot Engine documentation. Archived from the original on 28 April 2021. Retrieved 10 May 2021.\n\n^ Kincaid, Jason (10 November 2009). "Google\'s Go: A New Programming Language That\'s Python Meets C++". TechCrunch. Archived from the original on 18 January 2010. Retrieved 29 January 2010.\n\n^ Strachan, James (29 August 2003). "Groovy – the birth of a new dynamic language for the Java platform". Archived from the original on 5 April 2007. Retrieved 11 June 2007.\n\n^ "Modular Docs - Why Mojo". docs.modular.com. Archived from the original on 5 May 2023. Retrieved 5 May 2023. Mojo as a member of the Python family [..] Embracing Python massively simplifies our design efforts, because most of the syntax is already specified.  [..] we decided that the right long-term goal for Mojo is to provide a superset of Python (i.e. be compatible with existing programs) and to embrace the CPython immediately for long-tail ecosystem enablement. To a Python programmer, we expect and hope that Mojo will be immediately familiar, while also providing new tools for developing systems-level code that enable you to do things that Python falls back to C and C++ for.\n\n^ Spencer, Michael (4 May 2023). "What is Mojo Programming Language?". datasciencelearningcenter.substack.com. Archived from the original on 5 May 2023. Retrieved 5 May 2023.\n\n^ Yegulalp, Serdar (16 January 2017). "Nim language draws from best of Python, Rust, Go, and Lisp". InfoWorld. Archived from the original on 13 October 2018. Retrieved 7 June 2020. Nim\'s syntax is strongly reminiscent of Python\'s, as it uses indented code blocks and some of the same syntax (such as the way if/elif/then/else blocks are constructed).\n\n^ "An Interview with the Creator of Ruby". Linuxdevcenter.com. Archived from the original on 28 April 2018. Retrieved 3 December 2012.\n\n^ Lattner, Chris (3 June 2014). "Chris Lattner\'s Homepage". Chris Lattner. Archived from the original on 22 December 2015. Retrieved 3 June 2014. I started work on the Swift Programming Language in July of 2010. I implemented much of the basic language structure, with only a few people knowing of its existence. A few other (amazing) people started contributing in earnest late in 2011, and it became a major focus for the Apple Developer Tools group in July 2013 [...] drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.\n\n^ Jalan, Nishant Aanjaney (10 November 2022). "Programming in Kotlin". CodeX. Retrieved 29 April 2024.\n\n^ Kupries, Andreas; Fellows, Donal K. (14 September 2000). "TIP #3: TIP Format". tcl.tk. Tcl Developer Xchange. Archived from the original on 13 July 2017. Retrieved 24 November 2008.\n\n^ Gustafsson, Per; Niskanen, Raimo (29 January 2007). "EEP 1: EEP Purpose and Guidelines". erlang.org. Archived from the original on 15 June 2020. Retrieved 19 April 2011.\n\n^ "Swift Evolution Process". Swift Programming Language Evolution repository on GitHub. 18 February 2020. Archived from the original on 27 April 2020. Retrieved 27 April 2020.\n\n\nSources[edit]\n"Python for Artificial Intelligence". Python Wiki. 19 July 2012. Archived from the original on 1 November 2012. Retrieved 3 December 2012.\nPaine, Jocelyn, ed. (August 2005). "AI in Python". AI Expert Newsletter. Amzi!. Archived from the original on 26 March 2012. Retrieved 11 February 2012.\n"PyAIML 0.8.5 : Python Package Index". Pypi.python.org. Retrieved 17 July 2013.\nRussell, Stuart J. & Norvig, Peter (2009). Artificial Intelligence: A Modern Approach (3rd ed.). Upper Saddle River, NJ: Prentice Hall. ISBN 978-0-13-604259-4.\nFurther reading[edit]\nDowney, Allen B. (May 2012). Think Python: How to Think Like a Computer Scientist (version 1.6.6 ed.). Cambridge University Press. ISBN 978-0-521-72596-5.\nHamilton, Naomi (5 August 2008). "The A-Z of Programming Languages: Python". Computerworld. Archived from the original on 29 December 2008. Retrieved 31 March 2010.\nLutz, Mark (2013). Learning Python (5th ed.). O\'Reilly Media. ISBN 978-0-596-15806-4.\nSummerfield, Mark (2009). Programming in Python 3 (2nd ed.). Addison-Wesley Professional. ISBN 978-0-321-68056-3.\nRamalho, Luciano (May 2022). Fluent Python. O\'Reilly Media. ISBN 978-1-4920-5632-4.\nExternal links[edit]\n\n\nPython  at Wikipedia\'s sister projects\n\nMedia from CommonsQuotations from WikiquoteTextbooks from WikibooksResources from WikiversityData from Wikidata\n\nOfficial website \nvtePythonImplementations\nCircuitPython\nCLPython\nCPython\nCython\nMicroPython\nNumba\nIronPython\nJython\nPsyco\nPyPy\nPython for S60\nShed Skin\nStackless Python\nUnladen Swallow\nmore...\nIDE\nEric Python IDE\nIDLE\nNinja-IDE\nPyCharm\nPyDev\nSpyder\nmore...\nTopics\nWSGI\nASGI\n\nsoftware (list)\nPython Software Foundation\nPyCon\n\nvteProgramming languages\nComparison\nTimeline\nHistory\n\nAda\nALGOL\nAPL\nArkTS\nAssembly\nBASIC\nC\nC++\nC#\nClassic Visual Basic\nCOBOL\nErlang\nForth\nFortran\nGo\nHaskell\nJava\nJavaScript\nJulia\nKotlin\nLisp\nLua\nMATLAB\nML\nObject Pascal\nPascal\nPerl\nPHP\nProlog\nPython\nR\nRuby\nRust\nSQL\nScratch\nShell\nSimula\nSmalltalk\nSwift\nVisual Basic\nmore...\n\n Lists: Alphabetical\nCategorical\nGenerational\nNon-English-based\n Category\n\nvtePython web frameworks\nBottle\nCherryPy\nCubicWeb\nDjango\nFastAPI\nFlask\nGrok\nNevow\nPylons\nPyramid\nQuixote\nTACTIC\nTornado\nTurboGears\nTwistedWeb\nweb2py\nZope 2\nmore...\n\nvteDifferentiable computingGeneral\nDifferentiable programming\nInformation geometry\nStatistical manifold\nAutomatic differentiation\nNeuromorphic engineering\nPattern recognition\nTensor calculus\nComputational learning theory\nInductive bias\nConcepts\nGradient descent\nSGD\nClustering\nRegression\nOverfitting\nHallucination\nAdversary\nAttention\nConvolution\nLoss functions\nBackpropagation\nBatchnorm\nActivation\nSoftmax\nSigmoid\nRectifier\nRegularization\nDatasets\nAugmentation\nDiffusion\nAutoregression\nApplications\nMachine learning\nIn-context learning\nArtificial neural network\nDeep learning\nScientific computing\nArtificial Intelligence\nLanguage model\nLarge language model\nHardware\nIPU\nTPU\nVPU\nMemristor\nSpiNNaker\nSoftware libraries\nTensorFlow\nPyTorch\nKeras\nTheano\nJAX\nFlux.jl\nMindSpore\nImplementationsAudio–visual\nAlexNet\nWaveNet\nHuman image synthesis\nHWR\nOCR\nSpeech synthesis\nSpeech recognition\nFacial recognition\nAlphaFold\nText-to-image models\nDALL-E\nMidjourney\nStable Diffusion\nText-to-video models\nSora\nVideoPoet\nWhisper\nVerbal\nWord2vec\nSeq2seq\nBERT\nGemini\nLaMDA\nBard\nNMT\nProject Debater\nIBM Watson\nIBM Watsonx\nGranite\nGPT-1\nGPT-2\nGPT-3\nGPT-4\nChatGPT\nGPT-J\nChinchilla AI\nPaLM\nBLOOM\nLLaMA\nPanGu-Σ\nDecisional\nAlphaGo\nAlphaZero\nQ-learning\nSARSA\nOpenAI Five\nSelf-driving car\nMuZero\nAction selection\nAuto-GPT\nRobot control\nPeople\nYoshua Bengio\nAlex Graves\nIan Goodfellow\nStephen Grossberg\nDemis Hassabis\nGeoffrey Hinton\nYann LeCun\nFei-Fei Li\nAndrew Ng\nJürgen Schmidhuber\nDavid Silver\nIlya Sutskever\nOrganizations\nAnthropic\nEleutherAI\nGoogle DeepMind\nHugging Face\nOpenAI\nMeta AI\nMila\nMIT CSAIL\nHuawei\nArchitectures\nNeural Turing machine\nDifferentiable neural computer\nTransformer\nRecurrent neural network (RNN)\nLong short-term memory (LSTM)\nGated recurrent unit (GRU)\nEcho state network\nMultilayer perceptron (MLP)\nConvolutional neural network\nResidual neural network\nMamba\nAutoencoder\nVariational autoencoder (VAE)\nGenerative adversarial network (GAN)\nGraph neural network\n\n Portals\nComputer programming\nTechnology\n Categories\nArtificial neural networks\nMachine learning\n\nvteFree and open-source softwareGeneral\nAlternative terms for free software\nComparison of open-source and closed-source software\nComparison of source-code-hosting facilities\nFree software\nFree software project directories\nGratis versus libre\nLong-term support\nOpen-source software\nOpen-source software development\nOutline\nTimeline\nSoftwarepackages\nAudio\nBioinformatics\nCodecs\nConfiguration management\nDrivers\nGraphics\nWireless\nHealth\nMathematics\nOffice suites\nOperating systems\nRouting\nTelevision\nVideo games\nWeb applications\nE-commerce\nAndroid apps\niOS apps\nCommercial\nFormerly proprietary\nFormerly open-source\nCommunity\nFree software movement\nHistory\nOpen-source-software movement\nEvents\nAdvocacy\nOrganisations\nFree Software Movement of India\nFree Software Foundation\nLicenses\nAFL\nApache\nAPSL\nArtistic\nBeerware\nBSD\nCreative Commons\nCDDL\nEPL\nFree Software Foundation\nGNU GPL\nGNU AGPL\nGNU LGPL\nISC\nMIT\nMPL\nPython\nPython Software Foundation License\nShared Source Initiative\nSleepycat\nUnlicense\nWTFPL\nzlib\nTypes and standards\nComparison of licenses\nContributor License Agreement\nCopyleft\nDebian Free Software Guidelines\nDefinition of Free Cultural Works\nFree license\nThe Free Software Definition\nThe Open Source Definition\nOpen-source license\nPermissive software license\nPublic domain\nViral license\n\nChallenges\nDigital rights management\nLicense proliferation\nMozilla software rebranding\nProprietary device drivers\nProprietary firmware\nProprietary software\nSCO/Linux controversies\nSoftware patents\nSoftware security\nTrusted Computing\nRelated topics\nForking\nGNU Manifesto\nMicrosoft Open Specification Promise\nOpen-core model\nOpen-source hardware\nShared Source Initiative\nSource-available software\nThe Cathedral and the Bazaar\nRevolution OS\n\n Portal\n Category\n\nvteStatistical softwarePublic domain\nDataplot\nEpi Info\nCSPro\nX-12-ARIMA\nOpen-source\nADMB\nDAP\ngretl\nJASP\nJAGS\nJMulTi\nJulia\nJupyter (Julia, Python, R)\nGNU Octave\nOpenBUGS\nOrange\nPSPP\nPython (statsmodels, PyMC3, IPython, IDLE)\nR (RStudio)\nSageMath\nSimFiT\nSOFA Statistics\nStan\nXLispStat\nFreeware\nBV4.1\nCumFreq\nSegReg\nXploRe\nWinBUGS\nCommercialCross-platform\nData Desk\nGAUSS\nGraphPad InStat\nGraphPad Prism\nIBM SPSS Statistics\nIBM SPSS Modeler\nJMP\nMaple\nMathcad\nMathematica\nMATLAB\nOxMetrics\nRATS\nRevolution Analytics\nSAS\nSmartPLS\nStata\nStatView\nSUDAAN\nS-PLUS\nTSP\nWorld Programming System (WPS)\nWindows only\nBMDP\nEViews\nGenStat\nLIMDEP\nLISREL\nMedCalc\nMicrofit\nMinitab\nMLwiN\nNCSS\nSHAZAM\nSigmaStat\nStatistica\nStatsDirect\nStatXact\nSYSTAT\nThe Unscrambler\nUNISTAT\nExcel add-ons\nAnalyse-it\nUNISTAT for Excel\nXLfit\nRExcel\n\nCategory\nComparison\n\nvteNumerical-analysis softwareFree\nAdvanced Simulation Library\nADMB\nChapel\nEuler\nFreeFem++\nFreeMat\nGenius\nGmsh\nGNU Octave\ngretl\nJulia\nJupyter (Julia, Python, R; IPython)\nMFEM\nOpenFOAM\nPython\nR\nSageMath\nSalome\nScicosLab\nScilab\nX10\nWeka\nDiscontinued\nFortress\n\nProprietary\nDADiSP\nFEATool Multiphysics\nGAUSS\nLabVIEW\nMaple\nMathcad\nMathematica\nMATLAB\nSpeakeasy\nVisSim\n\nComparison\n\nAuthority control databases International\nFAST\nNational\nFrance\nBnF data\nGermany\nIsrael\nUnited States\nCzech Republic\nOther\nIdRef\n\n\n\n\n',
  'Canadian software company based in Vancouver\n\n\nThis article contains content that is written like an advertisement. Please help improve it by removing promotional content and inappropriate external links, and by adding encyclopedic content written from a neutral point of view. (August 2012) (Learn how and when to remove this message)\nActiveState Software Inc.Company typePrivateIndustryComputer softwareFounded1997HeadquartersVancouver, British Columbia, CanadaArea servedGlobalKey peopleStephen Baker (CEO)ProductsActiveState Platform, ActivePerl, ActivePython, ActiveTcl, Komodo IDENumber of employees>60Websiteactivestate.com\nActiveState Software Inc is a Canadian software company headquartered in Vancouver, British Columbia. It develops, sells, and supports cross-platform development tools and secure software supply chain solutions for dynamic languages such as Perl, PHP, Python, Ruby and Tcl, as well as enterprise services.\nActiveState is owned by its employees and Vertu Capital, a growth equity firm based in Ontario, Canada[1] after briefly being a member of the Sophos group.[2]\n\n\nHistory[edit]\nAcquisition of ActiveState Corp was first announced in September 2003 by Sophos Plc. ActiveState\'s president Steve Munford, who is part of the acquisition will become a member of Sophos\'s executive management team as Global VP Messaging.[3][4]\n\nSophos ownership era[edit]\nIn January 2006, the Pender Financial Group, which was announced in January 2006 has agreed with Sophos Inc. to acquire ActiveState Software Inc.[5]\nIn February 2006, ActiveState Software Inc. announced its acquisition by Pender Financial Group Corporation from Sophos Inc., a subsidiary of Sophos Plc., for the purchase price of 2,250,000 USD. Following the acquisition, Bart Copeland will become ActiveState Software Inc.\'s President and CEO, and Dr. David Ascher will become ActiveState Software Inc.\'s CTO and VP of Engineering.[6] Following the sales of ActiveState to PFG, David Ascher of ActiveState revealed that Sophos agreed to sell ActiveState because developing programming tools did not fit Sophos\'s business model.[7]\n\nPender Financial Group ownership era[edit]\nActiveState was named one of Canada\'s Top 100 Employers in October 2006 as it was published in Maclean\'s magazine, along with several other software companies.[8]\n\nLicensing change[edit]\nSomewhere around 2013 the licensing model for ActiveState products changed from paid support to paid commercial use.[9][better source needed]\n\nSubsidiaries[edit]\nPhenona: In June 2011, ActiveState Software Inc. announced the acquisition of Phenona.[10][11]\nAppsecute Limited: In June 2013, ActiveState Software Inc. announced the acquisition of Appsecute.[12] The acquisition would become ActiveState\'s strategy to pair Appsecute with Stackato.[13]\nProducts[edit]\nCurrent ActiveState products include: ActiveState Platform cross-platform automated build tool for Perl, Python, Ruby and Tcl; free and commercial language distributions, ActivePerl, ActivePython, and ActiveTcl for AIX, HP-UX, Linux, OS X, Solaris, and Windows.\nFormer ActiveState products include: ActiveState Komodo, an integrated development environment (IDE) for dynamic languages which is now open source;[14] Perl Dev Kit (PDK) and Tcl Dev Kit (TDK), which have been sunset.[15][16]\nActiveState Platform[edit]\nAutomatically builds Python, Perl, Ruby and Tcl packages from source code on demand, and packages them as runtime environments for Windows, Mac, and Linux. Features a zero-config cloud-based build system that implements the supply chain levels for Software Artifacts (SLSA) standard.[17]\n\nKomodo[edit]\nKomodo 11: "Features smart and responsive autocomplete browser and overall performance symbol for faster performance."[18]\nKomodo 12: Autocomplete becomes more reliable and activates from any position and using one click to control, the package manager and execute commands directly inside the file, supporting Python (pip), PHP (Composer), Perl (PPM), Ruby (Gem), and Node.js (npm and Yarn).[19]\nPython[edit]\nActivePython is a software package consisting of the Python (programming language) implementation CPython and a set of extensions, packaged to facilitate installation.[20] As of 2006, it ran on Windows, Mac OS X, Linux, Solaris, AIX and HP-UX platforms.[21] ActivePython for Windows includes the PyWin32 extensions for programming with the Win32 API.[22] It also includes the integrated development environment IDLE, although this requires manual setup.[23]\n\nStackato[edit]\nIn February 2012, ActiveState announced the general availability of Stackato. According to the announcement, Stackato "makes it easy to develop, deploy, migrate, scale, manage, and monitor applications on any cloud", and is available in Enterprise, Micro Cloud, and Sandbox editions.[24]\nIn December 2012, ActiveState announced the OEM integration of Stackato with HP Cloud Services, specifically the HP Cloud Application Platform as a Service.[25] HP describes the product as "an application platform for development, deployment, and management of cloud applications using any language on any stack".[26][27]\nOn July 28, 2015, Hewlett-Packard Development Company, L.P. announced the acquisition of Stackato\'s business from ActiveState Software Inc.[28][29][30]\n\nEnterprise CI/CD[edit]\nActiveState confirmed that its Enterprise CI / CD Survey is available for participation by 2020. Based on how businesses commonly utilize CI / CD and how they address software runtime and create issues, the study is part of ActiveState\'s ongoing initiatives to promote the development of open-source technology.[31]\n\nReferences[edit]\n\n\n^ "Vertu Capital Acquires Secure Open Source Integration Platform Company, ActiveState". November 7, 2023.\n\n^ Bennett, Amy (September 24, 2003). "Sophos buys antispam vendor ActiveState for $23M". Computerworld. Retrieved June 10, 2022.[permanent dead link]\n\n^ "Sophos acquires anti-spam specialist ActiveState". www.sophos.com. Retrieved December 6, 2018.\n\n^ "Sophos acquires anti-spam specialist ActiveState". Computerworld. Retrieved December 6, 2018.\n\n^ "ActiveState To Spin Out". January 30, 2006. Retrieved December 6, 2018.\n\n^ "ActiveState Acquired by Employees and Pender Financial Group; Company Renews Focus on Tools and Solutions for Dynamic Languages". www.businesswire.com. February 22, 2006. Retrieved December 6, 2018.\n\n^ "NewsForge - ActiveState reactivates". November 9, 2006. Archived from the original on November 9, 2006. Retrieved December 6, 2018.\n\n^ "Reasons for Selection, 2007 Canada\'s Top 100 Employers". Archived from the original on August 2, 2012. Retrieved June 26, 2007.\n\n^ Dunstan, Andrew (December 4, 2013). "Andrew Dunstan\'s PostgreSQL and Technical blog: ActiveState make ActivePerl non-free". Retrieved December 6, 2018.\n\n^ "ActiveState Acquires Perl Cloud Company, Phenona, to Accelerate Cloud Strategy". June 14, 2011. Retrieved December 6, 2018.\n\n^ Clarke, Gavin (June 14, 2011). "Teen sells Perl cloud startup to ActiveState". The Register. Retrieved December 6, 2018.\n\n^ "ActiveState Acquires Appsecute: Private-PaaS Leader Purchases Social DevOps Solutions Provider". June 4, 2013. Retrieved December 6, 2018.\n\n^ Copeland, Bart (June 5, 2013). "Going Social: Why ActiveState Acquired Appsecute". Retrieved December 6, 2018.\n\n^ "ActiveState Komodo IDE Now Open Source". December 6, 2022. Retrieved January 12, 2023.\n\n^ "Perl Dev Kit (PDK) is Now End of Life". February 20, 2020. Retrieved January 12, 2023.\n\n^ "Tcl Dev Kit (TDK) Now End of Life". February 20, 2020. Retrieved January 12, 2023.\n\n^ "Software Supply Chain Security". Retrieved January 12, 2023.\n\n^ Armstrong, Alex (September 26, 2017). "Komodo 11 With Revamped Code Intelligence". I Programmer. Retrieved May 5, 2020.\n\n^ Vaggalis, Nikos (January 23, 2020). "ActiveState Komodo IDE Now Free". I Programmer. Retrieved May 5, 2020.\n\n^ Boswell, William (2003). Inside Windows Server 2003. Addison-Wesley Professional. p. 717.\n\n^ Martelli, Alex (2006). Python in a Nutshell. O\'Reilly. p. 19.\n\n^ Martelli, Alex; Ravenscroft, Anna; Ascher, David (2005). Python Cookbook. O\'Reilly. p. 326.\n\n^ Langtangen, Hans Petter (2013). Python Scripting for Computational Science. Springer Science & Business Media. p. 660.\n\n^ "ActiveState Unveils Stackato 1.0, the Application Platform for Creating a Private PaaS". February 29, 2012.\n\n^ "ActiveState Announces HP OEM Licensing Agreement for Platform as a Service with Stackato". December 6, 2012.\n\n^ "HP Cloud Application Platform as a Service product page". Archived from the original on January 29, 2013.\n\n^ Cohen, Reuven. "HP Unveils Cloud Application Platform Powered by ActiveState". Forbes.\n\n^ "HP Buys ActiveState\'s PaaS, Stackato". InformationWeek.\n\n^ "HP to Acquire ActiveState\'s Stackato Business to Help Customers Transition to Hybrid Cloud". Archived from the original on May 6, 2016.\n\n^ "ActiveState\'s Stackato (Cloud Foundry & Docker Based PaaS) Acquired by HP". July 29, 2015.\n\n^ "ActiveState Launches Enterprise CI/CD Survey 2020". yahoo! finance. May 29, 2020. Archived from the original on June 16, 2020. Retrieved June 16, 2020.\n\n\nExternal links[edit]\nActiveState Company site\nActiveState Code site\n\n\n\n',
  'The topic of this article may not meet Wikipedia\'s general notability guideline. Please help to demonstrate the notability of the topic by citing reliable secondary sources that are independent of the topic and provide significant coverage of it beyond a mere trivial mention. If notability cannot be shown, the article is likely to be merged, redirected, or deleted.Find sources: "Asynchronous Server Gateway Interface" – news · newspapers · books · scholar · JSTOR (December 2023) (Learn how and when to remove this message)\nCalling convention for web servers\nASGI SpecificationVersion3.0DeveloperASGI TeamRelease date2019-03-04[1]Websiteasgi.readthedocs.io/en/latest/specs/index.htmlLicensepublic domain[2]StatusDraftvte\nThe Asynchronous Server Gateway Interface (ASGI) is a calling convention for web servers to forward requests to asynchronous-capable Python programming language frameworks, and applications. It is built as a successor to the Web Server Gateway Interface (WSGI).\nWhere WSGI provided a standard for synchronous Python application, ASGI provides one for both asynchronous and synchronous applications, with a WSGI backwards-compatibility implementation and multiple servers and application frameworks.\n\n\nExample[edit]\nAn ASGI-compatible "Hello, World!" application written in Python:async def application(scope, receive, send):\n    event = await receive()\n    ...\n    await send({"type": "websocket.send", ...})\nWhere:\nLine 1 defines an asynchronous function named application, which takes three parameters (unlike in WSGI which takes only two), scope, receive and send.\nscope is a dict containing details about current connection, like the protocol, headers, etc.\nreceive and send are asynchronous callables which let the application receive and send messages from/to the client.\nLine 2 receives an incoming event, for example, HTTP request or WebSocket message. The await keyword is used because the operation is asynchronous.\nLine 4 asynchronously sends a response back to the client. In this case, it is a WebSocket communication.\nWeb Server Gateway Interface (WSGI) compatibility[edit]\nASGI is also designed to be a superset of WSGI, and there\'s a defined way of translating between the two, allowing WSGI applications to be run inside ASGI servers through a translation wrapper (provided in the asgiref library). A threadpool can be used to run the synchronous WSGI applications away from the async event loop.\n\nSee also[edit]\n\nFree and open-source software portal\nComparison of web frameworks\nFastCGI\nPython (programming language)\n Web Server Gateway Interface (WSGI)\nReferences[edit]\n\n\n^ "Version History".\n\n^ "Copyright". GitHub. Retrieved 2022-09-14.\n\n\nExternal links[edit]\nAsynchronous Server Gateway Interface Documentation\nAsynchronous Server Gateway Interface Specification\nvtePythonImplementations\nCircuitPython\nCLPython\nCPython\nCython\nMicroPython\nNumba\nIronPython\nJython\nPsyco\nPyPy\nPython for S60\nShed Skin\nStackless Python\nUnladen Swallow\nmore...\nIDE\nEric Python IDE\nIDLE\nNinja-IDE\nPyCharm\nPyDev\nSpyder\nmore...\nTopics\nWSGI\nASGI\n\nsoftware (list)\nPython Software Foundation\nPyCon\n\nvtePython web frameworks\nBottle\nCherryPy\nCubicWeb\nDjango\nFastAPI\nFlask\nGrok\nNevow\nPylons\nPyramid\nQuixote\nTACTIC\nTornado\nTurboGears\nTwistedWeb\nweb2py\nZope 2\nmore...\n\nvteWeb frameworks\nComparison\n.NET\nASP.NET\nCore\nAJAX\nDynamic Data\nMVC\nRazor\nWeb Forms\nBlazor\nDNN\nBFC\nMonoRail\nUmbraco\nWebSharper\nC++\nCppCMS\nDrogon\nWt\nColdFusion\nColdBox Platform\nCommon Lisp\nCL-HTTP\nHaskell\nServant\nSnap\nYesod\nJava\nAppFuse\nGrails\nGWT\nICEfaces\nJHipster\nJWt\nMojarra\nPlay\nRemote Application Platform\nSeam\nSling\nSpring\nStripes\nStruts\nTapestry\nVaadin\nVert.x\nWicket\nWaveMaker\nZK\nJavaScript\nAngular/AngularJS\nBackbone.js\nClosure\nDojo Toolkit\nEmber.js\nExpress.js\nExt JS\njQuery\nKnockout.js\nMeteor\nMooTools\nNext.js\nNode.js\nOpenUI5\nPrototype\nReact\nRemix\nSencha Touch\nSproutCore\nSvelte\nVue.js\nPerl\nCatalyst\nDancer\nMaypole\nMojolicious\nWebGUI\nPHP\nCakePHP\nCodeIgniter\nDrupal\neZ Publish\nFat-Free\nFlow\nFuelPHP\nGrav\nGyroscope\nHorde\nJoomla!\nLaminas\nLaravel\nli₃\nMidgard\nMODX\nPhalcon\nPHP-Fusion\nPHP-Nuke\nPop PHP\nPRADO\nProcessWire\nQcodo\nSilverstripe\nSymfony\nTYPO3\nWordPress\nXOOPS\nYii\nPython\nBlueBream\nCherryPy\nCubicWeb\nDjango\nFastAPI\nFlask\nGrok\nNevow\nPyjs\nPylons\nPyramid\nQuixote\nTACTIC\nTornado\nTurboGears\nweb2py\nZope 2\nmore...\nRuby\nMerb\nPadrino\nRuby on Rails\nSinatra\nRust\nRocket\nScala\nLift\nPlay\nScalatra\nSmalltalk\nAIDA/Web\nSeaside\nOther languages\nApplication Express (PL/SQL)\nGrails (Groovy)\nOpenACS (Tcl)\nPhoenix (Elixir)\nSproutCore (JavaScript-Ruby)\nYaws (Erlang)\n\n\n\n\n',
  'Programming language\nCircuitPythonLogo of the Blinka library, a compatibility layer for CircuitPythonOriginal author(s)Adafruit IndustriesInitial releaseJuly 19, 2017; 6 years ago (2017-07-19)[1]Stable release9.0.4[2] \n   / 16 April 2024; 35 days ago (16 April 2024)\nRepositoryhttps://github.com/adafruit/circuitpythonWritten inC[3]Platformmicrocontroller and single-board computers using the Atmel SAMD21, Atmel SAMD51, Nordic nRF52840, STMicro STM32, and ESP32, ARMmicrocontrollers, from Adafruit, SparkFun, Arduino, Particle, Raspberry Pi and othersTypePython implementationLicenseMIT license[4]Websitecircuitpython.org\nCircuitPython[5] is an open-source derivative of the MicroPython programming language targeted toward students and beginners. Development of CircuitPython is supported by Adafruit Industries. It is a software implementation of the Python 3 programming language, written in C.[3] It has been ported to run on several modern microcontrollers.\nCircuitPython consists of a Python compiler to bytecode and a runtime interpreter of that bytecode that runs on the microcontroller hardware. The user is presented with an interactive prompt (the REPL) to execute supported commands immediately. Included are a selection of core Python libraries. CircuitPython includes modules which give the programmer access to the low-level hardware of supported products as well as higher-level libraries for beginners.[6]\nCircuitPython is a fork of MicroPython, originally created by Damien George.[7] The MicroPython community continues to discuss[8] forks of MicroPython into variants such as CircuitPython.\nCircuitPython is targeted to be compliant with CPython, the reference implementation of the Python programming language.[9] Programs written for CircuitPython-compatible boards may not run unmodified on other platforms such as the Raspberry Pi.[10]\n\n\nUsage[edit]\nCircuitPython is being used as an emerging alternative solution for microcontroller programming, which is usually done in C, C++, or assembly. The language has also seen uptake in making small, handheld video game devices.[11][better source needed] Developer Chris Young has ported his infrared transmit-and-receive software to CircuitPython to provide interactivity and to aid those with accessibility issues.[12]\n\nCommunity[edit]\nThe user community support includes a Discord chat room and product support forums.[13] A Twitter account dedicated to CircuitPython news was established in 2018.[14] A newsletter, Python on Hardware, is published weekly since 15 November, 2016 by Adafruit to provide news and information on CircuitPython, MicroPython, and Python on single board computers.[15] A Reddit subreddit, r/CircuitPython, provides news on CircuitPython and related news and projects and has about 3,000 members.[16]\n\nHardware support[edit]\nThe version 6.2.0 supports Atmel SAMD21 and SAMD51 microcontrollers from Microchip Technology,[17] nRF52833 and nRF52840 from Nordic Semiconductor, CXD5602 (Spresense) from Sony, and STM32 F4-series from STMicroelectronics.[18] Previous versions supported the ESP8266 microcontroller, but its support was dropped in version 4.[19] It also supports single-board computers like Raspberry Pi.\n\nReferences[edit]\n\n\n^ Shawcroft, Scott (19 July 2017). "CircuitPython 1.0.0!". Adafruit Blog. Adafruit Industries. Retrieved 1 May 2018.\n\n^ "Release 9.0.4". 16 April 2024. Retrieved 21 April 2024.\n\n^ a b "adafruit/circuitpython". GitHub. Adafruit Industries. Retrieved 2 May 2018.\n\n^ George, Damien P. (4 May 2014). "circuitpython/LICENSE". GitHub. Retrieved 1 May 2018.\n\n^ "CircuitPython is an education friendly open-source derivative of MicroPython". GitHub. Retrieved 30 April 2018.\n\n^ "CircuitPython". Read the Docs. Adafruit Industries. Retrieved 1 May 2018.\n\n^ George, Damien (20 May 2016). "Damien P. George". Damien P. George. Retrieved 1 May 2018.\n\n^ "Adafruit CircuitPython". MicroPython Forum. MicroPython.org. Retrieved 2 May 2018.\n\n^ Lewis, James (14 February 2018). "Circuit Python adds Python to Microcontrollers". The Bald Engineer. Retrieved 2 May 2018.\n\n^ Ganne, Simon. "Can I use circuitPython code on my raspberry?". Element 14 Community. Element 14.\n\n^ Dopieralski, Radomir. "CircuitPython LAMEBOY". BitBucket. BitBucket. Retrieved 2 May 2018.\n\n^ Young, Chris (6 June 2018). "Announcing IRLibCP — a Circuit Python Module for Infrared Transmitting and Receiving". CY\'s Tech Talk. Chris Young. Retrieved 2 May 2018.\n\n^ "Adafruit CircuitPython and MicroPython". Adafruit Support Forums. Adafruit Industries. Retrieved 1 May 2018.\n\n^ "CircuitPython". Twitter. Adfafruit Industries. Retrieved 1 May 2018.\n\n^ "The Python on Hardware Newsletter". Adafruit Daily. Adafruit Industries. Retrieved 24 March 2022.\n\n^ "r/CircuitPython". Reddit.com. Adafruit Industries. Retrieved 24 March 2022.\n\n^ Kraft, Caleb (11 August 2017). "CircuitPython Snakes its Way onto Adafruit Hardware". Makezine. Maker Media, Inc. Retrieved 2 May 2018.\n\n^ Halbert, Dan (5 April 2021). "CircuitPython 6.2.0 released!". Adafruit Blog. Adafruit Industries. Retrieved 20 April 2021.\n\n^ "Why are we dropping support for ESP8266?". Adafruit.com. Adafruit Industries. Retrieved 15 April 2019.\n\n\nExternal links[edit]\nCircuitPython on GitHub\nMicroPython playlist on YouTube • Tutorials by Tony DiCola / Adafruit\nvtePythonImplementations\nCircuitPython\nCLPython\nCPython\nCython\nMicroPython\nNumba\nIronPython\nJython\nPsyco\nPyPy\nPython for S60\nShed Skin\nStackless Python\nUnladen Swallow\nmore...\nIDE\nEric Python IDE\nIDLE\nNinja-IDE\nPyCharm\nPyDev\nSpyder\nmore...\nTopics\nWSGI\nASGI\n\nsoftware (list)\nPython Software Foundation\nPyCon\n\n\n\nThis programming-language-related article is a stub. You can help Wikipedia by expanding it.vte\n\n\n\n',
  'Python programming environment\nThis article is an orphan, as no other articles link to it. Please introduce links to this page from related articles; try the Find link tool for suggestions.  (July 2015)\nThis article relies largely or entirely on a single source. Relevant discussion may be found on the talk page. Please help improve this article by introducing  citations to additional sources.Find sources: "CodeSkulptor" – news · newspapers · books · scholar · JSTOR (April 2024)\nCodeSkulptor is an interactive, web-based Python programming environment that allows Python code to be run in a web browser. The application was developed by Scott Rixner, a professor of computer science at Rice University.[1] Its features include visualization of program execution; the ability to conveniently store, edit, and share code online with other users; and cogent error messages that are helpful for debugging code.\nCurrently, CodeSkulptor must be run in Chrome 18+, Firefox 11+, or Safari 6+ for full functionality.\nCodeSkulptor is currently used by students, as well as in Coursera programming courses.\n\nReferences[edit]\n\n\n^ Rixner, Scott. Homepage. . 2015-07-25. URL:http://www.cs.rice.edu/~rixner/. Accessed: 2015-07-25. (Archived by WebCite® at)\n\n\nExternal links[edit]\nOfficial website: for Python 2\nCodeSkulptor3: official version for Python 3\n\n\nThis programming-tool-related article is a stub. You can help Wikipedia by expanding it.vte\n\n\n\n',
  'Textbook written by Wesley J. Chun\nThis article has multiple issues. Please help improve it or discuss these issues on the talk page. (Learn how and when to remove these template messages)\n\nThis article is an orphan, as no other articles link to it. Please introduce links to this page from related articles; try the Find link tool for suggestions.  (November 2022)\nThis article contains content that is written like an advertisement. Please help improve it by removing promotional content and inappropriate external links, and by adding encyclopedic content written from a neutral point of view. (October 2019) (Learn how and when to remove this message)\n\n (Learn how and when to remove this message)\nCore Python Programming Cover of Core Python Programming Second EditionAuthorWesley J. ChunGenreComputerPublisherPrentice HallPublication date2006 (2nd Ed.)Media typeBookPages1136ISBN0-13-226993-7OCLC70149251\nCore Python Programming is a textbook on the Python programming language, written by Wesley J. Chun. The first edition of the book was released on December 14, 2000.[1] The second edition was released several years later on September 18, 2006.[2] Core Python Programming is mainly targeted at higher education students and IT professionals.[3]\nWith each printing, the book is updated and errors are corrected. The official site has updates and errata for those with the older printings as well as changes since the last printing.[4] As of February 2011, this edition was in its fifth printing.\nThe book has been translated into French, Chinese (simplified) and Hindi.[3]\n\n\nContent[edit]\nCore Python Programming is divided into two parts with a total of 23 chapters, as well as an index.\n\nPart I[edit]\nThe first part of Core Python Programming, Core Python, deals with the basic aspects of the Python programming language. Chapters One and Two, named What is Python? and Getting Started respectively, give instructions on how to install and configure Python, as well as detailing the basic operators and simple statements. Part One continues to cover Sequences (Lists, Strings and Tuples), Built-in Functions and creating functions, Loops (for-loop, while loop and if-statement being the most common); Modules, a full explanation on what Object Oriented Programming is; and syntax.\n\nPart II[edit]\nPart Two, Advanced Topics, contains information about the more complex aspects of Python, such as GUI programming. Other topics covered include regular expressions, network programming, multithreaded programming, web programming and database programming.[5]\n\nReferences[edit]\n\n\n^ "Pearson Education First Edition". Retrieved 2009-09-22.\n\n^ "Pearson Education Second Edition". Retrieved 2009-09-22.\n\n^ a b "Core Python Programming\'s official site". Retrieved 2010-12-17.\n\n^ Errata/Corrigenda\n\n^ Wesley J. Chun (2006-09-18). Core Python Programming Second Edition. ISBN 0-13-226993-7.\n\n\nExternal links[edit]\n\n\n\nWikibooks has a book on the topic of: Python Programming\n\n\n\n\nWikiversity has learning resources about Python\n\nPearson Education\nCore Python Programming Official Site\n\n\n\n',
  'Not to be confused with CPython.\n\n\nProgramming language\nCythonDeveloperRobert Bradshaw, Stefan Behnel, et al.First appeared28 July 2007; 16 years ago (2007-07-28)[1]Stable release3.0.10[2]  (30 March 2024; 56 days ago (30 March 2024)) [±]Preview release3.0.0 beta 2 (27 March 2023; 13 months ago (2023-03-27)[3]) [±]\nImplementation languagePythonOSWindows, macOS, LinuxLicenseApache License 2.0Filename extensions.pyx, .pxd, .pxi [4]Websitecython.org Influenced byC, Python\nCython (/ˈsaɪθɒn/) is a superset of the programming language Python, which allows developers to write Python code (with optional, C-inspired syntax extensions) that yields performance comparable to that of C.[5][6]\nCython is a compiled language that is typically used to generate CPython extension modules. Annotated Python-like code is compiled to C and then automatically wrapped in interface code, producing extension modules that can be loaded and used by regular Python code using the import statement, but with significantly less computational overhead at run time. Cython also facilitates wrapping independent C or C++ code into python-importable modules.\nCython is written in Python and C and works on Windows, macOS, and Linux, producing C source files compatible with CPython 2.6, 2.7, and 3.3 and later versions. The Cython source code that Cython compiles (to C) can use both Python 2 and Python 3 syntax, defaulting to Python 2 syntax in Cython 0.x (and Python 3 syntax in Cython 3.x). The default can be overridden (e.g. in source code comment) to Python 3 (or 2) syntax. Since Python 3 syntax has changed in recent versions, Cython may not be up to date with latest addition. Cython has "native support for most of the C++ language" and "compiles almost all existing Python code".[7]\nCython 3.0.0 was released on 17 July 2023.[8]\n\n\nDesign[edit]\nCython works by producing a standard Python module. However, the behavior differs from standard Python in that the module code, originally written in Python, is translated into C. While the resulting code is fast, it makes many calls into the CPython interpreter and CPython standard libraries to perform actual work. Choosing this arrangement saved considerably on Cython\'s development time, but modules have a dependency on the Python interpreter and standard library.\nAlthough most of the code is C-based, a small stub loader written in interpreted Python is usually required (unless the goal is to create a loader written entirely in C, which may involve work with the undocumented internals of CPython). However, this is not a major problem due to the presence of the Python interpreter.[9]\nCython has a foreign function interface for invoking C/C++ routines and the ability to declare the static type of subroutine parameters and results, local variables, and class attributes.\nA Cython program that implements the same algorithm as a corresponding Python program may consume fewer computing resources such as core memory and processing cycles due to differences between the CPython and Cython execution models. A basic Python program is loaded and executed by the CPython virtual machine, so both the runtime and the program itself consume computing resources. A Cython program is compiled to C code, which is further compiled to machine code, so the virtual machine is used only briefly when the program is loaded.[10][11][12][13]\nCython employs:\n\nOptimistic optimizations\nType inference (optional)\nLow overhead in control structures\nLow function call overhead[14][15]\nPerformance depends both on what C code is generated by Cython and how that code is compiled by the C compiler.[16]\n\nHistory[edit]\nCython is a derivative of the Pyrex language, but it supports more features and optimizations than Pyrex.[17][18] Cython was forked from Pyrex in 2007 by developers of the Sage computer algebra package, because they were unhappy with Pyrex\'s limitations and could not get patches accepted by Pyrex\'s maintainer Greg Ewing, who envisioned a much smaller scope for his tool than the Sage developers had in mind. They then forked Pyrex as SageX. When they found people were downloading Sage just to get SageX, and developers of other packages (including Stefan Behnel, who maintains the XML library LXML) were also maintaining forks of Pyrex, SageX was split off the Sage project and merged with cython-lxml to become Cython.[19]\nCython files have a .pyx extension. At its most basic, Cython code looks exactly like Python code. However, whereas standard Python is dynamically typed, in Cython, types can optionally be provided, allowing for improved performance, allowing loops to be converted into C loops where possible. For example:\n\n# The argument will be converted to int or raise a TypeError.\ndef primes(int kmax): \n\n    # These variables are declared with C types.\n    cdef int n, k, i \n\n    # Another C type \n    cdef int p[1000]\n \n    # A Python type\n    result = [] \n\n    if kmax > 1000:\n        kmax = 1000\n\n    k = 0\n    n = 2\n\n    while k < kmax:\n        i = 0\n\n        while i < k and n % p[i] != 0:\n            i = i + 1\n\n        if i == k:\n            p[k] = n\n            k = k + 1\n            result.append(n)\n\n        n = n + 1\n\n    return result\n\nExample[edit]\nHello World in Cython\nA sample hello world program for Cython is more complex than in most languages because it interfaces with the Python C API and setuptools or other PEP517-compliant extension building facilities.[jargon] At least three files are required for a basic project:\n\nA setup.py file to invoke the setuptools build process that generates the extension module\nA main python program to load the extension module\nCython source file(s)\nThe following code listings demonstrate the build and launch process:\n\n# hello.pyx - Python module, this code will be translated to C by Cython.\ndef say_hello():\n    print("Hello World!")\n\n# launch.py - Python stub loader, loads the module that was made by Cython.\n\n# This code is always interpreted, like normal Python.\n# It is not compiled to C.\n\nimport hello\nhello.say_hello()\n\n# setup.py - unnecessary if not redistributing the code, see below\nfrom setuptools import setup\nfrom Cython.Build import cythonize\n\nsetup(name = "Hello world app",\n      ext_modules = cythonize("*.pyx"))\n\nThese commands build and launch the program:\n\n$ python setup.py build_ext --inplace\n$ python launch.py\n\nUsing in IPython/Jupyter notebook[edit]\nA more straightforward way to start with Cython is through command-line IPython (or through in-browser python console called Jupyter notebook):\n\nIn [1]: %load_ext Cython\n\nIn [2]: %%cython\n   ...: def f(n):\n   ...:     a = 0\n   ...:     for i in range(n):\n   ...:         a += i\n   ...:     return a\n   ...: \n   ...: cpdef g(int n):\n   ...:     cdef long a = 0\n   ...:     cdef int i\n   ...:     for i in range(n):\n   ...:         a += i\n   ...:     return a\n   ...: \n\nIn [3]: %timeit f(1000000)\n10 loops, best of 3: 26.5 ms per loop\n\nIn [4]: %timeit g(1000000)\n1000 loops, best of 3: 279 µs per loop\n\nwhich gives a 95 times improvement over the pure-python version. More details on the subject in the official quickstart page.[20]\n\nUses[edit]\nCython is particularly popular among scientific users of Python,[12][21][22] where it has "the perfect audience" according to Python creator Guido van Rossum.[23] Of particular note:\n\nThe free software SageMath computer algebra system depends on Cython, both for performance and to interface with other libraries.[24]\nSignificant parts of the scientific computing libraries SciPy, pandas and scikit-learn are written in Cython.[25][26]\nSome high-traffic websites such as Quora use Cython.[better source needed][27]\nCython\'s domain is not limited to just numerical computing. For example, the lxml XML toolkit is written mostly in Cython, and like its predecessor Pyrex, Cython is used to provide Python bindings for many C and C++ libraries such as the messaging library ZeroMQ.[28] Cython can also be used to develop parallel programs for multi-core processor machines; this feature makes use of the OpenMP library.\n\nSee also[edit]\nPyPy\nNumba\nReferences[edit]\n\n\n^ Behnel, Stefan (2008). "The Cython Compiler for C-Extensions in Python". EuroPython (28 July 2007: official Cython launch). Vilnius/Lietuva.\n\n^ "Release 3.0.10". 30 March 2024. Retrieved 22 April 2024.\n\n^ Cython Changelog, cython, 15 May 2023, retrieved 19 May 2023\n\n^ "Language Basics — Cython 3.0.0a9 documentation". cython.readthedocs.io. Retrieved 9 September 2021.\n\n^ "Cython - an overview — Cython 0.19.1 documentation". Docs.cython.org. Retrieved 21 July 2013.\n\n^ Smith, Kurt (2015). Cython: A Guide for Python Programmers. O\'Reilly Media. ISBN 978-1-4919-0155-7.\n\n^ "FAQ · cython/cython Wiki". GitHub. Retrieved 11 January 2023.\n\n^ "Cython Changelog". cython.org. Retrieved 21 July 2023.\n\n^ "Basic Tutorial — Cython 3.0a6 documentation". cython.readthedocs.io. Retrieved 11 December 2020.\n\n^ Oliphant, Travis (20 June 2011). "Technical Discovery: Speeding up Python (NumPy, Cython, and Weave)". Technicaldiscovery.blogspot.com. Retrieved 21 July 2013.\n\n^ Behnel, Stefan; Bradshaw, Robert; Citro, Craig; Dalcin, Lisandro; Seljebotn, Dag Sverre; Smith, Kurt (2011). "Cython: The Best of Both Worlds". Computing in Science and Engineering. 13 (2): 31–39. Bibcode:2011CSE....13b..31B. doi:10.1109/MCSE.2010.118. hdl:11336/13103. S2CID 14292107.\n\n^ a b Seljebot, Dag Sverre (2009). "Fast numerical computations with Cython". Proceedings of the 8th Python in Science Conference (SciPy 2009): 15–22.\n\n^ Wilbers, I.; Langtangen, H. P.; Ødegård, Å. (2009). Skallerud, B.; Andersson, H. I. (eds.). "Using Cython to Speed up Numerical Python Programs". Proceedings of MekIT\'09: 495–512. Archived from the original (PDF) on 4 January 2017. Retrieved 14 June 2011.\n\n^ "wrapper benchmarks for several Python wrapper generators (except Cython)". Archived from the original on 4 April 2015. Retrieved 28 May 2010.\n\n^ "wrapper benchmarks for Cython, Boost.Python and PyBindGen". Archived from the original on 3 March 2016. Retrieved 28 May 2010.\n\n^ "Cython: C-Extensions for Python". Retrieved 22 November 2015.\n\n^ "Differences between Cython and Pyrex". GitHub.\n\n^ Ewing, Greg (21 March 2011). "Re: VM and Language summit info for those not at Pycon (and those that are!)" (Message to the electronic mailing-list python-dev). Retrieved 5 May 2011.\n\n^ Says Sage and Cython developer Robert Bradshaw at the Sage Days 29 conference (22 March 2011). "Cython: Past, Present and Future". Archived from the original on 21 December 2021. Retrieved 5 May 2011 – via YouTube.{{cite web}}:  CS1 maint: numeric names: authors list (link)\n\n^ "Building Cython code". cython.readthedocs.io. Retrieved 24 April 2017.\n\n^ "inSCIght: The Scientific Computing Podcast" (Episode 6). Archived from the original on 10 October 2014. Retrieved 29 May 2011.\n\n^ Millman, Jarrod; Aivazis, Michael (2011). "Python for Scientists and Engineers". Computing in Science and Engineering. 13 (2): 9–12. Bibcode:2011CSE....13b...9M. doi:10.1109/MCSE.2011.36.\n\n^ Guido Van Rossum (21 March 2011). "Re: VM and Language summit info for those not at Pycon (and those that are!)" (Message to the electronic mailing-list python-dev). Retrieved 5 May 2011.\n\n^ Erocal, Burcin; Stein, William (2010). "The Sage Project: Unifying Free Mathematical Software to Create a Viable Alternative to Magma, Maple, Mathematica and MATLAB". Mathematical Software – ICMS 2010 (PDF). Lecture Notes in Computer Science. Vol. 6327. Springer Berlin / Heidelberg. pp. 12–27. CiteSeerX 10.1.1.172.624. doi:10.1007/978-3-642-15582-6_4. ISBN 978-3-642-15581-9. {{cite book}}: |journal= ignored (help)\n\n^ "SciPy 0.7.2 release notes". Archived from the original on 4 March 2016. Retrieved 29 May 2011.\n\n^ Pedregosa, Fabian; Varoquaux, Gaël; Gramfort, Alexandre; Michel, Vincent; Thirion, Bertrand; Grisel, Olivier; Blondel, Mathieu; Prettenhofer, Peter; Weiss, Ron; Dubourg, Vincent; Vanderplas, Jake; Passos, Alexandre; Cournapeau, David (2011). "Scikit-learn: Machine Learning in Python". Journal of Machine Learning Research. 12: 2825–2830. arXiv:1201.0490.\n\n^ "Is Quora still running on PyPy?".\n\n^ "ØMQ: Python binding".\n\n\nExternal links[edit]\nOfficial website \nCython on GitHub\nvtePythonImplementations\nCircuitPython\nCLPython\nCPython\nCython\nMicroPython\nNumba\nIronPython\nJython\nPsyco\nPyPy\nPython for S60\nShed Skin\nStackless Python\nUnladen Swallow\nmore...\nIDE\nEric Python IDE\nIDLE\nNinja-IDE\nPyCharm\nPyDev\nSpyder\nmore...\nTopics\nWSGI\nASGI\n\nsoftware (list)\nPython Software Foundation\nPyCon\n\n\n\n\n',
  'American computer programmer\nFor the radio presenter, see Mark Pilgrim (presenter).\nMark PilgrimBorn (1972-11-24) November 24, 1972 (age 51)CitizenshipUnited StatesAlma materCornell UniversityOccupation(s)software developer, Technical writerEmployerBrave Software, Inc.[1]Notable workDive into * seriesWebsitediveintomark.org (archived)\nMark Pilgrim is a software developer, writer, and advocate of free software.  He authored a popular blog, and has written several books, including Dive into Python, a guide to the Python programming language published under the GNU Free Documentation License. Formerly an accessibility architect in the IBM Emerging Technologies Group,[2] he started working at Google in March 2007.[3] In 2018, he moved to Brave.[4][failed verification]\n\n\nEarly life[edit]\nIn 1992, while a sophomore at Cornell University and a part-time employee of Cornell Information Technologies (CIT), Pilgrim and another student, David Blumenthal, embedded a computer virus, MBDF, into three games.[5] In February of the same year, Pilgrim, Blumenthal, Randall Johnson, and Eric Sooros uploaded the games from Cornell\'s Upson Hall computer lab to a public server at Stanford University. The four used false mainframe accounts created by Blumenthal, then also a CIT employee [6] The virus caused disruption to Macintosh computers internationally.[7]\nThe origin of the virus was first identified by Claris employees in Wales on February 14, and was traced to Stanford, and then further to one of Cornell\'s mainframes. Cornell\'s access logs showed the uploads were made from several computers in the lab while Pilgrim was working there.[8] Sooros was granted immunity from prosecution in return for his grand jury testimony against Pilgrim, Johnson, and Blumenthal.[9] Pilgrim and Blumenthal were arrested and initially charged with computer tampering in the second degree, a Class A misdemeanor. The FBI investigated to determine if federal charges were warranted, though no additional charges were filed.[10]  After facing disciplinary hearings, none of the four implicated continued as Cornell students.[9]\nIn September 1992, Pilgrim and Blumenthal pled guilty and were later sentenced to 520 hours of community service, forfeiture of seized computer equipment, and payment of nearly $2,500 in restitution to Cornell and other affected parties. Johnson pled guilty to a lesser charge and was sentenced to 450 hours of community service.[11]\n\nBooks and articles[edit]\nDive into Python[edit]\nPilgrim\'s book Dive into Python is a teach-by-example guide to the paradigms of programming in Python and modern software development techniques. It assumes some preexisting knowledge of programming, although not necessarily in Python. The first edition was published in 2004 (ISBN 1-59059-356-1), and a 2009 second edition (ISBN 9781430224150) covers Python 3. Both are available online as well as in print.[12][13]\nMuch of the book consists of example programs with annotations and explanatory text, and it generally describes how to modify an example to serve new purposes. One early example program reads through a directory of MP3 files and lists the header information, such as artist, album, etc. Other topics covered include object oriented programming, documentation, unit testing, and accessing and parsing HTML and XML.\n\nOther works[edit]\nPilgrim, Mark (2005). Greasemonkey Hacks: Tips & Tools for Remixing the Web with Firefox. O\'Reilly. ISBN 978-0596101657.\nDive into Accessibility, a free book on web accessibility, for web designers\nDive into Greasemonkey, a free book on Greasemonkey.[14]\nDive into HTML 5, a free book on HTML5\nPilgrim, Mark (2010). HTML5: Up and Running. O\'Reilly. ISBN 978-0596806026.\nPilgrim has also written a monthly column Dive into XML for O\'Reilly\'s XML.com.\n\nOpen source work[edit]\nPilgrim contributed to a number of open source works including\n\nFeed Validator\nUniversal Feed Parser\nGoogle Doctype\nPilgrim was a vocal critic of Creative Commons licensing, which he believed needlessly cluttered the licensing environment of open source software.[15][failed verification]\n\n"Disappearance" from the Internet[edit]\nFrom 4 October 2011, Mark Pilgrim\'s various websites (diveintomark.org, Dive into HTML5, Dive into Accessibility, Dive into Greasemonkey, Dive into Python, etc.) returned HTTP status 410 Gone.[16] He also deleted his Twitter, Reddit, Google+ and GitHub accounts.[17][18] On 5 October 2011 Jason Scott tweeted that Pilgrim himself was "alive/annoyed we called the police".[19] Commenting on the event, a writer for The Economist wrote that the concern showed for Pilgrim\'s well-being demonstrated that "the internet, often mocked as impersonal and uncaring, can be quite the reverse."[16]\nBoth Pilgrim\'s actions in October 2011 and why the lucky stiff\'s similar disappearance in August 2009 have been described as "infosuicide".[20][21]\nThe incident was reminiscent of Pilgrim\'s 2004 hiatus from blogging, which lasted approximately 18 months. In 2004, rather than deleting his content, he posted a short entry entitled "Every Exit" in which he said, "It’s time for me to find a new hobby. Preferably one that doesn’t involve angle brackets. Or computers. Or electricity."[22]\n\nReferences[edit]\n\n\n^ "Pilgrim-brave - Overview". GitHub.\n\n^ "IBM developerworks: Making emerging technologies accessible". Retrieved 2007-03-22.\n\n^ "Two visions: Blog post at Mark\'s official site". 2007-03-19. Archived from the original on July 18, 2011. Retrieved 2007-03-22.\n\n^ "Learn About Brave and Our Team". 2018-11-23. Retrieved 2018-11-23.\n\n^ Ray, John; Ray, William (2003). Mac OS X Maximum Security. Sams Publishing.\n\n^ Vigoda, Ralph (1992-02-27). "2 Charged In Computer Virus Case". The Philadelphia Inquirer.\n\n^ Edgar, Stacey (2003). Morality and Machines: Perspectives on Computer Ethics. Jones & Bartlett Learning. p. 227. ISBN 9780763717674. Retrieved 2013-01-28.\n\n^ "Accused Students Worked for Cornell". The New York Times. 1992-02-26.\n\n^ a b Carmona, Jeff (1993-02-01). "Virus Students Admit They Made Mistakes". The Cornell Daily Sun.\n\n^ "Cornell Computer Hackers Out On Bail". United Press International. 1992-02-26. Retrieved 2022-02-16.\n\n^ "Cornell Computer Hackers, Accomplice Sentenced". United Press International. 1992-10-05. Retrieved 2022-02-16.\n\n^ Mark Pilgrim (2000–2004). "Dive into Python: Python from novice to pro". Archived from the original on 19 September 2012. Retrieved 1 October 2011.\n\n^ Mark Pilgrim (2001–2009). "Dive into Python 3". Retrieved 19 August 2023.\n\n^ Trapani, Gina (2005-05-13). "Dive into Greasemonkey". Lifehacker. Retrieved 22 February 2021.\n\n^ Paul, Ryan (February 27, 2009). "Want to waive copyright? Creative Commons has a tool for you". Ars Technica. Retrieved July 13, 2017.\n\n^ a b G.F. (October 10, 2011). "Status Code 410: Gone". The Economist. Retrieved July 13, 2017.\n\n^ Searching For Mark Pilgrim, Eric Meyer\n\n^ Hacker News.\n\n^ "Mark Pilgrim is alive/annoyed we called the police. Please stand down and give the man privacy and space, and thanks everyone for caring." [1]\n\n^ [2], Christopher T. Miller\n\n^ 410 Gone – Thoughts on Mark "diveintomark" Pilgrim\'s and _why\'s infosuicides, Scott Hanselman\n\n^ Every Exit, Mark Pilgrim (archive.org)\n\n\nExternal links[edit]\n\n\n\nWikiquote has quotations related to Mark Pilgrim.\n\n"Dive into Mark – Personal site". Archived from the original on 2011-07-18. Retrieved 2011-09-30.\n"Mark Pilgrim < Case Studies". Creative Commons wiki. Creative Commons. 23 May 2012. Retrieved 22 February 2021.\nMark Pilgrim (October 21, 2009). Dive into Python 3. ISBN 978-1-4302-2415-0. Retrieved 2013-10-07.\nDive into Python - The complete text can be downloaded in a variety of formats\nDive into HTML5 - The full copy of Mark\'s online book\nMike Orr (January 5, 2005). "Dive into Python by Mark Pilgrim". Linux Journal. Retrieved 2010-01-06.\nAuthority control databases International\nISNI\nVIAF\nNational\nNorway\nGermany\nIsrael\nUnited States\nJapan\nCzech Republic\nKorea\nOther\nIdRef\n\n\n\n\n',
  'International non-profit organization\n\n\nDjango GirlsTypenot-for-profitKey people\nOla Sitarska\nOla Sendecka\nWebsitedjangogirls.org\nDjango Girls is an international non-profit organization started by two Polish women, Ola Sitarska and Ola Sendecka,[1] to inspire women from all backgrounds[2] to get interested in technology and to become programmers,[3] offering a safe and friendly environment.[4][5] It is known for the free workshops it hosts to help women to learn to program[6] and for its Django tutorial.[7] It is often supported by the Python Software Foundation,[8] and they often hold sessions at the Python Conference.[9]\n\n\nHistory[edit]\nThe first Django Girls workshop, which kicked off Django Girls, happened during EuroPython 2014, in Berlin.[10]  Ola Sitarska and Ola Sendecka decided to use Django and Python because both are open source code platforms, which may help women developing their own ideas.[11] Since then, the initiative has spread worldwide,[12] reaching countries like Argentina,[13][14] Australia,[15] Bolivia,[16] Brazil,[17] Colombia,[18] Ecuador,[19][20][21] Ghana,[22] Nigeria,[23][24] United Kingdom,[4] Peru,[25][26] United States,[27][2] Zimbabwe[28][29] and many others.\n\nTutorial[edit]\nThe tutorial, which teaches how to create and deploy a blog application using Django, is maintained and updated by the Django Girls community, using  Github. As of May 2018, the Django Girls tutorial has been published online in 14 languages[30] besides its original English version. As of May 2018, more than 1,000,000 users have visited its website.[31]\n\nDjango Girls workshops[edit]\nUsing a manual provided by the organization,[4][11] Django Girls volunteers offer free[32] one[33] or two days workshops in many cities of the world, usually held during weekends.[2] It is aimed at complete beginners, teaching about HTML, CSS, Python and Django.[34] As of May 2018, 414 cities across 90 countries[35] have hosted Django Girls workshops, with Accra,[22] Athens,[36] Florence,[37] Kathmandu,[38] Lagos,[39] Lahore,[40] Oxford,[41] and São José dos Campos[42] among them. As of May 2018, over 14,000 women have attended Django Girls workshops held across the globe.[citation needed]\n\nReferences[edit]\n\n\n^ Proudfoot, Jenny (8 March 2016). "16 Women Doing Amazing Things in 2016". Marie Claire. Retrieved 9 July 2017.\n\n^ a b c "Falling in love with programming: Django Girls inspires women to join the tech world". Rapid Growth. Retrieved 9 July 2017.\n\n^ Dillon, Karen. "Lawrence-born Django, which revolutionized website construction, celebrating its 10th anniversary". Lawrence Journal-world. Retrieved 17 June 2017.\n\n^ a b c "Django Girls is coming to Cardiff to help women get into coding -TechSPARK.co". techspark.co. 12 July 2016. Retrieved 9 July 2017.\n\n^ "V&A · Django Girls – Tech activists". Victoria and Albert Museum. Retrieved 9 July 2017.\n\n^ "Django Girls teaches women to program [sic]". One News Page. Retrieved 9 July 2017.\n\n^ Chilabert, Hernán. "Django Tutorials and Courses". hackr.io. Retrieved 17 June 2017.\n\n^ Sushinsky, Mary Ann (15 April 2015). "PSF supports more Django Girls!". Python Software Foundation News. Retrieved 17 June 2017.\n\n^ "Django Girls invite would-be coders to PyCon this October". 12 September 2017.\n\n^ "Our next keynote: Ola & Ola (Django Girls)". EuroPython Blog. 25 April 2015. Retrieved 17 June 2017.\n\n^ a b "Django Girls make the male-dominated world of IT more accessible to women, By Matthaios Tsimitakis | Kathimerini". Retrieved 9 July 2017.\n\n^ "Lawrence-born Django, which revolutionized website construction, celebrating its 10th anniversary". LJWorld.com. Retrieved 9 July 2017.\n\n^ Panorama, Diario. "Invitan al taller "Django Girls" en Santiago del Estero - Diario Panorama". www.diariopanorama.com. Retrieved 17 July 2017.\n\n^ "Taller Django Girls en PyCon Argentina 2015 - Mendoza". www.frm.utn.edu.ar (in European Spanish). Retrieved 17 July 2017.[permanent dead link]\n\n^ "European coding workshop Django Girls comes to Brisbane to teach women tech skills - Startup Daily". Startup Daily. 4 July 2016. Archived from the original on 19 October 2021. Retrieved 9 July 2017.\n\n^ "Taller Django Girls: Mujeres podrán aprender a programar gratis". Bolivia Emprende (in European Spanish). 21 August 2015. Retrieved 17 July 2017.\n\n^ "Django Girls realiza workshop gratuito de programação no Brasil - IDG Now!". IDG Now! (in Brazilian Portuguese). 15 February 2016. Retrieved 9 July 2017.\n\n^ "Programación web para mujeres en Barranquilla". El Heraldo (in Spanish). 28 May 2017. Retrieved 10 July 2017.\n\n^ "Mujeres se capacitan en programación". Diario El Mercurio - Cuenca Ecuador (in European Spanish). 1 May 2016. Retrieved 17 July 2017.\n\n^ "Taller gratuito de programación para mujeres en Guayaquil". Vistazo. 22 June 2016. Retrieved 17 July 2017.\n\n^ "Mujeres reciben un taller sobre programación". El Tiempo (in Spanish). 26 March 2017. Retrieved 17 July 2017.\n\n^ a b Kuuire, Joseph-Albert (19 June 2017). "Event: Django Girls Workshop At iSpace Foundation". Tech Nova. Retrieved 9 July 2017.\n\n^ "Django Girls will teach Nigerian women how to code for free". Techpoint.ng. 20 January 2016. Retrieved 9 July 2017.\n\n^ "Django Girls\' free programming workshop to hold in Ota this August". Techpoint.ng. 8 July 2016. Retrieved 9 July 2017.\n\n^ "Jóvenes recorren Sudamérica promoviendo tecnológica". RPP Noticias (in Spanish). Retrieved 17 July 2017.\n\n^ "Taller gratuito de programación para mujeres con Django Girls – Pymex". pymex.pe (in European Spanish). Retrieved 17 July 2017.\n\n^ "Django Girls teaches women to program". Yahoo News. 25 April 2017. Retrieved 9 July 2017.\n\n^ Mazingaizo, Sharon (7 March 2016). "Django Girls brings coding skills to Harare". Harare News. Archived from the original on 27 January 2021. Retrieved 9 July 2017.\n\n^ "Django Girls Harare to host 2nd workshop this November - Kaguvi Digital". Kaguvi Digital. 9 November 2016. Archived from the original on 15 August 2017. Retrieved 9 July 2017.\n\n^ DjangoGirls. "Choose a language · Django Girls Tutorial". tutorial.DjangoGirls.org. Retrieved 9 July 2017.\n\n^ Newill, Cody. "Django Celebrates 10 Years Of Web Development In Lawrence". Retrieved 9 July 2017.\n\n^ "Coding and women: Where to learn to code for free?". PopArt Studio. 16 November 2015. Retrieved 9 July 2017.\n\n^ "Perth Web Girls: Blurring Boundaries and Beating the Gender Bias". Spacecubed. Retrieved 9 July 2017.\n\n^ Tysnicka, Agata. "Django Girls: How 10Clouds Helps Get More Women into IT". 10Clouds. Retrieved 17 June 2017.\n\n^ Gorey, Colm (18 March 2016). "First Irish Django Girls coding event taking place this April". Silicon Republic. Retrieved 9 July 2017.\n\n^ "Greek Girls Pave the Technology Path". WindyCity Greek. 4 November 2015. Archived from the original on 3 July 2018. Retrieved 9 July 2017.\n\n^ Corvino, Nadia. "Django Girls a Firenze: workshop di programmazione per donne e ragazze". Soft Revolutionzine. Retrieved 17 June 2017.\n\n^ "Django Girls Workshop #3 Successfully Organized in Kathmandu | TechLekh". TechLekh. 10 October 2016. Retrieved 9 July 2017.\n\n^ Adeleke, David (18 January 2016). "Django Girls is coming to Lagos. Ready your laptops ladies". Techcabal. Retrieved 17 June 2017.\n\n^ "Django Girls workshop to be held in Lahore; apply before 20th May - More News". More News. 12 May 2016. Retrieved 9 July 2017.\n\n^ Keown, Callum. "Coding event gets more Oxford women into computer programming". Oxford Mail. Retrieved 17 June 2017.\n\n^ Kyoshy, Felipe. "Workshop promove inserção das mulheres na área de tecnologia". Meon. Archived from the original on 16 May 2018. Retrieved 17 June 2017.\n\n\nExternal links[edit]\nOfficial website\n\n\n\n',
  'Special string literal used in source code to provide documentation\nIn programming, a docstring is a string literal specified in source code that is used, like a comment, to document a specific segment of code. Unlike conventional source code comments, or even specifically formatted comments like docblocks, docstrings are not stripped from the source tree when it is parsed and are retained throughout the runtime of the program. This allows the programmer to inspect these comments at run time, for instance as an interactive help system, or as metadata.\nLanguages that support docstrings include Python, Lisp, Elixir, Clojure,[1] Gherkin,[2] Julia[3] and Haskell.[4]\n\n\nImplementation examples[edit]\nElixir[edit]\nDocumentation is supported at language level, in the form of docstrings. Markdown is Elixir\'s de facto markup language of choice for use in docstrings:\n\ndef module MyModule do\n  @moduledoc """\n  Documentation for my module. With **formatting**.\n  """\n\n  @doc "Hello"\n  def world do\n    "World"\n  end\nend\n\nLisp[edit]\nIn Lisp, docstrings are known as documentation strings. The Common Lisp standard states that a particular implementation may choose to discard docstrings whenever they want, for whatever reason. When they are kept, docstrings may be viewed and changed using the DOCUMENTATION function.[5] For instance:\n\n (defun foo () "hi there" nil)\n (documentation #\'foo \'function) => "hi there"\n\nPython[edit]\nThe common practice of documenting a code object at the head of its definition is captured by the addition of docstring syntax in the Python language.\nThe docstring for a Python code object (a module, class, or function) is the first statement of that code object, immediately following the definition (the \'def\' or \'class\' statement). The statement must be a bare string literal, not any other kind of expression. The docstring for the code object is available on that code object\'s __doc__ attribute and through the help function.\nThe following Python file shows the declaration of docstrings within a Python source file:\n\n"""The module\'s docstring"""\n\nclass MyClass:\n    """The class\'s docstring"""\n\n    def my_method(self):\n        """The method\'s docstring"""\n\ndef my_function():\n    """The function\'s docstring"""\n\nAssuming that the above code was saved as mymodule.py, the following is an interactive session showing how the docstrings may be accessed:\n\n>>> import mymodule\n>>> help(mymodule)\nThe module\'s docstring\n>>> help(mymodule.MyClass)\nThe class\'s docstring\n>>> help(mymodule.MyClass.my_method)\nThe method\'s docstring\n>>> help(mymodule.my_function)\nThe function\'s docstring\n>>>\n\nTools using docstrings[edit]\ncobra -doc (Cobra)\ndoctest (Python)\nEpydoc (Python)\nPydoc (Python)\nSphinx (Python)\nSee also[edit]\nLiterate programming – alternative code commenting paradigm\nPlain Old Documentation – Perl documentation\nReferences[edit]\n\n\n^ "Function definition with docstring in Clojure". Archived from the original on 2013-01-29. Retrieved 2017-09-20.\n\n^ "Step Arguments - Doc Strings". Archived from the original on 2016-01-31. Retrieved 2016-06-22.\n\n^ "Documentation — Julia Language 0.4.1 documentation". docs.julialang.org. Archived from the original on 2015-11-17. \n\n^ "Docstrings".\n\n^ CLHS: Standard Generic Function DOCUMENTATION...\n\n\nExternal links[edit]\nPython Docstrings at Epydoc\'s SourceForge page\nDocumentation in GNU Emacs Lisp\nSection from the doxygen documentation about Python docstrings\n\n\n\n',
  'Mechanism that ensures threads are not executed in parallel\nSchematic representation of how threads work under GIL. Green - thread holding GIL, red - blocked threads\nA global interpreter lock (GIL) is a mechanism used in computer-language interpreters to synchronize the execution of threads so that only one native thread (per process) can execute basic operations (such as memory allocation and reference counting) at a time.[1] As a general rule, an interpreter that uses GIL will see only one thread to execute at a time, even if runs on a multi-core processor, although some implementations provide for CPU intensive code to release the GIL, allowing multiple threads to use multiple cores. Some popular interpreters that have GIL are CPython and Ruby MRI.\n\n\nTechnical background concepts[edit]\nA global interpreter lock (GIL) is a mutual-exclusion lock held by a programming language interpreter thread to avoid sharing code that is not thread-safe with other threads. In implementations with a GIL, there is always one GIL for each interpreter process.\nApplications running on implementations with a GIL can be designed to use separate processes to achieve full parallelism, as each process has its own interpreter and in turn has its own GIL. Otherwise, the GIL can be a significant barrier to parallelism.\n\nAdvantages[edit]\nReasons for employing a global interpreter lock include:\n\nincreased speed of single-threaded programs (no necessity to acquire or release locks on all data structures separately),\neasy integration of C libraries that usually are not thread-safe,\nease of implementation (having a single GIL is much simpler to implement than a lock-free interpreter or one using fine-grained locks).\nA way to get around a GIL is creating a separate interpreter per thread, which is too expensive with most languages[citation needed].\n\nDrawbacks[edit]\nUse of a global interpreter lock in a language effectively limits the amount of parallelism reachable through concurrency of a single interpreter process with multiple threads. If the process is almost purely made up of interpreted code and does not make calls outside of the interpreter which block for long periods of time (allowing the GIL to be released by that thread while they process), there is likely to be very little increase in speed when running the process on a multiprocessor machine.  Due to signaling with a CPU-bound thread, it can cause a significant slowdown, even on single processors.[2]  More seriously, when the single native thread calls a blocking OS process (such as disk access), the entire process is blocked, even though other application threads may be waiting.\n\nExamples[edit]\nSome language implementations that implement a global interpreter lock are CPython, the most widely-used implementation of Python,[3][4] and Ruby MRI, the reference implementation of Ruby (where it is called Global VM Lock).\nJVM-based equivalents of these languages (Jython and JRuby) do not use global interpreter locks. IronPython and IronRuby are implemented on top of Microsoft\'s Dynamic Language Runtime and also avoid using a GIL.[5]\nAn example of an interpreted language without a GIL is Tcl, which is used in the benchmarking tool HammerDB.[6]\n\nSee also[edit]\nGreen threads\nGiant lock\nReferences[edit]\n\n\n^ "GlobalInterpreterLock". Retrieved 30 November 2015.\n\n^ David Beazley (2009-06-11). "Inside the Python GIL" (PDF). Chicago: Chicago Python User Group. Retrieved 2009-10-07.\n\n^ Shannon -jj Behrens (2008-02-03). "Concurrency and Python". Dr. Dobb\'s Journal. p. 2. Retrieved 2008-07-12. The GIL is a lock that is used to protect all the critical sections in Python. Hence, even if you have multiple CPUs, only one thread may be doing "pythony" things at a time.\n\n^ "Python/C API Reference Manual: Thread State and the Global Interpreter Lock". Archived from the original on 2008-09-14. Retrieved 2014-08-15.\n\n^ "IronPython at python.org". python.org. Retrieved 2011-04-04. IronPython has no GIL and multi-threaded code can use multi core processors.\n\n^ "HammerDB Concepts and Architecture". HammerDB. 2018-11-30. Retrieved 2020-05-10. It is important to understand at the outset that HammerDB is written in TCL because of the unique threading capabilities that TCL brings.\n\n\n\n\n\n',
  'History of the Python programming language\n\n\nThis article is missing information about prominent features of versions after 3.0. Please expand the article to include this information. Further details may exist on the talk page. (March 2024)\nOld Python logo, 1990s–2006\nNew Python logo, 2006–present\nGuido van Rossum in 2014\nMain article: Python (programming language)\nThe programming language Python was conceived in the late 1980s,[1] and its implementation was started in December 1989[2] by Guido van Rossum at CWI in the Netherlands as a successor to ABC capable of exception handling and interfacing with the Amoeba operating system.[3] Van Rossum is Python\'s principal author, and his continuing central role in deciding the direction of Python is reflected in the title given to him by the Python community, Benevolent Dictator for Life (BDFL).[4][5] (However, Van Rossum stepped down as leader on July 12, 2018.[6]). Python was named after the BBC TV show Monty Python\'s Flying Circus.[7]\nPython 2.0 was released on October 16, 2000, with many major new features, including a cycle-detecting garbage collector (in addition to reference counting) for memory management and support for Unicode, along with a change to the development process itself, with a shift to a more transparent and community-backed process.[8]\nPython 3.0, a major, backwards-incompatible release, was released on December 3, 2008[9] after a long period of testing. Many of its major features have also been backported to the backwards-compatible, though now-unsupported, Python 2.6 and 2.7.[10]\n\n\nEarly history[edit]\nIn February 1991, Van Rossum published the code (labeled version 0.9.0) to alt.sources.[11][12] Already present at this stage in development were classes with inheritance, exception handling, functions, and the core datatypes of list, dict, str and so on. Also in this initial release was a module system borrowed from Modula-3; Van Rossum describes the module as "one of Python\'s major programming units".[1] Python\'s exception model also resembles Modula-3\'s, with the addition of an else clause.[3] In 1994 comp.lang.python, the primary discussion forum for Python, was formed, marking a milestone in the growth of Python\'s userbase.[1]\n\nVersion 1[edit]\nPython reached version 1.0 in January 1994. The major new features included in this release were the functional programming tools lambda, map, filter and reduce. Van Rossum stated that "Python acquired lambda, reduce(), filter() and map(), courtesy of a Lisp hacker who missed them and submitted working patches".[13]\nThe last version released while Van Rossum was at CWI was Python 1.2.  In 1995, Van Rossum continued his work on Python at the Corporation for National Research Initiatives (CNRI) in Reston, Virginia from where he released several versions.\nBy version 1.4, Python had acquired several new features. Notable among these are the Modula-3 inspired keyword arguments (which are also similar to Common Lisp\'s keyword arguments) and built-in support for complex numbers. Also included is a basic form of data hiding by name mangling, though this is easily bypassed.[14]\nDuring Van Rossum\'s stay at CNRI, he launched the Computer Programming for Everybody (CP4E) initiative, intending to make programming more accessible to more people, with a basic "literacy" in programming languages, similar to the basic English literacy and mathematics skills required by most employers. Python served a central role in this: because of its focus on clean syntax, it was already suitable, and CP4E\'s goals bore similarities to its predecessor, ABC. The project was funded by DARPA.[15] As of 2007[update], the CP4E project is inactive, and while Python attempts to be easily learnable and not too arcane in its syntax and semantics, outreach to non-programmers is not an active concern.[16]\n\nBeOpen[edit]\nIn 2000, the Python core development team moved to BeOpen.com[17] to form the BeOpen PythonLabs team.[18][19] CNRI requested that a version 1.6 be released, summarizing Python\'s development up to the point at which the development team left CNRI. Consequently, the release schedules for 1.6 and 2.0 had a significant amount of overlap.[8] Python 2.0 was the only release from BeOpen.com. After Python 2.0 was released by BeOpen.com, Guido van Rossum and the other PythonLabs developers joined Digital Creations.\nThe Python 1.6 release included a new CNRI license that was substantially longer than the CWI license that had been used for earlier releases.  The new license included a clause stating that the license was governed by the laws of the State of Virginia.  The Free Software Foundation argued that the choice-of-law clause was incompatible with the GNU General Public License.  BeOpen, CNRI and the FSF negotiated a change to Python\'s free software license that would make it GPL-compatible.  Python 1.6.1 is essentially the same as Python 1.6, with a few minor bug fixes, and with the new GPL-compatible license.[20]\n\nVersion 2[edit]\nPython 2.0, released October 2000,[8] introduced list comprehensions, a feature borrowed from the functional programming languages SETL and Haskell. Python\'s syntax for this construct is very similar to Haskell\'s, apart from Haskell\'s preference for punctuation characters and Python\'s preference for alphabetic keywords. Python 2.0 also introduced a garbage collector capable of collecting reference cycles.[8]\nPython 2.1 was close to Python 1.6.1, as well as Python 2.0. Its license was renamed Python Software Foundation License. All code, documentation and specifications added, from the time of Python 2.1\'s alpha release on, is owned by the Python Software Foundation (PSF), a non-profit organization formed in 2001, modeled after the Apache Software Foundation.[20] The release included a change to the language specification to support nested scopes, like other statically scoped languages.[21] (The feature was turned off by default, and not required, until Python 2.2.)\nPython 2.2 was released in December 2001;[22] a major innovation was the unification of Python\'s types (types written in C) and classes (types written in Python) into one hierarchy. This single unification made Python\'s object model purely and consistently object oriented.[23] Also added were generators which were inspired by Icon.[24]\n\nHistoric Python logos used on Windows (left) and the Macintosh (centre), and the logo used since version 2.5 (right).\nPython 2.5 was released in September 2006 [25] and introduced the with statement, which encloses a code block within a context manager (for example, acquiring a lock before the block of code is run and releasing the lock afterwards, or opening a file and then closing it), allowing resource acquisition is initialization (RAII)-like behavior and replacing a common try/finally idiom.[26]\nPython 2.6 was released to coincide with Python 3.0, and included some features from that release, as well as a "warnings" mode that highlighted the use of features that were removed in Python 3.0.[27][10] Similarly, Python 2.7 coincided with and included features from Python 3.1,[28] which was released on June 26, 2009.\nParallel 2.x and 3.x releases then ceased, and Python 2.7 was the last release in the 2.x series.[29] In November 2014, it was announced that Python 2.7 would be supported until 2020, but users were encouraged to move to Python 3 as soon as possible.[30] Python 2.7 support ended on January 1, 2020, along with code freeze of 2.7 development branch. A final release, 2.7.18, occurred on April 20, 2020, and included fixes for critical bugs and release blockers.[31] This marked the end-of-life of Python 2.[32]\n\nVersion 3[edit]\nPython 3.0 (also called "Python 3000" or "Py3K") was released on December 3, 2008.[9] It was designed to rectify fundamental design flaws in the language – the changes required could not be implemented while retaining full backwards compatibility with the 2.x series, which necessitated a new major version number.  The guiding principle of Python 3 was: "reduce feature duplication by removing old ways of doing things".[33]\nPython 3.0 was developed with the same philosophy as in prior versions.  However, as Python had accumulated new and redundant ways to program the same task, Python 3.0 had an emphasis on removing duplicative constructs and modules, in keeping with the Zen of Python: "There should be one— and preferably only one —obvious way to do it".\nNonetheless, Python 3.0 remained a multi-paradigm language.  Coders could still follow object-oriented, structured, and functional programming paradigms, among others, but within such broad choices, the details were intended to be more obvious in Python 3.0 than they were in Python 2.x.\n\nCompatibility[edit]\nPython 3.0 broke backward compatibility, and much Python 2 code does not run unmodified on Python 3.[34] Python\'s dynamic typing combined with the plans to change the semantics of certain methods of dictionaries, for example, made perfect mechanical translation from Python 2.x to Python 3.0 very difficult. A tool called "2to3" does the parts of translation that can be done automatically.  At this, 2to3 appeared to be fairly successful, though an early review noted that there were aspects of translation that such a tool would never be able to handle.[35] Prior to the roll-out of Python 3, projects requiring compatibility with both the 2.x and 3.x series were recommended to have one source (for the 2.x series), and produce releases for the Python 3.x platform using 2to3. Edits to the Python 3.x code were discouraged for so long as the code needed to run on Python 2.x.[10]  This is no longer recommended; as of 2012 the preferred approach was to create a single code base that can run under both Python 2 and 3 using compatibility modules.[36]\n\nFeatures[edit]\nSome of the major changes included for Python 3.0 were:\n\nChanging print so that it is a built-in function, not a statement.  This made it easier to change a module to use a different print function, as well as making the syntax more regular.  In Python 2.6 and 2.7 print() is available as a builtin but is masked by the print statement syntax, which can be disabled by entering from __future__ import print_function at the top of the file[37]\nRemoval of the Python 2 input function, and the renaming of the raw_input function to input. Python 3\'s input function behaves like Python 2\'s raw_input function, in that the input is always returned as a string rather than being evaluated as an expression\nMoving reduce (but not map or filter) out of the built-in namespace and into functools (the rationale being code that uses reduce is less readable than code that uses a for loop and accumulator variable)[38][39]\nAdding support for optional function annotations that can be used for informal type declarations or other purposes[40]\nUnifying the str/unicode types, representing text, and introducing a separate immutable bytes type; and a mostly corresponding mutable bytearray type, both of which represent arrays of bytes[41]\nRemoving backward-compatibility features, including old-style classes, string exceptions, and implicit relative imports\nA change in integer division functionality: in Python 2, integer division always returns an integer. For example 5 / 2 is 2; whereas in Python 3, 5 / 2 is 2.5. (In both Python 2 – 2.2 onwards – and Python 3, a separate operator exists to provide the old behavior: 5 // 2 is 2)\nSubsequent releases in the Python 3.x series have included additional, substantial new features; all ongoing development of the language is done in the 3.x series.\n\nTable of versions[edit]\nReleases before numbered versions:\n\nImplementation started – December, 1989[2]\nInternal releases at Centrum Wiskunde & Informatica – 1990[2]\n\n\nVersion\n\nLatest micro version\n\nRelease date\n\nEnd of full support\n\nEnd of security fixes\n\n\nOld version, no longer maintained: 0.9\n\n0.9.9[2]\n\n1991-02-20[2]\n\n1993-07-29[a][2]\n\n\nOld version, no longer maintained: 1.0\n\n1.0.4[2]\n\n1994-01-26[2]\n\n1994-02-15[a][2]\n\n\nOld version, no longer maintained: 1.1\n\n1.1.1[2]\n\n1994-10-11[2]\n\n1994-11-10[a][2]\n\n\nOld version, no longer maintained: 1.2\n\n\n\n1995-04-13[2]\n\nUnsupported\n\n\nOld version, no longer maintained: 1.3\n\n\n\n1995-10-13[2]\n\nUnsupported\n\n\nOld version, no longer maintained: 1.4\n\n\n\n1996-10-25[2]\n\nUnsupported\n\n\nOld version, no longer maintained: 1.5\n\n1.5.2[42]\n\n1998-01-03[2]\n\n1999-04-13[a][2]\n\n\nOld version, no longer maintained: 1.6\n\n1.6.1[42]\n\n2000-09-05[43]\n\n2000-09[a][42]\n\n\nOld version, no longer maintained: 2.0\n\n2.0.1[44]\n\n2000-10-16[45]\n\n2001-06-22[a][44]\n\n\nOld version, no longer maintained: 2.1\n\n2.1.3[44]\n\n2001-04-15[46]\n\n2002-04-09[a][44]\n\n\nOld version, no longer maintained: 2.2\n\n2.2.3[44]\n\n2001-12-21[47]\n\n2003-05-30[a][44]\n\n\nOld version, no longer maintained: 2.3\n\n2.3.7[44]\n\n2003-06-29[48]\n\n2008-03-11[a][44]\n\n\nOld version, no longer maintained: 2.4\n\n2.4.6[44]\n\n2004-11-30[49]\n\n2008-12-19[a][44]\n\n\nOld version, no longer maintained: 2.5\n\n2.5.6[44]\n\n2006-09-19[50]\n\n2011-05-26[a][44]\n\n\nOld version, no longer maintained: 2.6\n\n2.6.9[27]\n\n2008-10-01[27]\n\n2010-08-24[b][27]\n\n2013-10-29[27]\n\n\nOld version, no longer maintained: 2.7\n\n2.7.18[32]\n\n2010-07-03[32]\n\n2020-01-01[c][32]\n\n\nOld version, no longer maintained: 3.0\n\n3.0.1[44]\n\n2008-12-03[27]\n\n2009-06-27[51]\n\n\nOld version, no longer maintained: 3.1\n\n3.1.5[52]\n\n2009-06-27[52]\n\n2011-06-12[53]\n\n2012-04-06[52]\n\n\nOld version, no longer maintained: 3.2\n\n3.2.6[54]\n\n2011-02-20[54]\n\n2013-05-13[b][54]\n\n2016-02-20[54]\n\n\nOld version, no longer maintained: 3.3\n\n3.3.7[55]\n\n2012-09-29[55]\n\n2014-03-08[b][55]\n\n2017-09-29[55]\n\n\nOld version, no longer maintained: 3.4\n\n3.4.10[56]\n\n2014-03-16[56]\n\n2017-08-09[57]\n\n2019-03-18[a][56]\n\n\nOld version, no longer maintained: 3.5\n\n3.5.10[58]\n\n2015-09-13[58]\n\n2017-08-08[59]\n\n2020-09-30[58]\n\n\nOld version, no longer maintained: 3.6\n\n3.6.15[60]\n\n2016-12-23[60]\n\n2018-12-24[b][60]\n\n2021-12-23[60]\n\n\nOld version, no longer maintained: 3.7\n\n3.7.17[61]\n\n2018-06-27[61]\n\n2020-06-27[b][61]\n\n2023-06-06[61]\n\n\nOlder version, yet still maintained: 3.8\n\n3.8.19[62]\n\n2019-10-14[62]\n\n2021-05-03[b][62]\n\n2024-10[62]\n\n\nOlder version, yet still maintained: 3.9\n\n3.9.19[63]\n\n2020-10-05[63]\n\n2022-05-17[b][63]\n\n2025-10[63][64]\n\n\nOlder version, yet still maintained: 3.10\n\n3.10.14[65]\n\n2021-10-04[65]\n\n2023-04-05[b][65]\n\n2026-10[65]\n\n\nOlder version, yet still maintained: 3.11\n\n3.11.9[66]\n\n2022-10-24[66]\n\n2024-04-02[b][66]\n\n2027-10[66]\n\n\nCurrent stable version: 3.12\n\n3.12.3[67]\n\n2023-10-02[67]\n\n2025-05[67]\n\n2028-10[67]\n\n\nLatest preview version of a future release: 3.13\n\n3.13.0b1[68][69]\n\n2024-10-01[68]\n\n2026-05[68]\n\n2029-10[68]\n\n\nFuture release: 3.14\n\nN/A[70]\n\n2025-10-01[70]\n\n2027-05[70]\n\n2030-10[70]\n\n\nLegend:\n\nLegend:Old versionOlder version, still maintainedLatest versionLatest preview versionFuture release\n\n\nItalics indicates the latest micro version of currently supported versions as of 2024-05-14.\n\nTable notes:\n\n\n\n^ a b c d e f g h i j k l Date of last micro release.\n\n^ a b c d e f g h i Date of last non security only release.\n\n^ Official support ended on 2020-01-01, but a final release of the code as it appeared on 2020-01-01 was released on 2020-04-20 as version 2.7.18.[32]\n\n\nSupport[edit]\n\nSee also[edit]\nHistory of software engineering\nReferences[edit]\n\n\n^ a b c "The Making of Python". Artima Developer. Archived from the original on September 1, 2016. Retrieved March 22, 2007.\n\n^ a b c d e f g h i j k l m n o p q van Rossum, Guido (January 20, 2009). "A Brief Timeline of Python". Archived from the original on August 25, 2011. Retrieved November 29, 2019.\n\n^ a b "Why was Python created in the first place?". Python FAQ. Archived from the original on February 23, 2008. Retrieved March 22, 2007.\n\n^ van Rossum, Guido (July 31, 2008). "Origin of BDFL". Archived from the original on January 16, 2011. Retrieved August 1, 2008.\n\n^ "Python Creator Scripts Inside Google". www.eweek.com. March 7, 2006. Archived from the original on August 9, 2018. Retrieved May 13, 2008.\n\n^ Fairchild, Carlie (July 12, 2018). "Guido van Rossum Stepping Down from Role as Python\'s Benevolent Dictator For Life". Linux Journal. Archived from the original on July 13, 2018. Retrieved July 12, 2018.\n\n^ "General Python FAQ — Python 3.8.3 documentation". docs.python.org. Archived from the original on October 24, 2012. Retrieved June 4, 2020.\n\n^ a b c d Kuchling, Andrew M.; Zadka, Moshe. "What\'s New in Python 2.0". Archived from the original on December 14, 2009. Retrieved March 22, 2007.\n\n^ a b "Welcome to Python.org". python.org. Archived from the original on June 14, 2020. Retrieved December 27, 2016.\n\n^ a b c van Rossum, Guido (April 5, 2006). "PEP 3000 -- Python 3000". Archived from the original on April 2, 2022. Retrieved December 27, 2016.\n\n^ "Python 0.9.1 part 01/21". alt.sources archives. Archived from the original on August 11, 2021. Retrieved August 11, 2021.\n\n^ "HISTORY". Python source distribution. Python Foundation. Archived from the original on December 1, 2017. Retrieved November 23, 2017.\n\n^ van Rossum, Guido. "The fate of reduce() in Python 3000". Artima Developer. Archived from the original on April 7, 2007. Retrieved March 22, 2007.\n\n^ "LJ #37: Python 1.4 Update". Archived from the original on May 1, 2007. Retrieved April 29, 2007.\n\n^ van Rossum, Guido. "Computer Programming for Everybody". Archived from the original on May 1, 2007. Retrieved March 22, 2007.\n\n^ "Computer Programming for Everybody". Python Software Foundation. Archived from the original on March 29, 2007. Retrieved March 22, 2007.\n\n^ "Python Development Team Moves to BeOpen.Com - Slashdot". slashdot.org. Archived from the original on April 12, 2020. Retrieved April 12, 2020.\n\n^ "Open | Your digital insurance partner". Archived from the original on August 15, 2000.\n\n^ "Content Management Provider PyBiz Announces Strategic Partnership With BeOpen in Utilizing Python Programming Language" (PDF). Archived (PDF) from the original on April 12, 2020. Retrieved April 12, 2020.\n\n^ a b "History and License". Python 3 Documentation. Archived from the original on December 5, 2016. Retrieved December 7, 2022.\n\n^ Hylton, Jeremy (November 1, 2000). "PEP 227 -- Statically Nested Scopes". Archived from the original on May 23, 2022. Retrieved March 22, 2007.\n\n^ "Python 2.2". Python.org. Archived from the original on August 2, 2019. Retrieved December 31, 2019.\n\n^ Kuchling, Andrew M. (December 21, 2001). "PEPs 252 and 253: Type and Class Changes". What\'s New in Python 2.2. Python Foundation. Archived from the original on September 17, 2008. Retrieved September 5, 2008.\n\n^ Schemenauer, Neil; Peters, Tim; Hetland, Magnus (December 21, 2001). "PEP 255 -- Simple Generators". Archived from the original on January 31, 2023. Retrieved September 5, 2008.\n\n^ "Python 2.5 Release". Python.org. Archived from the original on August 4, 2019. Retrieved March 20, 2018.\n\n^ "Highlights: Python 2.5". Python.org. Archived from the original on August 4, 2019. Retrieved March 20, 2018.\n\n^ a b c d e f Norwitz, Neal; Warsaw, Barry (June 29, 2006). "PEP 361 -- Python 2.6 and 3.0 Release Schedule". Archived from the original on April 12, 2022. Retrieved November 29, 2019.\n\n^ Kuchling, Andrew M. (July 3, 2010). "What\'s New in Python 2.7". Archived from the original on June 7, 2012. Retrieved October 7, 2012. Much as Python 2.6 incorporated features from Python 3.0, version 2.7 incorporates some of the new features in Python 3.1. The 2.x series continues to provide tools for migrating to the 3.x series.\n\n^ Warsaw, Barry (November 9, 2011). "PEP 404 -- Python 2.8 Un-release Schedule". Archived from the original on May 23, 2022. Retrieved October 7, 2012.\n\n^ Gee, Sue (April 14, 2014). "Python 2.7 To Be Maintained Until 2020". i-programmer.info. Archived from the original on May 10, 2016. Retrieved December 27, 2016.\n\n^ "Commits · python/cpython at 2.7". GitHub. Archived from the original on April 22, 2020. Retrieved April 22, 2020.\n\n^ a b c d e Peterson, Benjamin (November 3, 2008). "PEP 373 -- Python 2.7 Release Schedule". Archived from the original on March 13, 2022. Retrieved April 20, 2020.\n\n^ "PEP 3100 – Miscellaneous Python 3.0 Plans | peps.python.org". peps.python.org. Archived from the original on May 25, 2022. Retrieved June 2, 2022.\n\n^ "PEP 3000 – Python 3000 | peps.python.org". peps.python.org. Archived from the original on April 2, 2022. Retrieved June 2, 2022.\n\n^ Ruby, Sam; 2to3 Archived March 24, 2016, at the Wayback Machine, September 1, 2007\n\n^ Coghlan, Nick; Python 3 Q & A Archived March 16, 2017, at the Wayback Machine, June 29, 2012\n\n^ Brandl, Georg (November 19, 2007). "PEP 3105 -- Make print a function". Archived from the original on April 2, 2022. Retrieved December 27, 2016.\n\n^ van Rossum, Guido. "Python 3000 FAQ". artima.com. Archived from the original on November 9, 2020. Retrieved December 27, 2016.\n\n^ "The fate of reduce() in Python 3000". www.artima.com. Archived from the original on December 18, 2019. Retrieved December 31, 2019.\n\n^ Winter, Collin; Lownds, Tony (December 2, 2006). "PEP 3107 -- Function Annotations". Archived from the original on March 13, 2022. Retrieved December 27, 2016.\n\n^ van Rossum, Guido (September 26, 2007). "PEP 3137 -- Immutable Bytes and Mutable Buffer". Archived from the original on May 23, 2022. Retrieved May 23, 2022.\n\n^ a b c "Releases | Python.org". Archived from the original on December 22, 2015. Retrieved November 29, 2019.\n\n^ Drake, Fred L. Jr. (July 25, 2000). "PEP 160 -- Python 1.6 Release Schedule". Archived from the original on May 13, 2022. Retrieved November 29, 2019.\n\n^ a b c d e f g h i j k l m "Download Python | Python.org". Archived from the original on August 8, 2018. Retrieved November 29, 2019.\n\n^ Hylton, Jeremy. "PEP 200 -- Python 2.0 Release Schedule". Archived from the original on May 18, 2022. Retrieved November 29, 2019.\n\n^ Hylton, Jeremy (October 16, 2000). "PEP 226 -- Python 2.1 Release Schedule". Archived from the original on May 23, 2022. Retrieved November 29, 2019.\n\n^ Warsaw, Barry; van Rossum, Guido (April 17, 2001). "PEP 251 -- Python 2.2 Release Schedule". Archived from the original on May 4, 2022. Retrieved November 29, 2019.\n\n^ van Rossum, Guido (February 27, 2002). "PEP 283 -- Python 2.3 Release Schedule". Archived from the original on April 12, 2022. Retrieved November 29, 2019.\n\n^ Warsaw, Barry; Hettinger, Raymond; Baxter, Anthony (July 29, 2003). "PEP 320 -- Python 2.4 Release Schedule". Archived from the original on May 17, 2022. Retrieved November 29, 2019.\n\n^ Norwitz, Neal; van Rossum, Guido; Baxter, Anthony (February 7, 2006). "PEP 356 -- Python 2.5 Release Schedule". Archived from the original on April 8, 2022. Retrieved November 29, 2019.\n\n^ "17. Development Cycle — Python Developer\'s Guide". Archived from the original on January 18, 2023. Retrieved November 29, 2019.\n\n^ a b c Peterson, Benjamin (February 8, 2009). "PEP 375 -- Python 3.1 Release Schedule". Archived from the original on April 19, 2022. Retrieved November 29, 2019.\n\n^ Peterson, Benjamin (June 12, 2011). "[RELEASED] Python 3.1.4". python-announce (Mailing list). Archived from the original on December 6, 2021. Retrieved November 29, 2019.\n\n^ a b c d Brandl, Georg (December 30, 2009). "PEP 392 -- Python 3.2 Release Schedule". Archived from the original on April 19, 2022. Retrieved November 29, 2019.\n\n^ a b c d Brandl, Georg (March 23, 2011). "PEP 398 -- Python 3.3 Release Schedule". Archived from the original on April 12, 2022. Retrieved November 29, 2019.\n\n^ a b c Hastings, Larry (October 17, 2012). "PEP 429 -- Python 3.4 Release Schedule". Archived from the original on April 12, 2022. Retrieved November 29, 2019.\n\n^ Hastings, Larry (August 9, 2017). "[RELEASED] Python 3.4.7 is now available". python-announce (Mailing list). Archived from the original on December 6, 2021. Retrieved November 29, 2019.\n\n^ a b c Hastings, Larry (September 22, 2014). "PEP 478 -- Python 3.5 Release Schedule". Archived from the original on April 12, 2022. Retrieved March 17, 2020.\n\n^ Hastings, Larry (August 8, 2017). "[RELEASED] Python 3.5.4 is now available". python-announce (Mailing list). Archived from the original on December 6, 2021. Retrieved November 29, 2019.\n\n^ a b c d Deily, Ned (May 30, 2015). "PEP 494 -- Python 3.6 Release Schedule". Archived from the original on May 23, 2022. Retrieved May 23, 2022.\n\n^ a b c d Deily, Ned (December 23, 2016). "PEP 537 -- Python 3.7 Release Schedule". Archived from the original on July 16, 2023. Retrieved July 16, 2023.\n\n^ a b c d Langa, Łukasz (January 27, 2018). "PEP 569 -- Python 3.8 Release Schedule". Archived from the original on July 16, 2023. Retrieved July 16, 2023.\n\n^ a b c d Langa, Łukasz (October 13, 2020). "PEP 596 -- Python 3.9 Release Schedule". Archived from the original on November 12, 2022. Retrieved December 7, 2022.\n\n^ Langa, Łukasz (June 4, 2019). "PEP 602 -- Annual Release Cycle for Python". Archived from the original on July 16, 2023. Retrieved July 16, 2023.\n\n^ a b c d Salgado, Pablo (May 25, 2020). "PEP 619 -- Python 3.10 Release Schedule". Archived from the original on July 16, 2023. Retrieved July 16, 2023.\n\n^ a b c d Salgado, Pablo (July 12, 2021). "PEP 664 -- Python 3.11 Release Schedule". Archived from the original on July 16, 2023. Retrieved July 16, 2023.\n\n^ a b c d Wouters, Thomas (May 24, 2022). "PEP 693 -- Python 3.12 Release Schedule". Archived from the original on July 16, 2023. Retrieved July 16, 2023.\n\n^ a b c d Wouters, Thomas (May 26, 2023). "PEP 719 -- Python 3.13 Release Schedule". Archived from the original on July 16, 2023. Retrieved July 16, 2023.\n\n^ "python/cpython". Python. April 9, 2024. Archived from the original on September 15, 2017. Retrieved April 10, 2024.\n\n^ a b c d van Kemenade, Hugo (April 24, 2024). "PEP 745 – Python 3.14 Release Schedule | peps.python.org". Python Enhancement Proposals (PEPs). Archived from the original on May 5, 2024. Retrieved May 15, 2024.\n\n\nExternal links[edit]\nGuido Van Rossum blog on Python\'s History\n\n\n\n',
  '\n\nThis article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources: "List of Python software" – news · newspapers · books · scholar · JSTOR (March 2012) (Learn how and when to remove this message)\nThe Python programming language is actively used by many people, both in industry and academia, for a wide variety of purposes.\n\n\nIntegrated Development Environments (IDEs) for Python[edit]\nSee also: Comparison of Python IDEs\nAtom, an open source cross-platform IDE with autocomplete, help and more Python features under package extensions.\nCodelobster, a cross-platform IDE for various languages, including Python.\nEasyEclipse, an open source IDE for Python and other languages.\nEclipse ,with the Pydev plug-in. Eclipse supports many other languages as well.\nEmacs, with the built-in python-mode.[1]\nEric, an IDE for Python and Ruby\nGeany, IDE for Python development and other languages.\nIDLE, a simple IDE bundled with the default implementation of the language.\nJupyter Notebook, an IDE that supports markdown, Python, Julia, R and several other languages.\nKomodo IDE an IDE PHOTOS Python, Perl, PHP and Ruby.\nNetBeans, is written in Java and runs everywhere where a JVM is installed.\nNinja-IDE, free software, written in Python and Qt, Ninja name stands for Ninja-IDE Is Not Just Another IDE\nPyCharm, a proprietary and Open Source IDE for Python development.\nPythonAnywhere, an online IDE and Web hosting service.\nPython Tools for Visual Studio, Free and open-source plug-in for Visual Studio.\nSpyder, IDE for scientific programming.\nVim, with "lang#python" layer enabled.[2]\nVisual Studio Code, an Open Source IDE for various languages, including Python.\nWing IDE, cross-platform proprietary with some free versions/licenses IDE for Python.\nReplit, an online IDE that supports multiple languages.\nUnit testing frameworks[edit]\nFurther information: List of unit testing frameworks § Python\nPython package managers and Python distributions[edit]\nAnaconda, Python distribution with conda package manager\nEnthought, Enthought Canopy Python with Python package manager\npip, package management system used to install and manage software written in Python\nApplications[edit]\nA-A-P, a tool used to download, build and install software via Makefile-like "recipes"\nAnaconda (installer), an open-source system installer for Linux distributions primarily used in Fedora Linux, CentOS, and Red Hat Enterprise Linux.\nAnki, a spaced repetition flashcard program\nAnsible, a configuration management engine for computers by combining multi-node software deployment and ad hoc task execution\nBazaar, a free distribution deed revision computer control system\nBitBake, a make-like build tool with the special focus of distributions and packages for embedded Linux cross compilation\nBitTorrent, original client, along with several derivatives\nBuildbot, a continuous integration system\nBuildout, a software build tool, primarily used to download and set up development or deployment software dependencies\nCalibre, an open source e-book management tool\nCelery, an asynchronous task queue/job queue based on distributed message passing\nChandler, a personal information manager including calendar, email, tasks and notes support that is not currently under development\nCinema 4D, a 3D art and animation program for creating intros and 3-Dimensional text. Has a built in Python scripting console and engine.\nConch, implementation of the Secure Shell (SSH) protocol with Twisted\nDeluge, a ça BitTorrent client for GNOME\nDropbox, a web-based file hosting service\nExaile, an open source audio player\nGajim, an instant messaging client for the XMPP protocol\nGlobaLeaks, an open-source whistleblowing framework\nGNOME Soundconverter, a program for converting sound files to various formats and qualities (wrapper around GStreamer).\nGramps, an open source genealogy software\nGunicorn, a pre-fork web server for WSGI applications\nGYP (Generate Your Projects), a build automation tool (similar to CMake and Premake) designed to generate native IDE project files (e.g., Visual Studio, Xcode, etc.) from a single configuration\nImage Packaging System (IPS), an advanced, cross-platform package management system primarily used in Solaris and OpenSolaris/illumos derivatives\nJuice, a popular podcast downloader\nMercurial a cross-platform, distributed source management tool\nMiro, a cross-platform internet television application\nMorpheus, a file-sharing client/server software operated by the company StreamCast\nMusicBrainz Picard, a cross-platform MusicBrainz tag editor\nNicotine, a PyGTK Soulseek client\nOpenLP, lyrics projection software\nOpenShot Video Editor\nOpenStack, a cloud computing IaaS platform\nPip, a package manager used to install and manage Python software packages such as those from the Python Package Index (PyPI) software repository\nPiTiVi, a non-linear video editor\nPortage, the heart of Gentoo Linux, an advanced package management system based on the BSD-style ports system\nPungi (software), an open-source distribution compose tool for orchestrating the creation of YUM and system image repositories\nPychess, a cross-platform computer chess program\nQuake Army Knife, an environment for developing 3D maps for games based on the Quake engine\nQuod Libet, a cross-platform free and open source music player, tag editor and library organizer\nResolver One, a spreadsheet\nSageMath, a combination of more than 20 main opensource math packages and provides easy to use web interface with the help of Python\nSalt, a configuration management and remote execution engine\nSCons, a tool for building software\nShinken, a computer system and network monitoring software application compatible with Nagios\nTouchDesigner, a node based visual programming language for real time interactive multimedia content\nTryton, a three-tier high-level general purpose computer application platform\nUbuntu Software Center, a graphical package manager, was installed by default in Ubuntu 9.10, and stopped being included in Ubuntu releases starting with the Ubuntu 16.04 release.\nWicd, a network manager for Linux\nYUM, a package management utility for RPM-compatible Linux operating systems\nWaf, a build automation tool designed to assist in the automatic compilation and installation of computer software\nXpra, a tool which runs X clients, typically on a remote host, and directs their display to the local machine without losing any state\nWeb applications[edit]\nAllura, an ASF software forge for managing source code repositories, bug reports, discussions, wiki pages, blogs and more for multiple projects\nBloodhound, an ASF project management and bug tracking system\nERP5, a powerful open source ERP / CRM used in Aerospace, Apparel, Banking and for e-government\nERPNext, an open source ERP / CRM\nFirstVoices, an open source language revitalization platform\nKallithea, a source code management system\nMailman, one of the more popular packages for running email mailing lists\nMakeHuman, free software for creating realistic 3D humans.\nMoinMoin, a wiki engine\nOdoo (formerly OpenERP), business management software\nPlanet, a feed aggregator\nPlone, an open source content management system\nRoundup, a bug tracking system\nTor2web, an HTTP proxy for Tor Hidden Services (HS)\nTrac, web-based bug/issue tracking database, wiki, and version control front-end\nViewVC, a web-based interface for browsing CVS and SVN repositories\nVideo games[edit]\nBattlefield 2 uses Python for all of its add-ons and a lot of its functionality.[3]\nBridge Commander[4]\nDisney\'s Toontown Online is written in Python and uses Panda3D for graphics.[5][6]\nDoki Doki Literature Club!, a psychological horror visual novel using the Ren\'Py engine\nEve Online uses Stackless Python.\nFrets on Fire is written in Python and uses Pygame\nMount & Blade is written in Python.[citation needed]\nPirates of the Caribbean Online is written in Python and uses Panda3D for graphics.[citation needed]\nSpongeBob SquarePants: Revenge of the Flying Dutchman uses Python as a scripting language.[7][8]\nThe Sims 4 uses Python[9]\nThe Temple of Elemental Evil, a computer role-playing game based on the classic Greyhawk Dungeons & Dragons campaign setting\nUnity of Command (video game) is an operational-level wargame about the 1942–43 Stalingrad Campaign on the Eastern Front.[citation needed]\nVampire: The Masquerade – Bloodlines, a computer role-playing game based on the World of Darkness campaign setting[10]\nVega Strike, an open source space simulator, uses Python for internal scripting[citation needed]\nWorld of Tanks uses Python for most of its tasks.[11]\nWeb frameworks[edit]\nSee also: Comparison of server-side web frameworks\nBlueBream, a rewrite by the Zope developers of the Zope 2 web application server\nCherryPy, an object-oriented web application server and framework\nCubicWeb, a web framework that targets large-scale semantic web and linked open data applications and international corporations\nDjango, an MVT (model, view, template) web framework\nFlask, a modern, lightweight, well-documented microframework based on Werkzeug and Jinja 2\nGoogle App Engine,  a platform for developing and hosting web applications in Google-managed data centers, including Python.\nGrok, a web framework based on Zope Toolkit technology\nJam.py (web framework), a "full stack" WSGI rapid application development framework\nNevow, a web application framework originally developed by the company Divmod\nPylons, a lightweight web framework emphasizing flexibility and rapid development\nPyramid, a minimalistic web framework inspired by Zope, Pylons and Django\nPython Paste, a set of utilities for web development that has been described as "a framework for web frameworks"\nQuixote, a framework for developing Web applications in Python\nRapidSMS, a web framework which extends the logic and capabilities of Django to communicate with SMS messages\nSpyce, a technology to embed Python code into webpages\nTACTIC, a web-based smart process application and digital asset management system\nTornado, a lightweight non-blocking server and framework\nTurboGears, a web framework combining SQLObject/SQLAlchemy, Kid/Genshi, and CherryPy/Pylons\nweb2py, a full-stack enterprise web application framework, following the MVC design\nZope 2, an application server, commonly used to build content management systems\nGraphics frameworks[edit]\nPygame, Python bindings for SDL\nPanda3D, a 3D game engine for Python\nPython Imaging Library, a module for working with images\nPython-Ogre, a Python Language binding for the OGRE 3D engine\nUI frameworks[edit]\nappJar, cross-platform, open source GUI library for Python. Provides easy wrapper functions around most of Tkinter with extra functionality built in.\nKivy, open source Python library for developing multitouch application software with a natural user interface (NUI).\nPyGTK, a popular cross-platform GUI library based on GTK+; furthermore, other GNOME libraries also have bindings for Python\nPyQt, another cross-platform GUI library based on Qt; as above, KDE libraries also have bindings\nPySide, an alternative to the PyQt library, released under the BSD-style licence\nTkinter is Python\'s de facto GUI it is shipped in most versions of Python and is integrated in the IDLE. It is based Tcl command tool.\nwxPython, a port of wxWidgets and a cross-platform GUI library for Python\nScientific packages[edit]\nAstropy, a library of Python tools for astronomy and astrophysics.\nBiopython, a Python molecular biology suite\nGensim, a library for natural language processing, including unsupervised topic modeling and information retrieval\ngraph-tool, a Python module for manipulation and statistical analysis of graphs.\nNatural Language Toolkit, or NLTK, a suite of libraries and programs for symbolic and statistical natural language processing (NLP) for English\nOrange, an open-source visual programming tool featuring interactive data visualization and methods for statistical data analysis, data mining, and machine learning.\nNetworkX, a package for the creation, manipulation, and study of complex networks.\nSciPy, collection of packages for mathematics, science, and engineering\nscikit-learn, a library for machine learning.\nTomoPy, a package for tomographic data processing and image reconstruction\nVeusz, a scientific plotting package\nVisTrails, a scientific workflow and provenance management software with visual programming interface and integrated visualization (via Matplotlib, VTK).\nApache Singa, a library for deep learning.\nMathematical libraries[edit]\nCuPy, a library for GPU-accelerated computing\n Dask, a library for parallel computing\nMathics, an open-source implementation of the Mathematica programming language\nMatplotlib, providing MATLAB-like plotting and mathematical functions (using NumPy).\nNumPy, a language extension that adds support for large and fast, multi-dimensional arrays and matrices\nPlotly is a scientific plotting library for creating browser-based graphs.\nSageMath is a large mathematical software application which integrates the work of nearly 100 free software projects.\nSymPy, a symbolic mathematical calculations package\nPyMC, python module containing Bayesian statistical models and fitting algorithms, including Markov chain Monte Carlo.\nNumerical libraries[edit]\n\nNumPy, a BSD-licensed library that adds support for the manipulation of large, multi-dimensional arrays and matrices; it also includes a large collection of high-level mathematical functions. NumPy serves as the backbone for a number of other numerical libraries, notably SciPy. De facto standard for matrix/tensor operations in Python.\nPandas, a library for data manipulation and analysis.\nSageMath is a large mathematical software application which integrates the work of nearly 100 free software projects and supports linear algebra, combinatorics, numerical mathematics, calculus, and more.[12]\nSciPy,[13][14][15] a large BSD-licensed library of scientific tools. De facto standard for scientific computations in Python.\nScientificPython, a library with a different set of scientific tools\nSymPy, a library based on New BSD license for symbolic computation. Features of Sympy range from basic symbolic arithmetic to calculus, algebra, discrete mathematics and quantum physics.\nAdditional development packages[edit]\n Beautiful Soup, a package for parsing HTML and XML documents\nCheetah, a Python-powered template engine and code-generation tool\nConstruct, a python library for the declarative construction and deconstruction of data structures\nGenshi, a template engine for XML-based vocabularies\nIPython, a development shell both written in and designed for Python\nJinja, a Python-powered template engine, inspired by Django\'s template engine\nKid, simple template engine for XML-based vocabularies\nMeson build system, a software tool for automating the building (compiling) of software\nmod_python, an Apache module allowing direct integration of Python scripts with the Apache web server\nPyObjC, a Python to Objective-C bridge that allows writing OS X software in Python\nRobot Framework, a generic test automation framework for acceptance testing and acceptance test-driven development (ATDD)\nSetuptools, a package development process library designed to facilitate packaging Python projects by enhancing the Python  distutils (distribution utilities) standard library.\nSphinx, which converts reStructuredText files into HTML websites and other formats including PDF, EPub and Man pages\nSQLAlchemy, database backend and ORM\nSQLObject, an ORM for providing an object interface to a database\nStorm, an ORM from Canonical\nTwisted, a networking framework for Python\nVPython, the Python programming language plus a 3D graphics module called Visual\nEmbedded as a scripting language[edit]\nPython is, or can be used as the scripting language in these notable software products:\n\nAbaqus (Finite Element Software)\nADvantage Framework\nAmarok\nArcGIS, a prominent GIS platform, allows extensive modelling using Python\nAutodesk Maya, professional 3D modeler allows Python scripting as an alternative to MEL as of version 8.5\nAutodesk MotionBuilder\nAutodesk Softimage (formerly Softimage|XSI)\nBioNumerics a bioinformatics software suite for the management, storage and (statistical) analysis of all types of biological data.\nBlender\nBoxee, a cross-platform home theater PC software\nCinema 4D\nCivilization IV has the map editor supporting Python.[16]\nCorel Paint Shop Pro\nClaws Mail with Python plugin\nDSHub\nERDAS Imagine\nFL Studio, a Digital audio workstation, uses Python to support MIDI Controller integration, as well as scripting within its piano roll and Edison audio editor.\nFreeCAD\ngedit\nGIMP\nGNAT The GNAT programming chain tool (Ada language implementation in GNU gcc), as a GNATcoll reusable components for the applications (with or without PyGTK) and as a scripting language for the commands in the GPS programming environment\nHoudini highly evolved 3D animation package, fully extensible using python\nInkscape, a free vector graphics editor\nKrita, a free raster graphics editor for digital painting\nMeVisLab, a medical image processing and visualization software, uses Python for network scripting, macro modules, and application building\nModo\nMicromine\nMinecraft: Pi Edition (game)[17]\nMSC.Software\'s CAE packages: Adams, Mentat, SimXpert\nMySQL Workbench, a visual database design tool\nNotepad++ has a plugin named PythonScript that allows scripting Notepad++ in Python\nNuke (compositing for visual effects)\nOriginPro, a commercial graphic and analysis software, provides Python environment for access\nParaView, an opensource scientific visualization software\nPoser, a 3D rendering and animation computer program that uses for scripting a special dialect of Python, called PoserPython\nPTV AG products for traffic and transportation analysis, including PTV VISSIM\nPyMOL, a popular molecular viewer that embeds Python for scripting and integration\nOriginPro, a commercial graphing and analysis software, provides a Python environment for both embedded and external access\nQGIS uses Python for scripting and plugin-development\nRhinoceros 3D version 5.0[18] and its visual-scripting language Grasshopper uses IronPython[19]\nRhythmbox\nScribus\n3DSlicer, medical image visualisation and analysis software. Python is available for algorithm implementation, analysis pipelines, and GUI creation.\nSPSS statistical software SPSS Programmability Extension allows users to extend the SPSS command syntax language with Python\nSublimeText\nTotem, a media player for the GNOME desktop environment\nVim\nVisIt\nWeeChat, a console IRC client\nCommercial uses[edit]\nCCP Games uses Stackless Python in both its server-side and client-side applications for its MMO Eve Online.[20]\nInstagram\'s backend is written in Python.[21]\nNASA is using Python to implement a CAD/CAE/PDM repository and model management, integration, and transformation system which will be the core infrastructure for its next-generation collaborative engineering environment.[22][non-primary source needed] It is also the development language for OpenMDAO, a framework developed by NASA for solving multidisciplinary design optimization problems.\n"Python has been an important part of Google since the beginning, and remains so as the system grows and evolves. Today dozens of Google engineers use Python."[23]\nReddit was originally written in Common Lisp, but was rewritten in Python in 2005[24]\nYahoo! Groups uses Python "to maintain its discussion groups"[citation needed]\nYouTube uses Python "to produce maintainable features in record times, with a minimum of developers"[25]\nEnthought uses Python as the main language for many custom applications in Geophysics, Financial applications, Astrophysics, simulations for consumer product companies, ...\nRosneft uses Python as one of the main languages for its geoengineering applications development. RN-GRID, a hydraulic fracturing simulation software, has a graphical user interface written entirely in Python.[26][failed verification]\nPython implementations[edit]\nSee also: Python (programming language) § Implementations, and Source-to-source compiler § Programming language implementations\nImplementations of Python include:[27]\n\nCLPython – Implementation, written in Common Lisp\nCPython – The reference implementation, written in C11.[28] Some notable distributions include:\nActivePython – Distribution with more than 300 included packages[29]\nIntel Distribution for Python – High performance distribution with conda and pip package managers[30]\nPSF Python – Reference distribution that includes only selected standard libraries[31]\nCython – programming language to simplify writing C and C++ extension modules for the CPython Python runtime.\nIronPython – Python for CLI platforms (including .NET and Mono)\nJython – Python for Java platforms\nMicroPython – Python 3 implementation for microcontroller platforms\nNuitka – a source-to-source compiler which compiles Python code to C/C++ executables, or source code.\nNumba – NumPy aware LLVM-based JIT compiler\nPyjs – a framework (based on Google Web Toolkit (GWT) concept) for developing client-side Python-based web applications, including a stand-alone Python-to-JavaScript compiler, an Ajax framework and widget toolkit\nPyPy – Python (originally) coded in Python, used with RPython, a restricted subset of Python that is amenable to static analysis and thus a JIT.\nShed Skin – a source-to-source compiler from Python to C++\nStackless Python – CPython with coroutines\nHistoric Python implementations include:\n\nParrot – Virtual machine being developed mainly as the runtime for Raku, and intended to support dynamic languages like Python, Ruby, Tcl, etc.\nPsyco – specialized JIT compiler project that has mostly been eclipsed by PyPy\nPyrex – Python-like Python module development project that has mostly been eclipsed by Cython\nPython for S60 – CPython port to the S60 platform\nUnladen Swallow – performance-orientated implementation based on CPython which natively executed its bytecode via an LLVM-based JIT compiler. Funded by Google, stopped circa 2011\nReferences[edit]\n\n\n^ "Python Programming in Emacs". September 2017.\n\n^ "Use Vim as a Python IDE | SpaceVim".\n\n^ "OrganizationsUsingPython - Python Wiki".\n\n^ "OrganizationsUsingPython - Python Wiki".\n\n^ Mine, Mark R.; Shochet, Joe; Hughston, Roger (2003). "Building a massively multiplayer game for the million". Computers in Entertainment. 1: 1–20. doi:10.1145/950566.950589. S2CID 13977231.\n\n^ "Toontown 2013 Source". GitHub. 17 November 2021.\n\n^ "SpongeBob SquarePants: Revenge of the Flying Dutchman .DGC - ZenHAX". zenhax.com. Retrieved 2022-09-13.\n\n^ "TXT · Jellonator/chum-world Wiki". GitHub. Retrieved 2022-09-13.\n\n^ "The Sims 4 Creator\'s Camp: Modding Masterclass". Sims VIP. 4 August 2014. Retrieved 17 March 2018.\n\n^ "Vampire: The Masquerade – Bloodlines – Mod Developer Guide – PC – By rezzzman – GameFAQs". gamefaqs.gamespot.com. Retrieved 2020-09-11.\n\n^ "This is GameDev, baby! Interview with developers of World of Tanks – HackMag". hackmag.com.\n\n^ Zimmermann, P., Casamayou, A., Cohen, N., Connan, G., Dumont, T., Fousse, L., ... & Bray, E. (2018). Computational Mathematics with SageMath. SIAM.\n\n^ Jones, E., Oliphant, T., & Peterson, P. (2001). SciPy: Open source scientific tools for Python.\n\n^ Bressert, E. (2012). SciPy and NumPy: an overview for developers. " O\'Reilly Media, Inc.".\n\n^ Blanco-Silva, F. J. (2013). Learning SciPy for numerical and scientific computing. Packt Publishing Ltd.\n\n^ Kosak, Dave \'Fargo\' (27 October 2005). "GameSpy: Civilization IV". GameSpy. pp. 1–3. 662218. Archived from the original on 6 December 2013. Retrieved 24 October 2009.\n\n^ O\'Hanlon, Martin (2020-09-04), martinohanlon/mcpi, retrieved 2020-09-11\n\n^ "What is Rhino.Python?". developer.rhino3d.com.\n\n^ "What is Rhino.Python?". developer.rhino3d.com. Retrieved 2021-04-15.\n\n^ "EVE Online | Frequently Asked Questions". EVE Online. 2008-07-05. Archived from the original on 2009-02-22.\n\n^ McCracken, Harry (June 23, 2015). "Do The Simple Thing First: The Engineering Behind Instagram". Fast Company.\n\n^ "NASA Open Source Software". code.nasa.gov. Retrieved 2020-10-26.\n\n^ Quotes about Python Peter Norvig, director of search quality at Google, Inc.\n\n^ "on lisp". Upvoted. Retrieved 2018-12-05.\n\n^ Quotes about Python Cuong Do, Software Architect, YouTube.com.\n\n^ "Rosneft Gives More Than 120 Licenses..." Retrieved 2019-12-05.\n\n^ "PythonImplementations". Python Wiki. Python Software Foundation. Retrieved 2017-12-14.\n\n^ "What\'s New In Python 3.11 — Python 3.11.0rc1 documentation". docs.python.org. Retrieved 2022-08-15.\n\n^ "ActivePython". ActiveState.com. ActiveState Software. Retrieved 2017-12-14.\n\n^ "Intel Distribution for Python". Intel Software. Intel. Retrieved 2017-12-14.\n\n^ "Download Python". Python.org. Python Software Foundation. Retrieved 2017-12-14.\n\n\nExternal links[edit]\nPython Package Index (formerly the Python Cheese Shop) is the official directory of Python software libraries and modules\nUseful Modules in the Python.org wiki\nOrganizations Using Python – a list of projects that make use of Python\nPython.org editors – Multi-platform table of various Python editors\nvtePythonImplementations\nCircuitPython\nCLPython\nCPython\nCython\nMicroPython\nNumba\nIronPython\nJython\nPsyco\nPyPy\nPython for S60\nShed Skin\nStackless Python\nUnladen Swallow\nmore...\nIDE\nEric Python IDE\nIDLE\nNinja-IDE\nPyCharm\nPyDev\nSpyder\nmore...\nTopics\nWSGI\nASGI\n\nsoftware (list)\nPython Software Foundation\nPyCon\n\n\n\n\n',
  'Microcontroller software based on Python\n\n\nMicroPythonDeveloper(s)Damien P. GeorgeInitial release3 May 2014; 10 years ago (2014-05-03)Stable release1.22.2 \n   / 20 February 2024; 3 months ago (20 February 2024)\nRepositorygithub.com/micropython/micropython \nWritten inCPlatformARM Cortex-M, STM32, ESP8266, ESP32, 16-bit PIC, Unix, Microsoft Windows, Zephyr, JavaScript, RP2040LicenseMIT license[1]Websitemicropython.org\nMicroPython is a software implementation of a programming language largely compatible with Python 3, written in C, that is optimized to run on a microcontroller.[2][3]\nMicroPython consists of a Python compiler to bytecode and a runtime interpreter of that bytecode. The user is presented with an interactive prompt (the REPL) to execute supported commands immediately. Included are a selection of core Python libraries; MicroPython includes modules which give the programmer access to low-level hardware.[4]\nMicroPython does have an inline assembler, which lets the code run at full speed, but it is not portable across different microcontrollers.\nThe source code for the project is available on GitHub under the MIT License.[5]\n\n\nHistory[edit]\nA Casio FX-9860GIII calculator which was introduced in 2020, and came with built-in MicroPython\nMicroPython was originally created by the Australian programmer Damien George, after a successful Kickstarter-backed campaign in 2013.[6] While the original Kickstarter campaign released MicroPython with an STM32F4-powered development board "pyboard", MicroPython supports a number of ARM based architectures.[7] The ports supported in the mainline are ARM Cortex-M (many STM32[8] boards, RP2040 boards, TI CC3200/WiPy, Teensy boards, Nordic nRF series, SAMD21 and SAMD51), ESP8266, ESP32,[9] 16-bit PIC, Unix, Windows, Zephyr, and JavaScript.[10] Also, there are many forks for a variety of systems and hardware platforms not supported in the mainline.[11]\nIn 2016, a version of MicroPython for the BBC Micro Bit was created as part of the Python Software Foundation\'s contribution to the Micro Bit partnership with the BBC.[12]\nIn July 2017, MicroPython was forked to create CircuitPython, a version of MicroPython with emphasis on education and ease of use. MicroPython and CircuitPython support somewhat different sets of hardware (e.g. CircuitPython supports Atmel SAM D21 and D51 boards, but dropped support for ESP8266). As of version 4.0, CircuitPython is based on MicroPython version 1.9.4.[13]\nIn 2017, Microsemi made a MicroPython port for RISC-V (RV32 and RV64) architecture.[14]\nIn April 2019, a version of MicroPython for the Lego Mindstorms EV3 was created.[15]\nIn January 2021, a MicroPython port for the RP2040 (ARM Cortex-M0+, on Raspberry Pi Pico and others) was created.[16]\n\nFeatures[edit]\nAbility to run Python[edit]\nMicroPython has the ability to run Python, allowing users to create simple and easy-to-understand programs.[17]  MicroPython supports many standard Python libraries, supporting more than 80% of the features of Python\'s most used libraries.[17] MicroPython was designed specifically to support the typical performance gap between microcontrollers and Python.[18] Python code is able to directly access and interact with hardware, with increased hardware possibilities that are not available using a normal Python application that is run on an operating system.[19]\n\nCode portability[edit]\nMicroPython\'s utilisation of hardware abstraction layer (HAL) technology allows developed code to be portable among different microcontrollers within the same family or platform and on devices that support and can download MicroPython. Programs are often developed and tested on high-performance microcontrollers and distributed with the final application used on lower-performance microcontrollers.[20]\n\nModules[edit]\nMicroPython offers functionality, once new code has been written, to create a frozen module and use it as a library which can be a part of developed firmware. This feature assists with avoiding repetitive downloading of the same, already error-free, tested code into a MicroPython environment. This type of module will be saved to a microcontroller\'s modules directory for compiling and uploading to the microcontroller where the library will be available using Python\'s import command to be used repeatedly.[20]\n\nRead–eval–print loop[edit]\nThe read–eval–print loop (REPL) allows a developer to enter individual lines of code and have them run immediately on a terminal.[21] Linux-based and macOS systems have terminal emulators that can be used to create a direct connection to a MicroPython device\'s REPL using a serial USB connection. The REPL assists with the immediate testing of parts of an application as you can run each part of the code and visually see the results. Once different parts of your code is loaded into the REPL you can use additional REPL features to experiment with your code\'s functionality.[17]\nHelpful REPL commands (once connected to a serial console):[21]\n\nCTRL+C: keyboard interrupt\nCTRL+D: reload\nhelp(): help message\nhelp("modules"): lists built-in modules\nimport board↵ Enterdir(board): lists all the pins on your microcontroller board that are available to be used in a program\'s code\nLimitations[edit]\nAlthough MicroPython fully implements Python language version 3.4 and much of 3.5, it does not implement all language features introduced from 3.5 onwards,[22] though some new syntax from 3.6 and more recent features from later versions, e.g. from 3.8 (assignment expressions) and 3.9. It includes a subset of the standard library.[23]\nMicroPython has more limited hardware support in the microcontroller market than other popular platforms, like Arduino with a smaller number of microcontroller choices that support the language.[18] MicroPython does not include an integrated development environment (IDE) or specific editor unlike other platforms.[18]\n\nSyntax and semantics[edit]\nMicroPython\'s syntax is adopted from Python, due to its clear and easy-to-understand style and power.[24] Unlike most other programming languages less punctuation is used with fewer syntactical machinations in order to prioritise readability.[17]\n\nCode blocks[edit]\nMicroPython adopts Python\'s code block style, with code specific to a particular function, condition or loop being indented.[17] This differs from most other languages which typically use symbols or keywords to delimit blocks.[17]  This assists with the readability of MicroPython code as the visual structure mirrors the semantic structure. This key feature is simple but important as misused indentation can result in code executing under a wrong condition or an overall error from the interpreter.[17]\nA colon (:) is the key symbol used to indicate the ending of a condition statement.[17] The indent size is equivalent to one tab or 4 spaces.\n\nOperations[edit]\nMicroPython has the ability to perform various mathematical operations using primitive and logical operations.[19]\n\n\nSupported operations[19]\n\n\nType\nOperator\nName\nExample\n\n\nArithmetic\n+\nAddition\nvariable + 1\n\n\n-\nSubtraction\nvariable - 1\n\n\n*\nMultiplication\nvariable * 4\n\n\n/\nDivision\nvariable / 4\n\n\n%\nModulo division\nvariable % 4\n\n\nComparison\n==\nEquals\nexpression1 == expression2\n\n\n!=\nNot equal\nexpression1 != expression2\n\n\n<\nLess than\nexpression1 < expression2\n\n\n>\nGreater than\nexpression1 > expression2\n\n\n<=\nLess than or equals\nexpression1 <= expression2\n\n\n>=\nGreater than or equals\nexpression1 >= expression2\n\n\nLogical\n&\nbitwise and\nvariable1 & variable2\n\n\n|\nbitwise or\nvariable1 | variable2\n\n\n^\nbitwise exclusive or\nvariable1 ^ variable2\n\n\n~\nbitwise complement\n~variable1\n\n\nand\nlogical and\nvariable1 and variable2\n\n\nor\nlogical or\nvariable1 or variable2\n\nLibraries[edit]\nMicroPython is a lean and efficient implementation of Python with libraries similar to those in Python.[25] Some standard Python libraries have an equivalent library in MicroPython renamed to distinguish between the two. MicroPython libraries are smaller with less popular features removed or modified to save memory.[19]\nThe three types of libraries in MicroPython:[19]\n\nderived from a standard Python library (built-in libraries)\nspecific MicroPython libraries\nspecific libraries to assist with hardware functionality\nMicroPython is highly customisable and configurable, with language differing between each board (microcontroller) and the availability of libraries may differ. Some functions and classes in a module or the entire module may be unavailable or altered.[19]\n\n\nStandard Python libraries in MicroPython[4]\n\n\nLibrary name\nDescription\n\n\narray\noperations on arrays\n\n\ncmath\nprovides math functions for complex numbers\n\n\ngc\ngarbage collector\n\n\nmath\nprovides basic math operations for floating-point numbers\n\n\nsys\nsystem-level functions; provides access to variables used by the interpreter\n\n\nbinascii\nfunctions for converting between binary and ASCII\n\n\ncollections\noperations for collections and container types that hold various objects\n\n\nerrno\nprovides access to error codes\n\n\nhashlib\noperations for binary hash algorithms\n\n\nheapq\noperations to implement heap queue algorithm\n\n\nio\noperations for handling input/output streams\n\n\njson\nhandles conversion between JSON documents and Python objects\n\n\nos\nfunctions for filesystem access and basic operating system functions\n\n\nre\nimplements regular expression matching operations\n\n\nselect\nfunctions for handling events on multiple streams\n\n\nsocket\nconnecting to sockets (networks), providing access to socket interface\n\n\nstruct\nperforms conversions to Python objects by packing and unpacking primitive data types\n\n\ntime\nprovides time and date function, including measuring time intervals and implementing delays\n\n\nzlib\noperations to decompress binary data\n\n\nMicroPython-specific libraries[4]\n\n\nLibrary name\nDescription\n\n\nframebuf\nprovides a frame buffer that can be used to create bitmap images to be sent to a display\n\n\nmachine\nfunctions assisting with accessing and interacting with hardware blocks\n\n\nmicropython\naccess and control of MicroPython internals\n\n\nnetwork\nassists with installing network driver, allowing interactions through networks\n\n\nctypes\naccess binary data structures\n\nCustom MicroPython libraries[edit]\nWhen developers begin to create a new application, standard MicroPython libraries and drivers may not meet the requirements, with insufficient operations or calculations. Similar to Python, there is the possibility of extending MicroPython\'s functionality with custom libraries which extend the ability of the existing libraries and firmware.[20]\nIn MicroPython, files ending with .py take preference over other library aliases which allows users to extend the use and implementation of the existing libraries.[19]\n\nSupporting hardware[edit]\nAs MicroPython\'s implementation and popularity continues to grow, more boards have the ability to run MicroPython. Many developers are building processor specific versions that can be downloaded onto different microcontrollers.[19] Installing MicroPython on microcontrollers is well documented and user-friendly.[20] MicroPython allows interactions between microcontroller hardware and applications to be simple, allowing access to a range of functionality while working in a resource constrained environment, with a strong level of responsiveness.[17]\nThe two types of boards used to run MicroPython:[19]\n\nMicroPython loaded when manufactured, meaning only MicroPython can be run.\nboards that have firmware that allows MicroPython to be installed to the board.\nExecuting code[edit]\nTo move a program onto a MicroPython board, create a file and copy it onto the microcontroller in order to execute. With the hardware connected to a device, such as a computer, the board\'s flash drive will appear on the device allowing files to be moved to the flash drive. There will be two existing python files, boot.py and main.py that are typically not modified, main.py may be modified if you wish to run the program every time the microcontroller is booted, otherwise, programs will be run using the REPL console.[19]\n\nPyboard[edit]\nThe pyboard is the official MicroPython microcontroller board which fully supports MicroPython\'s software features. The pyboard\'s hardware features include:[4]\n\nmicrocontroller (MCU, CPU, flash ROM and RAM)\nmicroUSB connector\nmicro-SD card slot\nIO pins\nswitches, LEDs, servo ports, real time clock, accelerometer\nThe booting process[edit]\nThe pyboard contains an internal drive (filesystem) named /flash which is stored within the board\'s flash memory, additionally, a microSD card can be inserted into a slot and is accessible through /sd. When booted up, a pyboard must select a filesystem to boot from either /flash or /sd with the current directory being set to either /flash or /sd. By default, if an SD card is inserted, /sd will be used, if not, /flash is used. If needed, the use of the SD card for the booting process can be avoided by creating an empty file called /flash/SKIPSD which will remain on the board and exist when the pyboard is booted up and will skip the SD card for the booting process.[4]\n\nBoot modes[edit]\nWhen the pyboard is powered up normally or the reset button is pressed then the pyboard is booted in a standard mode, meaning that the boot.py file is executed, then the USB configured and finally the python program will run.[4]\nThere is an ability to override the standard boot sequence through holding down the user switch whilst the board is in the booting process and then pressing reset as you continue to hold the user switch. The pyboard\'s LEDs will flick between modes and once the LEDs have reached the mode wanted by the user, they can let go of the user switch and the board will boot in the specific mode.[4]\nthe boot modes are:[4]\n\nstandard boot: green LED only (runs boot.py then python program)\nsafe boot: orange LED only (does not run any scripts during boot-up)\nfilesystem reset: green and orange LED together (resets flash drive to factory state and boots in safe mode)\nused as a fix when filesystem is corrupted\nErrors[edit]\nif red and green LEDs flash alternatively then the python script has an error, and you must use the REPL to debug.\nif all 4 LEDs cycle on and off then there is a hard fault which cannot be recovered from and requires a hard reset.[4]\nProgramming examples[19][edit]\nHello world program:\n\n# print to serial console\n\nprint(\'Hello, World!\')\n\nImporting + turning on a LED:\n\nimport pyb\n\n# turn LED on\n\npyb.LED(1).on()\n\nReading a file + loop:\n\nimport os\n\n# open and read a file\n\nwith open(\'/readme.txt\') as f:\n\tprint(f.read())\n\nBytecode[edit]\nMicroPython includes a cross compiler which generates MicroPython bytecode (file extension .mpy). The Python code can be compiled into the bytecode either directly on a microcontroller or it can be precompiled elsewhere.\nMicroPython firmware can be built without the compiler, leaving only the virtual machine which can run the precompiled mpy programs.\n\nImplementation and uses[edit]\nMicroPython is utilised through firmware being loaded by standard software onto a particular microcontroller into flash memory, communicating using a terminal application loaded onto a computer that emulates a serial interface.[20]\nThe main uses of MicroPython can be generalised into 3 categories:[20]\n\neducational purposes: using MicroPython\'s read–eval–print Loop (REPL) to interact with a microcontroller, it is possible to visually explain the concepts of data processing and communicating with boards in a simpler way than more complicated programming languages.\ndeveloping and testing device and sensor designs: MicroPython offers verified, bug-free, and thoroughly tested reference implementations of interfaces used in microcontrollers solving a common developer\'s task of implementing peripheral communication setup and control. MicroPython offers direct and interactive accessibility to device registers which makes it easy to verify functionality and develop and test hardware parts and devices and algorithms for control and acquiring data from a device.\nmonitoring and configuring tool for design of complex applications: certain applications require specific applications on high performing microcontrollers. MicroPython is able to assist with state monitoring and set-up of system parameters.\nImplementation of MicroPython can differ depending on the availability of standard and supporting libraries and the microcontroller\'s flash memory and RAM size.[20]\n\nReferences[edit]\n\n\n^ George, Damien P. (4 May 2014). "micropython/LICENSE at master · micropython/micropython". GitHub. Retrieved 11 February 2017.\n\n^ Venkataramanan, Madhumita (6 December 2013). "Micro Python: more powerful than Arduino, simpler than the Raspberry Pi". Wired. Retrieved 15 December 2016.\n\n^ Yegulalp, Serdar (5 July 2014). "Micro Python\'s tiny circuits: Python variant targets microcontrollers". InfoWorld. Retrieved 15 December 2016.\n\n^ a b c d e f g h i "MicroPython - Python for microcontrollers". micropython.org. Retrieved 12 August 2017.\n\n^ "MicroPython on GitHub". GitHub. 7 February 2022.\n\n^ "Micro Python: Python for microcontrollers". Kickstarter. Retrieved 15 December 2016.\n\n^ Beningo, Jacob (11 July 2016). "Prototype to production: MicroPython under the hood". EDN Network. Retrieved 15 December 2016.\n\n^ "MicroPython on Nucleo STM32, STM32F411CE, and STM32F401CC: flashing firmware and basic tools". Mischianti. August 2023.\n\n^ "MicroPython with esp8266 and esp32: flashing firmware and programming with basic tools". Mischianti. 7 June 2023.\n\n^ George, Damien P. "micropython/ports at master · micropython/micropython". GitHub. Retrieved 22 October 2019.\n\n^ Sokolovsky, Paul. "Awesome MicroPython". GitHub. Retrieved 22 October 2019.\n\n^ Williams, Alun (7 July 2015). "Hands on with the BBC Micro-Bit user interface". ElectronicsWeekly.com. Retrieved 8 July 2015.\n\n^ Shawcroft, Scott (22 May 2019). "CircuitPython 4.0.1 released!". Adafruit Blog. Adafruit Industries. Retrieved 11 June 2019.\n\n^ "RISC-V Poster Preview — 7th RISC-V Workshop" (PDF). 28 November 2017. Retrieved 17 December 2018.\n\n^ "LEGO releases MicroPython for EV3 based on ev3dev and Pybricks". www.ev3dev.org. Retrieved 21 April 2020.\n\n^ "Meet Raspberry Silicon: Raspberry Pi Pico now on sale at $4". www.raspberrypi.org. 21 January 2021. Retrieved 21 January 2021.\n\n^ a b c d e f g h i Alsabbagh, Marwan (2019). MicroPython Cookbook. Birmingham, UK: Packt Publishing.\n\n^ a b c Bruno, P. (25 November 2021). "An Introduction to MicroPython". All3DP. Retrieved 9 May 2022.\n\n^ a b c d e f g h i j k Bell, Charles (2017). MicroPython for the Internet of Things. Berkeley, USA: Apress.\n\n^ a b c d e f g Gaspar, G.; Kuba, P.; Flochova, J.; Dudak, J.; Florkova, Z. (2020). Development of IoT applications based on the MicroPython platform for Industry 4.0 implementation. 2020 19th International Conference on Mechatronics – Mechatronika (ME). pp. 1–7.\n\n^ a b Rembor, K. "The REPL". Welcome to CircuitPython!. Adafruit Learning System. Retrieved 9 May 2022.\n\n^ "MicroPython differences from CPython — MicroPython latest documentation". docs.micropython.org.\n\n^ "MicroPython - Python for microcontrollers". micropython.org.\n\n^ Wang, L.; Li, Y.; Zhang, H.; Han, Q.; Chen, L. (2021). An Efficient Control-flow based Obfuscator for Micropython Bytecode. 2021 7th International Symposium on System and Software Reliability (ISSSR). pp. 54–63.\n\n^ Khamphroo, M.; Kwankeo, N.; Kaemarungsi, K.; Fukawa, K. (2017). MicroPython-based educational mobile robot for computer coding learning. 2017 8th International Conference of Information and Communication Technology for Embedded Systems (IC-ICTES). pp. 1–6.\n\n\nExternal links[edit]\nOfficial website\nmicropython on GitHub\nGOTO 2016 • MicroPython & the Internet of Things • Damien George on YouTube\nMicroPython playlist on YouTube • Tutorials by Tony DiCola / Adafruit\nvtePythonImplementations\nCircuitPython\nCLPython\nCPython\nCython\nMicroPython\nNumba\nIronPython\nJython\nPsyco\nPyPy\nPython for S60\nShed Skin\nStackless Python\nUnladen Swallow\nmore...\nIDE\nEric Python IDE\nIDLE\nNinja-IDE\nPyCharm\nPyDev\nSpyder\nmore...\nTopics\nWSGI\nASGI\n\nsoftware (list)\nPython Software Foundation\nPyCon\n\n\n\n\n',
  'Apache HTTP Server module\nmod_python is an Apache HTTP Server module that integrates the Python programming language with the server. It is intended to provide a Python language binding for the Apache HTTP Server.\nWhen mod_python released it was one of the more efficient options for Python scripts compared to CGI as CGI requests require starting a new Python process to respond to each individual web request.[citation needed]\n\nHistory[edit]\nThe initial implementation of mod_python was a port to Apache HTTP server of a project called NSAPy. NSAPy was written by Aaron Watters for the Netscape Enterprise Server and was used as an example in a chapter of the book Internet Programming with Python written by Aaron Watters, Guido van Rossum, and James Ahlstrom.[1] The first version of mod_python was released by Gregory Trubetskoy in 2000. In September 2002, mod_python was donated to the Apache Software Foundation and became part of the Apache HTTP Server project.\nSince the development of Python\'s Web Server Gateway Interface from PEP 3333 in December 2003, interest in mod_python has largely moved to WSGI-compliant alternatives such as mod_wsgi.[2]\nDevelopment on the project eventually ceased due to inactivity of the primary contributors and in The Apache Software Foundation June 16, 2010 Board meeting, the Board unanimously passed a resolution terminating Apache Quetzalcoatl Project (umbrella project for mod_python).[3]\nIn September 2013, development of mod_python briefly resumed independent of the Apache Software Foundation[2] however it has been largely inactive since and no new releases were created.[4]\n\nReferences[edit]\n\n\n^ "History". 29 January 2007. Archived from the original on 1 June 2013.{{cite web}}:  CS1 maint: unfit URL (link)\n\n^ a b Trubetskoy, Gregory (2013-08-02). "Hacking on mod_python (again)". Gregory Trubetskoy. Retrieved 2021-03-30.\n\n^ "Meeting minutes". www.apache.org. June 16, 2010. Retrieved 2021-03-30.\n\n^ "grisha/mod_python". GitHub. Retrieved 2021-03-30.\n\n\nExternal links[edit]\nOfficial website\nNSAPy\nvteWeb interfacesServer-sideProtocols\nHTTP\nv2\nv3\nEncryption\nWebDAV\nCGI\nSCGI\nFCGI\nAJP\nWSRP\nWebSocket\nServer APIs\nC NSAPI\nC ASAPI\nC ISAPI\nCOM ASP\nJakarta Servlet\ncontainer\nCLI OWIN\nASP.NET Handler\nPython WSGI\nPython ASGI\nRuby Rack\nJavaScript JSGI\nPerl PSGI\nPortlet\ncontainer\nApache modules\nmod_include\nmod_jk\nmod_lisp\nmod_mono\nmod_parrot\nmod_perl\nmod_php\nmod_proxy\nmod_python\nmod_wsgi\nmod_ruby\nPhusion Passenger\nTopics\nWeb resource vs. Web service\nOpen API\nWebhook\nApplication server\ncomparison\nScripting\nClient-sideBrowser APIs\nC NPAPI\nLiveConnect\nXPConnect\nC NPRuntime\nC PPAPI\nNaCl\nActiveX\nBHO\nXBAP\nWeb APIsWHATWG\nAudio\nCanvas\nCORS\nDOM\nSSE\nVideo\nWebSockets\nWeb messaging\nWeb storage\nWeb worker\nXMLHttpRequest\nW3C\nDOM events\nEME\nFile\nGeolocation\nIndexedDB\nMSE\nSVG\nWebAssembly\nWebAuthn\nWebGPU\nWebRTC\nWebXR\nKhronos\nWebCL\nWebGL\nOthers\nGears\nWeb SQL Database (formerly W3C)\nWebUSB\nTopics\nAjax and Remote scripting vs. DHTML\nBrowser extension\nMashup\nWeb IDL\nScripting\nTopics\nMicroservices\nWeb page\nStatic\nDynamic\nWeb standards\nWeb API security\nWeb application\nRich\nSingle-page\nProgressive\nWeb framework\n\nPortal: Free and open-source software\n\n\n\n',
  'Programming language optimized for artificial intelligence\nThis article\'s tone or style may not reflect the encyclopedic tone used on Wikipedia. See Wikipedia\'s guide to writing better articles for suggestions. (October 2023) (Learn how and when to remove this message)\nMojoParadigmMulti-paradigm:imperative (primary)functionalgenericFamilyPythonDesigned byChris LattnerDeveloperModular Inc.First appeared2023; 1 year ago (2023)Preview release24.4 [1]\n   / May 24, 2024; 1 day ago (2024-05-24)\nTyping disciplineAffineinferrednominalduckstaticdynamicstrongOSCross-platformLicenseProprietaryFilename extensions.🔥 (the fire emoji/U+1F525 Unicode character), alternatively .mojoWebsitewww.modular.com/mojoInfluenced byPython, Cython[citation needed], C, C++, Rust, Swift, Zig\nMojo is a programming language in the Python family that is currently under development.[2][3][4] It is available both in browsers via Jupyter notebooks,[4][5] and locally on Linux and macOS.[6][7] Mojo aims to combine the usability of higher level languages, specifically Python, with the performance of lower level ones.[8]\n\n\nOrigin and Development History[edit]\nThe Mojo programming language was created by Modular Inc, which was founded by Chris Lattner, the original architect of the Swift programming language and LLVM, and Tim Davis, a former Google employee.[9]\nAccording to public change logs, Mojo development goes back to 2022.[10] In May of 2023, the first publicly testable version was made available online via a hosted playground.[11] By September 2023 Mojo was available for local download for Linux[12] and by October 2023 it was also made available for download on Apple\'s macOS. [13]\n\nFeatures[edit]\nThis section is in list format but may read better as prose. You can help by converting this section, if appropriate. Editing help is available. (April 2024)\nMojo uses LLVM and MLIR as its compilation backend.[4][14][15]\nMojo uses inferred static typing.[16]\nMojo was created for easy transition from Python. The language has syntax similar to Python\'s, and allows users to import Python modules.[17]\nMojo is not open source, but it is planned to become open source in the future.[18]\nMojo has a borrow checker, an influence from Rust.[19]\nMojo plans to add a foreign function interface to call C/C++ and Python code.\nMojo is not source-compatible with Python 3, only providing a subset of its syntax, e.g. missing the global keyword, list and dictionary comprehensions, and support for classes. Further, Mojo also adds features that enable performant low-level programming: fn for creating typed, compiled functions and "struct" for memory-optimized alternatives to classes. Mojo structs support methods, fields, operator overloading, and decorators.[5]\nMojo def functions use value semantics by default (functions receive a copy of all arguments and any modifications are not visible outside the function), while  Python functions use reference semantics (functions receive a reference on their arguments and any modification of a mutable argument inside the function is visible outside).[20]\nMojo files use the .🔥 or .mojo file extension.[2]\nProgramming examples[edit]\nIn Mojo, functions can be declared using both fn (for performant functions) or def (for Python compatibility).[17]\nBasic arithmetic operations in Mojo with a def function:\n\ndef sub(x, y):\n    """A pythonic subtraction."""\n    res = x - y\n    return res\n\nand with an fn function:\n\nfn add(x: Int, y: Int) -> Int:\n    """A rustacean addition."""\n    let res: Int = x + y\n    return res\n\nThe manner in which Mojo employs var and let for mutable and immutable variable declarations respectively mirrors the syntax found in Swift. In Swift, var is used for mutable variables, while let is designated for constants or immutable variables.[17]\nVariable declaration and usage in Mojo:\n\nfn main():\n    let x = 1\n    \n    let y: Int\n    y = 1\n\n    var z = 0\n    z += 1\n\nUsage[edit]\nThe Mojo SDK allows Mojo programmers to compile and execute Mojo source files locally from the command line and currently supports Ubuntu and macOS.[21] Additionally, there is a Mojo extension for Visual Studio Code which provides code completion and tooltips.\nIn January 2024, an inference model of LLaMA2 written in Mojo was released to the public.[22]\n\nSee also[edit]\nList of programming languages for artificial intelligence\nPython\nNim\nRing\nCarbon\nZig\nJulia\nRust\nReferences[edit]\n\n\n^ "Mojo Changelog". Modular. Retrieved 2024-04-14.\n\n^ a b "Mojo🔥 programming manual". docs.modular.com. Modular. 2023. Retrieved 2023-09-26. Mojo is a programming language that is as easy to use as Python but with the performance of C++ and Rust. Furthermore, Mojo provides the ability to leverage the entire Python library ecosystem.\n\n^ "Why Mojo🔥 - A language for next-generation compiler technology". docs.modular.com. Modular. 2023. Retrieved 2023-09-26. While many other projects now use MLIR, Mojo is the first major language designed expressly for MLIR, which makes Mojo uniquely powerful when writing systems-level code for AI workloads.\n\n^ a b c Krill, Paul (4 May 2023). "Mojo language marries Python and MLIR for AI development". InfoWorld.\n\n^ a b Yegulalp, Serdar (7 June 2023). "A first look at the Mojo language". InfoWorld.\n\n^ Deutscher, Maria (7 September 2023). "Modular makes its AI-optimized Mojo programming language generally available". Silicon Angle. Retrieved 2023-09-11.\n\n^ "Mojo for Mac OS". Modular. Retrieved 2023-10-19.\n\n^ "Mojo 🔥: Programming language for all of AI". www.modular.com. Retrieved 2024-02-28.\n\n^ Claburn, Thomas (2023-05-05). "Modular finds its Mojo, a Python superset with C-level speed". The Register. Retrieved 2023-08-08.\n\n^ "Mojo🔥 changelog".\n\n^ "Modular: A unified, extensible platform to superpower your AI". www.modular.com. Retrieved 2024-04-14.\n\n^ "Modular: Mojo🔥 - It\'s finally here!". www.modular.com. Retrieved 2024-04-14.\n\n^ "Modular: Mojo🔥 is now available on Mac". www.modular.com. Retrieved 2024-04-14.\n\n^ Lattner, Chris; Pienaar, Jacques (2019). MLIR Primer: A Compiler Infrastructure for the End of Moore\'s Law (Technical report). Retrieved 2022-09-30.\n\n^ Lattner, Chris; Amini, Mehdi; Bondhugula, Uday; Cohen, Albert; Davis, Andy; Pienaar, Jacques; Riddle, River; Shpeisman, Tatiana; Vasilache, Nicolas; Zinenko, Oleksandr (2020-02-29). "MLIR: A Compiler Infrastructure for the End of Moore\'s Law". arXiv:2002.11054 [cs.PL].\n\n^ "Modular Docs - Mojo🔥 programming manual". docs.modular.com. Retrieved 2023-10-19.\n\n^ a b c "Modular Docs - Mojo🔥 programming manual". docs.modular.com. Retrieved 2023-10-31.\n\n^ "Welcome to Mojo 🔥". GitHub. Modular. 2023-10-31. Retrieved 2023-10-31.\n\n^ "Ownership and borrowing | Modular Docs". Modular. Retrieved 2024-02-29.\n\n^ "Mojo🔥 programming manual". Modular. Archived from the original on 2023-06-11. Retrieved 2023-06-11. All values passed into a Python def function use reference semantics. This means the function can modify mutable objects passed into it and those changes are visible outside the function. However, the behavior is sometimes surprising for the uninitiated, because you can change the object that an argument points to and that change is not visible outside the function. All values passed into a Mojo def function use value semantics by default. Compared to Python, this is an important difference: A Mojo def function receives a copy of all arguments—it can modify arguments inside the function, but the changes are not visible outside the function.\n\n^ "Modular Docs - Mojo🔥 roadmap & sharp edges". docs.modular.com. Retrieved 2023-10-31.\n\n^ "llama2.mojo🔥 changelog". GitHub.\n\n\nExternal links[edit]\nOfficial website\nMojo manual\nmojo on GitHub\nAll about mojo programming language\nIntroduction to Mojo programming language\nMojo may be the biggest programming language advance in decades\nMojo: The Future of AI Programming\nvteProgramming languages\nComparison\nTimeline\nHistory\n\nAda\nALGOL\nAPL\nArkTS\nAssembly\nBASIC\nC\nC++\nC#\nClassic Visual Basic\nCOBOL\nErlang\nForth\nFortran\nGo\nHaskell\nJava\nJavaScript\nJulia\nKotlin\nLisp\nLua\nMATLAB\nML\nObject Pascal\nPascal\nPerl\nPHP\nProlog\nPython\nR\nRuby\nRust\nSQL\nScratch\nShell\nSimula\nSmalltalk\nSwift\nVisual Basic\nmore...\n\n Lists: Alphabetical\nCategorical\nGenerational\nNon-English-based\n Category\n\nvteStatistical softwarePublic domain\nDataplot\nEpi Info\nCSPro\nX-12-ARIMA\nOpen-source\nADMB\nDAP\ngretl\nJASP\nJAGS\nJMulTi\nJulia\nJupyter (Julia, Python, R)\nGNU Octave\nOpenBUGS\nOrange\nPSPP\nPython (statsmodels, PyMC3, IPython, IDLE)\nR (RStudio)\nSageMath\nSimFiT\nSOFA Statistics\nStan\nXLispStat\nFreeware\nBV4.1\nCumFreq\nSegReg\nXploRe\nWinBUGS\nCommercialCross-platform\nData Desk\nGAUSS\nGraphPad InStat\nGraphPad Prism\nIBM SPSS Statistics\nIBM SPSS Modeler\nJMP\nMaple\nMathcad\nMathematica\nMATLAB\nOxMetrics\nRATS\nRevolution Analytics\nSAS\nSmartPLS\nStata\nStatView\nSUDAAN\nS-PLUS\nTSP\nWorld Programming System (WPS)\nWindows only\nBMDP\nEViews\nGenStat\nLIMDEP\nLISREL\nMedCalc\nMicrofit\nMinitab\nMLwiN\nNCSS\nSHAZAM\nSigmaStat\nStatistica\nStatsDirect\nStatXact\nSYSTAT\nThe Unscrambler\nUNISTAT\nExcel add-ons\nAnalyse-it\nUNISTAT for Excel\nXLfit\nRExcel\n\nCategory\nComparison\n\nvteNumerical-analysis softwareFree\nAdvanced Simulation Library\nADMB\nChapel\nEuler\nFreeFem++\nFreeMat\nGenius\nGmsh\nGNU Octave\ngretl\nJulia\nJupyter (Julia, Python, R; IPython)\nMFEM\nOpenFOAM\nPython\nR\nSageMath\nSalome\nScicosLab\nScilab\nX10\nWeka\nDiscontinued\nFortress\n\nProprietary\nDADiSP\nFEATool Multiphysics\nGAUSS\nLabVIEW\nMaple\nMathcad\nMathematica\nMATLAB\nSpeakeasy\nVisSim\n\nComparison\n\n\n\n\n',
  'Open-source JIT compiler\nNumba logoOriginal author(s)Continuum AnalyticsDeveloper(s)Community projectInitial release15 August 2012; 11 years ago (2012-08-15)Stable release0.59.1[1] \n   / 19 March 2024; 2 months ago (19 March 2024)\nRepositorygithub.com/numba/numba \nWritten inPython, COperating systemCross-platformTypeTechnical computingLicenseBSD 2-clauseWebsitenumba.pydata.org\nNumba is an open-source JIT compiler that translates a subset of Python and NumPy into fast machine code using LLVM, via the llvmlite Python package. It offers a range of options for parallelising Python code for CPUs and GPUs, often with only minor code changes.\nNumba was started by Travis Oliphant in 2012 and has since been under active development at its repository in GitHub with frequent releases. The project is driven by developers at Anaconda, Inc., with support by DARPA, the Gordon and Betty Moore Foundation, Intel, Nvidia and AMD, and a community of contributors on GitHub.\n\n\nExample[edit]\nNumba can be used by simply applying the numba.jit decorator to a Python function that does numerical computations:\n\nimport numba\nimport random\n\n@numba.jit\ndef monte_carlo_pi(n_samples: int) -> float:\n    """Monte Carlo"""\n    acc = 0\n    for i in range(n_samples):\n        x = random.random()\n        y = random.random()\n        if (x**2 + y**2) < 1.0:\n            acc += 1\n    return 4.0 * acc / n_samples\n\nThe just-in-time compilation happens transparently when the function is called:\n\n>>> monte_carlo_pi(1000000)\n3.14\n\nNumba\'s website  contains many more examples, as well as information on how to get good performance from Numba.\n\nGPU support[edit]\nNumba can compile Python functions to GPU code. Initially two backends are available:\n\nNvidia CUDA, see numba.pydata.org/numba-doc/dev/cuda\nAMD ROCm HSA, see numba.pydata.org/numba-doc/dev/roc\nSince release 0.56.4,[2] AMD ROCm HSA has been officially moved to unmaintained status and a separate repository stub has been created for it.\n\nAlternative approaches[edit]\nNumba is one approach to make Python fast, by compiling specific functions that contain\nPython and Numpy code. Many alternative approaches for fast numeric computing with Python exist, such as Cython, Pythran, and PyPy.\n\nReferences[edit]\n\n\n^ "Release 0.59.1". 19 March 2024. Retrieved 22 March 2024.\n\n^ "Release Notes — Numba 0.56.4+0.g288a38bbd.dirty-py3.7-linux-x86_64.egg documentation".\n\n\n\n\n\n',
  'Organization promoting gender diversity in the Python programming community\nPyLadiesPyLadies\' logoTypeorganizationFieldscomputing, Python (programming language), Women in STEMWebsitepyladies.com\nPyLadies is an international mentorship group which focuses on helping more women become active participants in the Python open-source community.[1][2][3] It is part of the Python Software Foundation.[4] It was started in Los Angeles in 2011. The mission of the group is to create a diverse Python community through outreach, education, conferences and social gatherings. PyLadies also provides funding for women to attend open source conferences. The aim of PyLadies is increasing the participation of women in computing. PyLadies became a multi-chapter organization with the founding of the Washington, D.C.,[5] chapter in August 2011.\n\n\nHistory[edit]\nThe organization was created in Los Angeles[6] in April 2011 by seven women:[7] Audrey Roy Greenfeld, Christine Cheung, Esther Nam, Jessica Venticinque (Stanton at the time), Katharine Jarmul, Sandy Strong, and Sophia Viklund. Around 2012, the organization filed for nonprofit status.[8]\nAs of March 2024, PyLadies has 129 chapters.[9]\n\nOrganization[edit]\nPyLadies has conducted outreach events for both beginners and experienced users.[10][11] PyLadies has conducted hackathons, social nights and workshops for Python enthusiasts.[12]\n\nParticipants at a PyLadies event\nEach chapter is free to run themselves as they wish as long as they are focused on the goal of empowering women[13] and other marginalized genders in tech. Women make up the majority of the group, but membership is not limited to women and the group is open to helping people who identify as other gender identities as well.[12][14]\nIn the past, PyLadies has also collaborated with other organizations, for instance R-Ladies.[15][16]\n\nReferences[edit]\n\n\n^ Pantozzi, Jill (17 February 2012). "Presenting PyLadies: Python Programmers". The Mary Sue. Retrieved 26 August 2012.\n\n^ "About PyLadies". Retrieved 1 August 2012.\n\n^ "PyLadies". GitHub. Retrieved 1 August 2012.\n\n^ "$10,000 Raised for PyLadies at PyCon 2013". Marketwire. 25 March 2013. Retrieved 21 November 2018 – via EBSCOhost.\n\n^ "DC Pyladies Meetup". Meetup.com. Retrieved 26 August 2012.\n\n^ Payne, Heather. "Review of PyLadies:Intro to Python". Archived from the original on 6 September 2018. Retrieved 26 August 2012.\n\n^ "PyLadies Intro to Python Workshop – PyLadies". blog.pyladies.com. Archived from the original on 2018-10-08. Retrieved 2018-09-06.\n\n^ Shah, Angilee (2012-02-16). "Geek Chicks: PyLadies, a Gang of Female Computer Programmers". L.A. Weekly. Retrieved 2018-11-21.\n\n^ "PyLadies Locations". PyLadies. Retrieved 2024-03-20.\n\n^ Nam, Esther. "Events, Workshops, Hackathons and startup kits". Women 2.0. Archived from the original on 20 February 2014. Retrieved 26 August 2012.\n\n^ Gonzales, Nanette. "Pyladies, a gang of female computer programmers". LaWeekly. Archived from the original on 20 February 2012. Retrieved 1 August 2012.\n\n^ a b Burke, Elaine (2013-10-22). "Way to code: adult coding groups driving an upskilling revolution - Portfolio". Silicon Republic. Retrieved 2018-11-22.\n\n^ Kohn, Stephanie (2018-03-08). "Empoderamento feminino: conheça grupos que ajudam mulheres a programar - Carreira". Canaltech (in Brazilian Portuguese). Retrieved 2018-11-22.\n\n^ Rayome, Alison DeNisco (12 September 2018). "Why Python is so popular with developers: 3 reasons the language has exploded". TechRepublic. Retrieved 2018-11-22.\n\n^ "PyLadies + R-Ladies — Bringing the communities together". Meetup. 2022-07-27. Retrieved 2024-03-20.\n\n^ "AutoML in R & Python using H2O". Meetup. 2023-02-17. Retrieved 2024-03-20.\n\n\nExternal links[edit]\nPyLadies Website\n\n\nThis organization-related article is a stub. You can help Wikipedia by expanding it.vte\n\n\n\n',
  "\n\nPyrexDeveloper(s)Greg EwingInitial release3 April 2002; 22 years ago (2002-04-03)[1]Stable release0.9.9\n   / 12 April 2010; 14 years ago (2010-04-12)\nWritten inPython, COperating systemCross-platformTypeProgramming languageWebsitewww.cosc.canterbury.ac.nz/~greg/python/Pyrex/\nPyrex is a programming language for creating Python modules. Its syntax is very close to Python and it makes it easy for Python programmers to write non-Python supporting code for interfacing modules in a language which is as close to Python as possible.\nPython itself only provides a C API to write extension modules, which allows writing of functions and datatypes in C.[discuss] These can then be accessed from Python. It is possible to wrap the functions and datatypes of existing C libraries as Python objects and therefore make them available to Python.[2]\nPyrex allows the user to write extension modules in a Python-like language which may directly access the external C code. The similarity of Pyrex's syntax to Python's makes it easy to write Python modules, but there are some functional limitations.[3] The programmer must specify the name of C-header files, enumerations, datatypes and functions needing to be accessed in the module, then they can be used as if they were Python objects. The Pyrex compiler will generate the necessary glue code automatically and compile the Pyrex code into a working Python module.[citation needed]\nThere are tools like SWIG or Python's foreign function library ctypes which can be used for this task without requiring much additional code, but this is limited to making an external library available in Python code.[4][5] If adjustments to the API are needed, glue code must again be written manually.[citation needed]\n\nSee also[edit]\n\nFree and open-source software portal\nCython\nReferences[edit]\n\n\n^ greg at cosc (3 April 2002). \"ANN: Pyrex — a language for writing Python extension modules\". Retrieved 24 February 2014.\n\n^ Mark Lutz (2006). Programming Python. O'Reilly Media. p. 1461. ISBN 9780596554613.\n\n^ Alex Martelli (2009). Python in a Nutshell. O'Reilly Media. p. 650. ISBN 9781449379100.\n\n^ Jang Hyuk Kwon; Thom Dunning; Kum Won Cho; Aurore Savoy-Navarro (2010). Future Application and Middleware Technology on E-Science. Springer US. p. 141. ISBN 9781441917195.\n\n^ Wesley Chun (2012). Core Python Applications Programming. Prentice Hall. p. 385. ISBN 9780132678209.\n\n\nExternal links[edit]\nOfficial website\nThis computer-programming-related article is a stub. You can help Wikipedia by expanding it.vte\n\n\n\n",
  'Annual programming language convention\nThe closing panel of the 2010 PyCon Asia Pacific held at the Singapore Management University\nThe Python Conference (also called PyCon[1]: 564 ) is the largest[2][3] annual convention for the discussion and promotion of the Python programming language.[4][5] It originated in the United States but is also held in more than 40 other countries.[6][7][8] It was one of the first computer programming conferences to develop and adhere to a code of conduct.[1]: 565  The conference hosts tutorials, demonstrations and training sessions.[9]\nPyCon 2020 was listed as one of "The best software engineering conferences [to attend] of 2020" and "As Python becomes ever more popular in the scientific community and for big data, the influence of PyCon will continue to grow."[10] PyCon is often attended by Guido van Rossum (the author of the Python language).[2][11] Other groups, such as PyLadies and Django Girls, often have concurrent sessions.[12]\nIt is sometimes referred to in software documentation and conference papers.[13][14]\nIt is organised by the Python Software Foundation, and is supported by many significant companies, including Microsoft,[15][16] Google,[17] and Facebook.[18]\n\nLocation history[edit]\nThe canonical "PyCon" has run annually in the United States[19] since 2003 (21 years ago) (2003) in Washington, D.C:\n\n\n\nYear\n\nLocation\n\nNumber of Attendees\n\n\n2003\n\nWashington, D.C.\n\n200\n\n\n2004\n\n300\n\n\n2005\n\n400\n\n\n2006\n\nDallas, Texas\n\n400\n\n\n2007\n\n500\n\n\n2008\n\nChicago, Illinois\n\n1,000\n\n\n2009\n\n900\n\n\n2010\n\nAtlanta, Georgia\n\n1,000\n\n\n2011\n\n1,400\n\n\n2012\n\nSanta Clara, California\n\n2,300\n\n\n2013\n\n2,500\n\n\n2014\n\nMontreal, Quebec (Canada)\n\n2,500\n\n\n2015\n\n3,100\n\n\n2016\n\nPortland, Oregon\n\n3,294 (badges issued)[20]\n\n\n2017\n\n3,391 (badges received)[21]\n\n\n2018\n\nCleveland, Ohio\n\n3,260 (Checked-in people)[22]\n\n\n2019\n\n3,393 (Checked-in people)[23]\n\n\n2020\n\nPittsburgh, Pennsylvania Virtual (online-only event due to the COVID-19 pandemic[24])\n\n\n\n\n2021\n\n2,650 online[25]\n\n\n2022\n\nSalt Lake City, Utah\n\n1,753 in-person + 669 online = 2,422 total[26]\n\n\n2023\n\n2,159 in-person + 491 online = 2,650 total[27]\n\n\n2024\n\nPittsburgh, Pennsylvania\n\n2,551 in-person\n\n\n2025\n\n\n\n\n2026\n\nLong Beach, California (Planned)\n\n\n\n\n2027\n\n\n\nReferences[edit]\n\n\n^ a b Barry, Paul (2016). Head First Python: A Brain-Friendly Guide. "O\'Reilly Media, Inc.". ISBN 978-1-4919-1949-1. Retrieved 17 May 2020.\n\n^ a b Severance, Charles (2015). "Guido van Rossum: The Modern Era of Python". Computer. 48 (3): 8–10. doi:10.1109/MC.2015.73.page 10\n\n^ "5 Must-Attend Python Conferences in 2018 (October - December)". www.merixstudio.com.\n\n^ "PyCon". Retrieved 2020-03-21.\n\n^ Python, Real. "How to Get the Most Out of PyCon – Real Python". realpython.com.\n\n^ "Conferences and Workshops". Python.org.\n\n^ "PythonConferences - Python Wiki". wiki.python.org.\n\n^ "Join us at PyCon". pycon.org.\n\n^ Boschetti, Alberto; Massaron, Luca (2016). Python Data Science Essentials. Packt Publishing Ltd. p. 352. ISBN 978-1-78646-283-1. Retrieved 17 May 2020.\n\n^ Mello, John P. Jr. "The best software engineering conferences of 2020". TechBeacon.\n\n^ "Python Creator Guido van Rossum Retires, Heads To Python Conference - Slashdot". developers.slashdot.org.\n\n^ "Django Girls invite would-be coders to PyCon this October". 12 September 2017.\n\n^ "Google Scholar". scholar.google.com.\n\n^ "Google Scholar". scholar.google.com.\n\n^ "Come meet Microsoft at PyCon 2019!". 25 April 2019.\n\n^ "Microsoft sponsors first Aussie Python conference". 12 May 2010.\n\n^ "A message from Google to the Python community".\n\n^ "Facebook: Building the Future Together"."We’re thrilled to have the support of Facebook as a PSF and PyCon Principal Sponsor for 2020!"\n\n^ "PyCon US". us.pycon.org.\n\n^ "PyCon-staff mailing list archive". Retrieved Jun 6, 2016.\n\n^ "Final remarks and conference close - Pycon 2017". YouTube. Retrieved May 24, 2017.\n\n^ "Sponsorship Prospectus - PyCon 2019 in Cleveland, Ohio". Retrieved May 21, 2019.\n\n^ "Sponsorship Prospectus - PyCon 2020 in Pittsburgh, Pennsylvania". Retrieved September 4, 2019.\n\n^ Broberg, Matthew; Jodlowska, Ewa. "The real impact of canceling PyCon due to COVID-19". Opensource.com. Retrieved 17 May 2020.\n\n^ "PyCon US 2021 Highlights". PyCon US 2021. Python Software Foundation. Retrieved March 19, 2023.\n\n^ "PyCon US: Successful Return to In-Person in 2022". Python Software Foundation News. Python Software Foundation. June 8, 2022. Retrieved March 19, 2023.\n\n^ "PyCon US 2023 Recap and Recording Release". The PyCon US Blog. Python Software Foundation. June 23, 2023. Retrieved June 24, 2023.\n\n\nExternal links[edit]\nPycon: Connecting the Python Community – official website\n\n\n\n',
  'Programming language for smartphones\nThis article has multiple issues. Please help improve it or discuss these issues on the talk page. (Learn how and when to remove these template messages)\n\nThe topic of this article may not meet Wikipedia\'s general notability guideline. Please help to demonstrate the notability of the topic by citing reliable secondary sources that are independent of the topic and provide significant coverage of it beyond a mere trivial mention. If notability cannot be shown, the article is likely to be merged, redirected, or deleted.Find sources: "Python for S60" – news · newspapers · books · scholar · JSTOR (June 2019) (Learn how and when to remove this message)\nThis article\'s tone or style may not reflect the encyclopedic tone used on Wikipedia. See Wikipedia\'s guide to writing better articles for suggestions. (June 2019) (Learn how and when to remove this message)\n\n (Learn how and when to remove this message)\n\n\nPython for S60ParadigmMulti-paradigm: Object-oriented, Imperative, FunctionalDesigned byGuido van RossumDeveloperPython Software FoundationFirst appeared2006; 18 years ago (2006)Stable release2.0.0\n   /    11 February 2010; 14 years ago (2010-02-11)\nImplementation languageC++, PythonOSSymbian OS, S60 platformLicenseApache license, Python Software Foundation LicenseWebsitegarage.maemo.org/projects/pys60/\nPython for S60, also called PyS60—a term reminiscent of the Unix naming convention— is a port of the Python programming language developed by Nokia for its S60 software platform, originally based on Python 2.2.2 from 2002.[1]\nThe final version, PyS60-2.0.0, was released on 11 February 2010, it came with multiple improvements, most notable of which was an update to a new core based off of Python 2.5.4.[2]\n\n\nRelease history[edit]\nPython Shell on Nokia 6120 Classic\nFirst released in 2005, PyS60 featured a relatively small set of modules and functions. Version 1.2, the last closed-source release and the second version of PyS60, brought many improvements and was made available on 21 October 2005 on the Nokia Forums.\nAfter becoming open-source, PyS60 had the advantage of a strong and dedicated community that actively contributed to improving it. The milestone release was version 1.3.11.\nThe final version that supported the S60 2nd Edition platform, 1.4.5, was released on 3 December 2008. On 24 December 2008, a developer version, 1.9.0, was released. It featured several improvements, the most notable of which was a new core based on Python 2.5.1.\nThe final version, 2.0.0, was released on 11 February 2010. Its core is based on Python 2.5.4.[2]\n\nSee also[edit]\n\nFree and open-source software portal\nList of Python software\nList of integrated development environments for Python\nOpen Programming Language for older Symbian devices\nReferences[edit]\n\n\n^ "Nokia - Nokia to Release Python for S60 Source Code to Open-Source Software Developer Community". Archived from the original on 18 May 2007. Retrieved 17 November 2008.\n\n^ a b "Download:Ensymble v0.29 - Now a distutils package". 17 May 2010. Retrieved 28 January 2014.\n\n\nExternal links[edit]\n\n\n\nWikibooks has a book on the topic of: Python Programming\n\n\n\n\nWikiversity has learning resources about Python\n\nNokia Research Center - Python for S60\nMaemo Garage - Python for S60 Archived 18 July 2011 at the Wayback Machine\nSourceForge.net - Python for S60\n\n\nvtePythonImplementations\nCircuitPython\nCLPython\nCPython\nCython\nMicroPython\nNumba\nIronPython\nJython\nPsyco\nPyPy\nPython for S60\nShed Skin\nStackless Python\nUnladen Swallow\nmore...\nIDE\nEric Python IDE\nIDLE\nNinja-IDE\nPyCharm\nPyDev\nSpyder\nmore...\nTopics\nWSGI\nASGI\n\nsoftware (list)\nPython Software Foundation\nPyCon\n\nvteFree and open-source softwareGeneral\nAlternative terms for free software\nComparison of open-source and closed-source software\nComparison of source-code-hosting facilities\nFree software\nFree software project directories\nGratis versus libre\nLong-term support\nOpen-source software\nOpen-source software development\nOutline\nTimeline\nSoftwarepackages\nAudio\nBioinformatics\nCodecs\nConfiguration management\nDrivers\nGraphics\nWireless\nHealth\nMathematics\nOffice suites\nOperating systems\nRouting\nTelevision\nVideo games\nWeb applications\nE-commerce\nAndroid apps\niOS apps\nCommercial\nFormerly proprietary\nFormerly open-source\nCommunity\nFree software movement\nHistory\nOpen-source-software movement\nEvents\nAdvocacy\nOrganisations\nFree Software Movement of India\nFree Software Foundation\nLicenses\nAFL\nApache\nAPSL\nArtistic\nBeerware\nBSD\nCreative Commons\nCDDL\nEPL\nFree Software Foundation\nGNU GPL\nGNU AGPL\nGNU LGPL\nISC\nMIT\nMPL\nPython\nPython Software Foundation License\nShared Source Initiative\nSleepycat\nUnlicense\nWTFPL\nzlib\nTypes and standards\nComparison of licenses\nContributor License Agreement\nCopyleft\nDebian Free Software Guidelines\nDefinition of Free Cultural Works\nFree license\nThe Free Software Definition\nThe Open Source Definition\nOpen-source license\nPermissive software license\nPublic domain\nViral license\n\nChallenges\nDigital rights management\nLicense proliferation\nMozilla software rebranding\nProprietary device drivers\nProprietary firmware\nProprietary software\nSCO/Linux controversies\nSoftware patents\nSoftware security\nTrusted Computing\nRelated topics\nForking\nGNU Manifesto\nMicrosoft Open Specification Promise\nOpen-core model\nOpen-source hardware\nShared Source Initiative\nSource-available software\nThe Cathedral and the Bazaar\nRevolution OS\n\n Portal\n Category\n\nvteNokia services before 2014Consumer services\nAccounts & SSO\nClub Nokia\nMaliit\nMobile Web Server\nMOSH\nNokia Accessibility\nNokia Browser for Symbian\nNokia Car App\nNokia Care\nNokia Conference\nNokia Business Center\nNokia Download!/Nokia Catalogs\nNokia Life\nNokia Lifeblog\nNokia Mail and Nokia Chat\nNokia MixRadio\nNokia Motion Data\nNokia Motion Monitor\nNokia network monitor\nNokia Pure\nNokia Sensor\nNokia Sports Tracker\nNokia Sync\nNokia Xpress\nOFono\nOTA bitmap\nOvi\nPlazes\nSmart Messaging\nTwango\nWidSets\nNokia imaging apps\nNokia Camera\nNokia Cinemagraph\nNokia Creative Studio\nNokia Glam Me\nNokia Panorama\nNokia PhotoBeamer\nNokia Play To\nNokia Refocus\nNokia Share\nNokia Smart Shoot\nNokia Storyteller\nNokia Video Director\nNokia Video Trimmer\nNokia Video Tuner\nNokia Video Upload\nNavigation services\nBoston University JobLens\nHERE.com\nHere maps\nHERE Map Creator\nHERE Drive\nHERE Transit\nHERE City Lens\nNokia Internships Lens\nNokia JobLens\nNokia Point & Find\nTrapster\nDesktop apps\nNokia Software Recovery Tool\nNokia Software Updater\nNokia Suite\nNokia PC Suite\nHumanitarian services\nNokia Data Gathering\nNokia Education Delivery\nNokia Mobile-Mathematics\nDeveloper tools\nNokia DVLUP\nPython for S60\nWebsites\nDopplr\nNokia Beta Labs\nNokia Conversations\nNokia Discussions\nNoknok.tv\nVideo gaming\nN-Gage\nNokia Climate Mission\nNokia Climate Mission 3D\nNokia Game\nNokia Modern Mayor\nScalable Network Application Package\nList of Nokia products\n\n\nThis computer-programming-related article is a stub. You can help Wikipedia by expanding it.vte\n\n\n\n',
  'Software license\n\n\nPython LicenseAuthorCorporation for National Research InitiativesLatest version2.11 and newerSPDX identifierPython-2.0, Python-2.0.1FSF approvedYes[1]OSI approvedYesGPL compatibleSome versions[1][2]CopyleftNo\nThe Python License is a deprecated permissive computer software license created by the Corporation for National Research Initiatives (CNRI). It was used for versions 1.6 and 2.0 of the Python programming language, both released in the year 2000.\nThe Python License is similar to the BSD License and, while it is a free software license, its wording in some versions meant that it was incompatible with the GNU General Public License (GPL) used by a great deal of free software including the Linux kernel. For this reason CNRI retired the license in 2001, and the license of current releases is the Python Software Foundation License.[3]\n\nOrigin[edit]\nPython was created by Guido van Rossum and the initial copyright was held by his employer, the Centrum Wiskunde & Informatica (CWI). During this time Python was distributed under a GPL-compatible variant of the Historical Permission Notice and Disclaimer license.[4] CNRI obtained ownership of Python when Van Rossum became employed there, and after some years they drafted a new license for the language.\n\nRetirement[edit]\nThe Python License includes a clause stating that the license is governed by the State of Virginia, United States. The Python Software Foundation License; Python 1.6.1 differs from Python 1.6 only in some minor bug fixes and new GPL-compatible licensing terms.[citation needed]\n\nReferences[edit]\n\n\n^ a b "License of Python 1.6a2 and earlier versions". Free Software Foundation. List of licenses."License of Python 1.6b1 through 2.0 and 2.1". Free Software Foundation. List of licenses."License of Python 2.0.1, 2.1.1, and newer versions". Free Software Foundation. List of licenses.\n\n^ History and License Python\n\n^ "Python 3.3.4 license". Retrieved April 15, 2014.\n\n^ "Python 2.5 license (with historical notes)". Python.org. Retrieved March 31, 2008.\n\n\nvteFree and open-source softwareGeneral\nAlternative terms for free software\nComparison of open-source and closed-source software\nComparison of source-code-hosting facilities\nFree software\nFree software project directories\nGratis versus libre\nLong-term support\nOpen-source software\nOpen-source software development\nOutline\nTimeline\nSoftwarepackages\nAudio\nBioinformatics\nCodecs\nConfiguration management\nDrivers\nGraphics\nWireless\nHealth\nMathematics\nOffice suites\nOperating systems\nRouting\nTelevision\nVideo games\nWeb applications\nE-commerce\nAndroid apps\niOS apps\nCommercial\nFormerly proprietary\nFormerly open-source\nCommunity\nFree software movement\nHistory\nOpen-source-software movement\nEvents\nAdvocacy\nOrganisations\nFree Software Movement of India\nFree Software Foundation\nLicenses\nAFL\nApache\nAPSL\nArtistic\nBeerware\nBSD\nCreative Commons\nCDDL\nEPL\nFree Software Foundation\nGNU GPL\nGNU AGPL\nGNU LGPL\nISC\nMIT\nMPL\nPython\nPython Software Foundation License\nShared Source Initiative\nSleepycat\nUnlicense\nWTFPL\nzlib\nTypes and standards\nComparison of licenses\nContributor License Agreement\nCopyleft\nDebian Free Software Guidelines\nDefinition of Free Cultural Works\nFree license\nThe Free Software Definition\nThe Open Source Definition\nOpen-source license\nPermissive software license\nPublic domain\nViral license\n\nChallenges\nDigital rights management\nLicense proliferation\nMozilla software rebranding\nProprietary device drivers\nProprietary firmware\nProprietary software\nSCO/Linux controversies\nSoftware patents\nSoftware security\nTrusted Computing\nRelated topics\nForking\nGNU Manifesto\nMicrosoft Open Specification Promise\nOpen-core model\nOpen-source hardware\nShared Source Initiative\nSource-available software\nThe Cathedral and the Bazaar\nRevolution OS\n\n Portal\n Category\n\n\n\n\n',
  'Software repository\n"PyPI" redirects here. Not to be confused with PyPy, a Python interpreter and JIT compiler.\nPyPIType of siteSoftware repositoryAvailable inMultilingualOwnerPython Software FoundationURLpypi.orgLaunched2003[1]Current statusActiveWritten inVarious\nThe Python Package Index, abbreviated as PyPI (/ˌpaɪpiˈaɪ/) and also known as the Cheese Shop (a reference to the Monty Python\'s Flying Circus sketch "Cheese Shop"),[2]: 8 [3]: 742  is the official third-party software repository for Python.[4] It is analogous to the CPAN repository for Perl[5]: 36  and to the CRAN repository for R. PyPI is run by the Python Software Foundation, a charity. Some package managers, including pip, use PyPI as the default source for packages and their dependencies.[6][7]\nAs of 6 May 2024,[update] more than 530,000 Python packages are available, including a huge fraction of abandonware.[citation needed]\nPyPI primarily hosts Python packages in the form of source archives, called "sdists", or of "wheels"[8] that may contain binary modules from a compiled language.\nPyPI as an index allows users to search for packages by keywords or by filters against their metadata, such as free software license or compatibility with POSIX.[9] A single entry on PyPI is able to store, aside from just a package and its metadata, previous releases of the package, precompiled wheels (e.g. containing DLLs on Windows), as well as different forms for different operating systems and Python versions.\n\nHistory[edit]\nThe Python Distribution Utilities (distutils) Python module was first added to the Python standard library in the 1.6.1 release, in September 2000, and in the 2.0 release, in October 2000, nine years after first python release in February 1991, with the goal of simplifying the process of installing third-party Python packages.[10][11]\nHowever, distutils only provided the tools for packaging Python code, and no more. It was able to collect and distribute metadata but did not use it for other purposes.[12] Python still lacked a centralised catalog for packages on the internet. PEP 241, a proposal to standardize metadata for indexes, was finalized in March 2001.[13] A proposal to create a comprehensive centralised catalog, hosted at the python.org domain, was later finalized in November 2002.[4][12]\nOn 16 April 2018, all PyPI traffic began being served by a more modern website platform: Warehouse. The legacy website was turned off at the end of that month.[14][15] All existing packages were migrated to the new platform with their histories preserved.[16]\nIn May 2023 the Python Software Foundation reported that the United States Department of Justice had subpoenaed the user data of five PyPI contributors.[17][18] A representative of the organization further explained that they expect privacy for contributors, but they also comply with the law and court orders, and for this reason turned over the data which the government requested.[17]\n\nNotes[edit]\nReferences[edit]\n\n\n^ "Packaging History". Python Packaging Authority — PyPA documentation.\n\n^ Lutz, Mark (2006). Programming Python. Vol. 10 (3 ed.). O\'Reilly Media, Inc. ISBN 9780596009250.\n\n^ Ramalho, Luciano (2015). Fluent Python. O\'Reilly Media, Inc. ISBN 9781491946268.\n\n^ a b Hylton, Jeremy (24 September 2003). "Python Package Index Tutorial". Jeremy Hylton. Archived from the original on 21 May 2012. Retrieved 22 April 2012.\n\n^ Barry, Paul (2010). Head First Python. O\'Reilly Media, Inc. ISBN 978-1-4493-8267-4.\n\n^ "Usage". pip 1.1.post1 documentation. The pip developers. Archived from the original on 2 May 2012.\n\n^ "PyPI mirrors". Python Package Index. Python Software Foundation. Archived from the original on 3 May 2012. Retrieved 22 April 2012.\n\n^ "PEP 427 -- The Wheel Binary Package Format 1.0". Python Software Foundation. 15 February 2013. Retrieved 28 October 2017.\n\n^ "Browse : Python Package Index". Python Software Foundation. Retrieved 2 August 2016.\n\n^ "Python 1.6.1". Python Software Foundation. Retrieved 24 April 2012.\n\n^ "What\'s New in Python 2.0". Python Software Foundation. Retrieved 2 August 2016.\n\n^ a b "PEP 301 -- Package Index and Metadata for Distutils". Python Software Foundation. 24 October 2002. Retrieved 3 June 2012.\n\n^ "PEP 241 -- Metadata for Python Software Packages". Python Software Foundation. 19 October 2001. Retrieved 18 August 2016.\n\n^ "Welcome to Warehouse\'s documentation!".\n\n^ "Python Insider: New PyPI launched, legacy PyPI shutting down April 30". Python Software Foundation. 16 April 2018. Retrieved 1 June 2018.\n\n^ "A new package index for Python". LWN.net. Retrieved 1 June 2018.\n\n^ a b Durbin, Ee (24 May 2023). "PyPI was subpoenaed - The Python Package Index". blog.pypi.org.\n\n^ Rudra, Sourav (25 May 2023). "The Python Software Foundation Complies with PyPI Subpoenas to Share Some User Data". It\'s FOSS News.\n\n\n\n\n\n\n',
  'Python Server Pages (PSP) is a name used by several different implementations of server-side script engines for creating dynamically-generated web pages by embedding Python in HTML. For example, an implementation of Python Server Pages was released with mod_python 3.1 in 2004.[1]\nSpyce, which also claims the phrase "Python Server Pages", was first released in 2002.[2]\nThe Webware for Python suite also contains an implementation of Python Server Pages released as early as 2000.[3]\nAn earlier tool with a similar function also called Python Server Pages but based on Java and JPython was first released in 1999.[4]\nIt was one of the earliest web development support in Python and has long since been surpassed in popularity by systems such as Django or Flask.\n\nReferences[edit]\n\n\n^ Trubetskoy, Gregory (2004-02-26), Mod_python\'s PSP: Python Server Pages, retrieved 2009-03-14\n\n^ \nSpyce - Python Server Pages (PSP) User Documentation, Release 2.1, retrieved 2009-03-14\n\n^ Python Server Pages 0.3 Release Notes, September 28, 2000, archived from the original on 2011-07-28\n\n^ Python Server Pages: NEWS, 1999, retrieved 2009-03-14\n\n\n\n\nThis Web-software-related article is a stub. You can help Wikipedia by expanding it.vte\n\n\n\n',
  'American nonprofit organization\nPython Software FoundationAbbreviationPSFFormationMarch 6, 2001Type501(c)(3) nonprofit organizationPurposePromote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers[1]HeadquartersWilmington, Delaware, United StatesRegion served WorldwideOfficial language EnglishFounderGuido van RossumChairDawn WagesExecutive DirectorDeb NicholsonRevenue (2018) $3.1 million[2]Websitepython.org/psf-landing\nThe Python Software Foundation (PSF) is an American nonprofit organization devoted to the Python programming language,[3] launched on March 6, 2001. The mission of the foundation is to foster development of the Python community and is responsible for various processes within the Python community, including developing the core Python distribution, managing intellectual rights, developer conferences including the Python Conference (PyCon), and raising funds.\nIn 2005, the Python Software Foundation received the Computerworld Horizon Award for "cutting-edge" technology.[4][5]\n\n\nOverview[edit]\nThe PSF focuses on empowering and supporting people within the Python community with grant programs that support sprints, conferences, meetups, user groups, and Python development.  The PSF runs Python Conference (PyCon) US, the leading Python community conference.  The PSF is the primary point of contact for organizations that wish to work with Python, to support Python, or sponsor Python development. The PSF provides a structure by which work, donations, and sponsorships are coordinated worldwide. The PSF also possesses and protects intellectual property associated with Python and the Python community, such as the word "Python," the two-snakes logo, and the terms "PyLadies" and "PyCon."[6]\n\nMembership[edit]\nThere are five tiers of membership within the PSF. These tiers include:\n\nBasic members – Basic members are individuals or entities who are part of the Python language community and who have decided to declare their support for Python and agree to the community Code of Conduct.\nSupporting members – Supporting members make an annual donation to the PSF to sustain the foundation and support the Python community. Supporting members are eligible to vote.\nManaging members – Managing members are people who commit to working at least five hours per month to support the Python ecosystem, by organizing Python events, managing or contributing to PSF projects, running infrastructure, participating in one of the PSF\'s working groups, etc. Managing members are eligible to vote.\nContributing members – Contributing members are people who dedicate at least five hours per month working on projects that advance the mission of the PSF, where the work relates to the creation or maintenance of open source software available to the public at no charge. Contributing members are eligible to vote.\n Fellows – Fellows are members who have been nominated by their extraordinary efforts and impact upon Python, the community, and the broader Python ecosystem. Fellows are nominated from the broader community and elevated by a vote of the members. Fellow members are eligible to vote.[7]\nCode of Conduct[edit]\nSince late 2012, the Python Software Foundation started recommending that all Python conferences create and apply a code of conduct. This is mandatory to any event to be granted funds by the Python Software Foundation.[8]\n\nSee also[edit]\nPyLadies\nPyCon\nReferences[edit]\n\n\n^ "Mission". Python Software Foundation. Retrieved 28 March 2018.\n\n^ "ProPublica report for Python Software Foundation". ProPublica. ProPublica. 9 May 2013. Retrieved 23 January 2021.\n\n^ Deibel, Stephan (March 2008). "Executive Summary: The Python Software Foundation". Retrieved 2016-10-05.\n\n^ "Python Software Foundation Wins Computerworld Horizon Award for Popular Python Programming Language" (Press release). 2005-09-15. Archived from the original on 2015-05-01. Retrieved 2016-10-05.\n\n^ "Computerworld Horizon Awards 2005 Honorees". Computerworld. 2005-09-12. Archived from the original on 2019-07-31. Retrieved 2016-10-05.\n\n^ "PSF Membership FAQ". python.org. Retrieved 24 October 2020.\n\n^ "PSF Membership FAQ". python.org. Retrieved 24 October 2020.\n\n^ Endsley, Rikki (17 May 2013). "7 open source projects to cut your teeth on (and the ones to avoid)". IT World. Retrieved 17 June 2017.\n\n\nFurther reading[edit]\nJyh-An Lee (2012). Nonprofit Organizations and the Intellectual Commons. Edward Elgar Publishing. ISBN 978-1-78100-158-5. OCLC 1027550705.\nExternal links[edit]\nPython Software Foundation\nvtePythonImplementations\nCircuitPython\nCLPython\nCPython\nCython\nMicroPython\nNumba\nIronPython\nJython\nPsyco\nPyPy\nPython for S60\nShed Skin\nStackless Python\nUnladen Swallow\nmore...\nIDE\nEric Python IDE\nIDLE\nNinja-IDE\nPyCharm\nPyDev\nSpyder\nmore...\nTopics\nWSGI\nASGI\n\nsoftware (list)\nPython Software Foundation\nPyCon\n\n\n\nThis article about an organization in the United States is a stub. You can help Wikipedia by expanding it.vte\n\n\n\n',
  'Permissive free software license which is compatible with the GNU General Public License\n\n\nPython Software Foundation LicenseSPDX identifierPSF-2.0Debian FSG compatibleYesFSF approvedYes[1]OSI approvedYes[2]GPL compatibleYes[1]CopyleftNo\nGuido van Rossum\nThe Python Software Foundation License (PSFL) is a BSD-style, permissive software license which is compatible with the GNU General Public License (GPL).[1] Its primary use is for distribution of the Python project software and its documentation.[3] Since the license is permissive, it allows proprietization of the derivations. The PSFL is listed as approved on both FSF\'s approved licenses list,[1] and OSI\'s approved licenses list.\nThis license is also known as "Python License 2.0.1".[4]\nIn 2000, Python (specifically version 2.1) was briefly available under the Python License, which is incompatible with the GPL.  The reason given for this incompatibility by Free Software Foundation was that "this Python license is governed by the laws of the \'State of Virginia\', in the USA", which the GPL does not permit.[5]\nGuido van Rossum, Python\'s creator, was awarded the 2001 Free Software Foundation Award for the Advancement of Free Software[6] for changing the license to fix this incompatibility.\n\nSee also[edit]\n\nFree and open-source software portal\nPython Software Foundation\nSoftware using the PSF license (category)\nReferences[edit]\n\n\n^ a b c d Stallman, Richard. "Various Licenses and Comments about Them, new Python license". Free Software Foundation. Archived from the original on December 27, 2021. Retrieved July 7, 2007.\n\n^ "License Search". Open Source Initiative. OSI Approved Licenses.\n\n^ "Terms and conditions for accessing or otherwise using Python". Python Software Foundation. Archived from the original on December 25, 2021. Retrieved December 29, 2021.\n\n^ "Various Licenses and Comments about Them". Free Software Foundation. Retrieved April 13, 2023."Python License 2.0.1". Software Package Data Exchange. SPDX License List.\n\n^ Stallman, Richard. "Various Licenses and Comments about Them, old Python license". Free Software Foundation. Retrieved July 7, 2007.\n\n^ "2001 Free Software Awards". GNU Project - Free Software Foundation. Archived from the original on August 14, 2021. Retrieved July 7, 2007.\n\n\nExternal links[edit]\nThe Python Software Foundation License\nvteFree and open-source softwareGeneral\nAlternative terms for free software\nComparison of open-source and closed-source software\nComparison of source-code-hosting facilities\nFree software\nFree software project directories\nGratis versus libre\nLong-term support\nOpen-source software\nOpen-source software development\nOutline\nTimeline\nSoftwarepackages\nAudio\nBioinformatics\nCodecs\nConfiguration management\nDrivers\nGraphics\nWireless\nHealth\nMathematics\nOffice suites\nOperating systems\nRouting\nTelevision\nVideo games\nWeb applications\nE-commerce\nAndroid apps\niOS apps\nCommercial\nFormerly proprietary\nFormerly open-source\nCommunity\nFree software movement\nHistory\nOpen-source-software movement\nEvents\nAdvocacy\nOrganisations\nFree Software Movement of India\nFree Software Foundation\nLicenses\nAFL\nApache\nAPSL\nArtistic\nBeerware\nBSD\nCreative Commons\nCDDL\nEPL\nFree Software Foundation\nGNU GPL\nGNU AGPL\nGNU LGPL\nISC\nMIT\nMPL\nPython\nPython Software Foundation License\nShared Source Initiative\nSleepycat\nUnlicense\nWTFPL\nzlib\nTypes and standards\nComparison of licenses\nContributor License Agreement\nCopyleft\nDebian Free Software Guidelines\nDefinition of Free Cultural Works\nFree license\nThe Free Software Definition\nThe Open Source Definition\nOpen-source license\nPermissive software license\nPublic domain\nViral license\n\nChallenges\nDigital rights management\nLicense proliferation\nMozilla software rebranding\nProprietary device drivers\nProprietary firmware\nProprietary software\nSCO/Linux controversies\nSoftware patents\nSoftware security\nTrusted Computing\nRelated topics\nForking\nGNU Manifesto\nMicrosoft Open Specification Promise\nOpen-core model\nOpen-source hardware\nShared Source Initiative\nSource-available software\nThe Cathedral and the Bazaar\nRevolution OS\n\n Portal\n Category\n\n\n\nThis software-engineering-related article is a stub. You can help Wikipedia by expanding it.vte\n\n\n\n',
  'Set of rules defining correctly structured programs\nA snippet of Python code with keywords highlighted in bold yellow font\nThe syntax of the Python programming language is the set of rules that defines how a Python program will be written and interpreted (by both the runtime system and by human readers). The Python language has many similarities to Perl, C, and Java. However, there are some definite differences between the languages. It supports multiple programming paradigms, including structured, object-oriented programming, and functional programming, and boasts a dynamic type system and automatic memory management.\nPython\'s syntax is simple and consistent, adhering to the principle that "There should be one— and preferably only one —obvious way to do it." The language incorporates built-in data types and structures, control flow mechanisms,  first-class functions, and modules for better code reusability and organization. Python also uses English keywords where other languages use punctuation, contributing to its uncluttered visual layout.\nThe language provides robust error handling through exceptions, and includes a debugger in the standard library for efficient problem-solving. Python\'s syntax, designed for readability and ease of use, makes it a popular choice among beginners and professionals alike.\n\n\nDesign philosophy[edit]\nPython was designed to be a highly readable language.[1] It has a relatively uncluttered visual layout and uses English keywords frequently where other languages use punctuation. Python aims to be simple and consistent in the design of its syntax, encapsulated in the mantra "There should be one— and preferably only one —obvious way to do it", from the Zen of Python.[2]\nThis mantra is deliberately opposed to the Perl and Ruby mantra, "there\'s more than one way to do it".\n\nKeywords[edit]\nPython has 35 keywords or reserved words; they cannot be used as identifiers.[3][4]\n\n\nand\nas\nassert\nasync[note 1]\nawait[note 1]\nbreak\nclass\ncontinue\ndef\ndel\nelif\nelse\nexcept\nFalse[note 2]\nfinally\nfor\nfrom\nglobal\nif\nimport\nin\nis\nlambda\nNone\nnonlocal[note 3]\nnot\nor\npass\nraise\nreturn\nTrue[note 2]\ntry\nwhile\nwith\nyield\n\nIn addition, Python also has 3 soft keywords. Unlike regular hard keywords, soft keywords are reserved words only in the limited contexts where interpreting them as keywords would make syntactic sense. These words can be used as identifiers elsewhere; You can define a function or variable named match or case.[6][7]\n\n_[note 4]\ncase[note 4]\nmatch[note 4]\nNotes\n\n\n^ a b async and await were introduced in Python 3.5.[5]\n\n^ a b True and False became keywords in Python 3.0. Previously they were global variables.\n\n^ nonlocal was introduced in Python 3.0.\n\n^ a b c match, case and _ were introduced as keywords in Python 3.10.\n\n\nIndentation[edit]\nPython uses whitespace to delimit control flow blocks (following the off-side rule). Python borrows this feature from its predecessor ABC: instead of punctuation or keywords, it uses indentation to indicate the run of a block.\nIn so-called "free-format" languages—that use the block structure derived from ALGOL—blocks of code are set off with braces ({ }) or keywords. In most coding conventions for these languages, programmers conventionally indent the code within a block, to visually set it apart from the surrounding code.\nA recursive function named foo, which is passed a single parameter, x, and if the parameter is 0 will call a different function named bar and otherwise will call baz, passing x, and also call itself recursively, passing x-1 as the parameter, could be implemented like this in Python:\n\ndef foo(x):\n    if x == 0:\n        bar()\n    else:\n        baz(x)\n        foo(x - 1)\n\nand could be written like this in C with K&R indent style:\n\nvoid foo(int x)\n{\n    if (x == 0) {\n        bar();\n    } else {\n        baz(x);\n        foo(x - 1);\n    }\n}\n\nIncorrectly indented code could be misread by a human reader differently than it would be interpreted by a compiler or interpreter. For example, if the function call foo(x - 1) on the last line in the example above was erroneously indented to be outside the if/else block: \n\ndef foo(x):\n    if x == 0:\n        bar()\n    else:\n        baz(x)\n    foo(x - 1)\n\nit would cause the last line to always be executed, even when x is 0, resulting in an endless recursion.\nWhile both space and tab characters are accepted as forms of indentation and any multiple of spaces can be used, spaces are recommended[8] and 4 spaces (as in the above examples) are recommended and are by far the most commonly used.[9][10][unreliable source?] Mixing spaces and tabs on consecutive lines is not allowed starting with Python 3[11] because that can create bugs which are difficult to see, since many text editors do not visually distinguish spaces and tabs.\n\nData structures[edit]\nSee also: Python (programming language) § Typing\nSince Python is a dynamically-typed language, Python values, not variables, carry type information. All variables in Python hold references to objects, and these references are passed to functions. Some people (including Guido van Rossum himself) have called this parameter-passing scheme "call by object reference". An object reference means a name, and the passed reference is an "alias", i.e. a copy of the reference to the same object, just as in C/C++. The object\'s value may be changed in the called function with the "alias", for example:\n\n>>> alist = [\'a\', \'b\', \'c\']\n>>> def my_func(al):\n...     al.append(\'x\')\n...     print(al)\n...\n>>> my_func(alist)\n[\'a\', \'b\', \'c\', \'x\']\n>>> alist\n[\'a\', \'b\', \'c\', \'x\']\n\nFunction my_func changes the value of alist with the formal argument al, which is an alias of alist. However, any attempt to operate (assign a new object reference to) on the alias itself will have no effect on the original object.[clarification needed]\n\n>>> alist = [\'a\', \'b\', \'c\']\n>>> def my_func(al):\n...     # al.append(\'x\')\n...     al = al + [\'x\'] # a new list created and assigned to al means al is no more alias for alist\n...     print(al)\n...\n>>> my_func(alist)\n[\'a\', \'b\', \'c\', \'x\']\n>>> print(alist)\n[\'a\', \'b\', \'c\']\n\nIn Python, non-innermost-local and not-declared-global accessible names are all aliases.\nAmong dynamically-typed languages, Python is moderately type-checked. Implicit conversion is defined for numeric types (as well as booleans), so one may validly multiply a complex number by an integer (for instance) without explicit casting. However, there is no implicit conversion between, for example, numbers and strings; a string is an invalid argument to a mathematical function expecting a number.\n\nBase types[edit]\nPython has a broad range of basic data types. Alongside conventional integer and floating-point arithmetic, it transparently supports arbitrary-precision arithmetic, complex numbers, and decimal numbers.\nPython supports a wide variety of string operations. Strings in Python are immutable, so a string operation such as a substitution of characters, that in other programming languages might alter the string in place, returns a new string in Python. Performance considerations sometimes push for using special techniques in programs that modify strings intensively, such as joining character arrays into strings only as needed.\n\nCollection types[edit]\nOne of the very useful aspects of Python is the concept of collection (or container) types. In general a collection is an object that contains other objects in a way that is easily referenced or indexed. Collections come in two basic forms: sequences and mappings.\nThe ordered sequential types are lists (dynamic arrays), tuples, and strings. All sequences are indexed positionally (0 through length - 1) and all but strings can contain any type of object, including multiple types in the same sequence. Both strings and tuples are immutable, making them perfect candidates for dictionary keys (see below). Lists, on the other hand, are mutable; elements can be inserted, deleted, modified, appended, or sorted in-place.\nMappings, on the other hand, are (often unordered) types implemented in the form of dictionaries which "map" a set of immutable keys to corresponding elements (much like a mathematical function).  For example, one could define a dictionary having a string "toast" mapped to the integer 42 or vice versa. The keys in a dictionary must be of an immutable Python type, such as an integer or a string, because under the hood they are implemented via a hash function. This makes for much faster lookup times, but requires keys not change.\nDictionaries are central to the internals of Python as they reside at the core of all objects and classes: the mappings between variable names (strings) and the values which the names reference are stored as dictionaries (see Object system). Since these dictionaries are directly accessible (via an object\'s __dict__ attribute), metaprogramming is a straightforward and natural process in Python.\nA set collection type is an unindexed, unordered collection that contains no duplicates, and implements set theoretic operations such as union, intersection, difference, symmetric difference, and subset testing. There are two types of sets: set and frozenset, the only difference being that set is mutable and frozenset is immutable. Elements in a set must be hashable. Thus, for example, a frozenset can be an element of a regular set whereas the opposite is not true.\nPython also provides extensive collection manipulating abilities such as built in containment checking and a generic iteration protocol.\n\nObject system[edit]\nIn Python, everything is an object, even classes. Classes, as objects, have a class, which is known as their metaclass. Python also supports multiple inheritance and mixins.\nThe language supports extensive introspection of types and classes. Types can be read and compared—types are instances of type.  The attributes of an object can be extracted as a dictionary.\nOperators can be overloaded in Python by defining special member functions—for instance, defining a method named __add__ on a class permits one to use the + operator on objects of that class.\n\nLiterals[edit]\nStrings[edit]\nPython has various kinds of string literals.\n\nNormal string literals[edit]\nEither single or double quotes can be used to quote strings. Unlike in Unix shell languages, Perl or Perl-influenced languages such as Ruby or Groovy, single quotes and double quotes function identically, i.e. there is no string interpolation of $foo expressions. However, interpolation can be done in various ways: with "f-strings" (since Python 3.6[12]), using the format method or the old % string-format operator.\n\nFor instance, all of these Python statements:print(f"I just printed {num} pages to the printer {printer}")\n\nprint("I just printed {} pages to the printer {}".format(num, printer))\nprint("I just printed {0} pages to the printer {1}".format(num, printer))\nprint("I just printed {num} pages to the printer {printer}".format(num=num, printer=printer))\n\nprint("I just printed %s pages to the printer %s" % (num, printer))\nprint("I just printed %(num)s pages to the printer %(printer)s" % {"num": num, "printer": printer})\nare equivalent to the Perl statement:print "I just printed $num pages to the printer $printer\\n"\nThey build a string using the variables num and printer.\nMulti-line string literals[edit]\nThere are also multi-line strings, which begin and end with a series of three single or double quotes and function like here documents in Perl and Ruby.\nA simple example with variable interpolation (using the format method) is:\n\nprint(\'\'\'Dear {recipient},\n\nI wish you to leave Sunnydale and never return.\n\nNot Quite Love,\n{sender}\n\'\'\'.format(sender="Buffy the Vampire Slayer", recipient="Spike"))\n\nRaw strings[edit]\nFinally, all of the previously mentioned string types come in "raw" varieties (denoted by placing a literal r before the opening quote), which do no backslash-interpolation and hence are very useful for regular expressions; compare "@-quoting" in C#. Raw strings were originally included specifically for regular expressions. Due to limitations of the tokenizer, raw strings may not have a trailing backslash.[13] Creating a raw string holding a Windows path ending with a backslash requires some variety of workaround (commonly, using forward slashes instead of backslashes, since Windows accepts both).\nExamples include:\n\n>>> # A Windows path, even raw strings cannot end in a backslash\n>>> r"C:\\Foo\\Bar\\Baz\\"\n  File "<stdin>", line 1\n    r"C:\\Foo\\Bar\\Baz\\"\n                     ^\nSyntaxError: EOL while scanning string literal\n\n>>> dos_path = r"C:\\Foo\\Bar\\Baz\\ " # avoids the error by adding\n>>> dos_path.rstrip()              # and removing trailing space\n\'C:\\\\Foo\\\\Bar\\\\Baz\\\\\'\n\n>>> quoted_dos_path = r\'"{}"\'.format(dos_path)\n>>> quoted_dos_path\n\'"C:\\\\Foo\\\\Bar\\\\Baz\\\\ "\'\n\n>>> # A regular expression matching a quoted string with possible backslash quoting\n>>> re.match(r\'"(([^"\\\\]|\\\\.)*)"\', quoted_dos_path).group(1).rstrip()\n\'C:\\\\Foo\\\\Bar\\\\Baz\\\\\'\n\n>>> code = \'foo(2, bar)\'\n>>> # Reverse the arguments in a two-arg function call\n>>> re.sub(r\'\\(([^,]*?),([^ ,]*?)\\)\', r\'(\\2, \\1)\', code)\n\'foo(2, bar)\'\n>>> # Note that this won\'t work if either argument has parens or commas in it.\n\nConcatenation of adjacent string literals[edit]\nString literals (using possibly different quote conventions) appearing contiguously and only separated by whitespace (including new lines), are allowed and are aggregated into a single longer string.[14]\nThus\n\ntitle = "One Good Turn: " \\\n        \'A Natural History of the Screwdriver and the Screw\'\n\nis equivalent to\n\ntitle = "One Good Turn: A Natural History of the Screwdriver and the Screw"\n\nUnicode[edit]\nSince Python 3.0, the default character set is UTF-8 both for source code and the interpreter. In UTF-8, unicode strings are handled like traditional byte strings. This example will work:\n\ns = "Γειά" # Hello in Greek\nprint(s)\n\nNumbers[edit]\nNumeric literals in Python are of the normal sort, e.g. 0, -1, 3.4, 3.5e-8.\nPython has arbitrary-length integers and automatically increases their storage size as necessary. Prior to Python 3, there were two kinds of integral numbers: traditional fixed size integers and "long" integers of arbitrary size. The conversion to "long" integers was performed automatically when required, and thus the programmer usually didn\'t have to be aware of the two integral types. In newer language versions the distinction is completely gone and all integers behave like arbitrary-length integers.\nPython supports normal floating point numbers, which are created when a dot is used in a literal (e.g. 1.1), when an integer and a floating point number are used in an expression, or as a result of some mathematical operations ("true division" via the / operator, or exponentiation with a negative exponent).\nPython also supports complex numbers natively.  Complex numbers are indicated with the J or j suffix, e.g. 3 + 4j.\n\nLists, tuples, sets, dictionaries[edit]\nPython has syntactic support for the creation of container types.\nLists (class list) are mutable sequences of items of arbitrary types, and can be created either with the special syntax\n\na_list = [1, 2, 3, "a dog"]\n\nor using normal object creation\n\na_second_list = []\na_second_list.append(4)\na_second_list.append(5)\n\nTuples (class tuple) are immutable sequences of items of arbitrary types. There is also a special syntax to create tuples\n\na_tuple = 1, 2, 3, "four"\na_tuple = (1, 2, 3, "four")\nAlthough tuples are created by separating items with commas, the whole construct is usually wrapped in parentheses to increase readability. An empty tuple is denoted by (), while a tuple with a single value can be created with (1,).\nSets (class set) are mutable containers of hashable items[15] of arbitrary types, with no duplicates. The items are not ordered, but sets support iteration over the items. The syntax for set creation uses curly brackets\n\nsome_set = {0, (), False}\n\nPython sets are very much like mathematical sets, and support operations like set intersection and union. Python also features a frozenset class for immutable sets, see Collection types.\nDictionaries (class dict) are mutable mappings tying keys and corresponding values. Python has special syntax to create dictionaries ({key: value})\n\na_dictionary = {"key 1": "value 1", 2: 3, 4: []}\n\nThe dictionary syntax is similar to the set syntax, the difference is the presence of colons. The empty literal {} results in an empty dictionary rather than an empty set, which is instead created using the non-literal constructor: set().\n\nOperators[edit]\nArithmetic[edit]\nPython includes the +, -, *, / ("true division"), // (floor division), % (modulus), and ** (exponentiation) operators, with their usual mathematical precedence.\nIn Python 3, x / y performs "true division", meaning that it always returns a float, even if both x and y are integers that divide evenly.\n\n>>> 4 / 2\n2.0\n\nand // performs integer division or floor division, returning the floor of the quotient as an integer.\nIn Python 2 (and most other programming languages), unless explicitly requested, x / y performed integer division, returning a float only if either input was a float. However, because Python is a dynamically-typed language, it was not always possible to tell which operation was being performed, which often led to subtle bugs, thus prompting the introduction of the // operator and the change in semantics of the / operator in Python 3.\n\nComparison operators[edit]\nThe comparison operators, i.e. ==, !=, <, >, <=, >=, is, is not, in and not in[16] are used on all manner of values. Numbers, strings, sequences, and mappings can all be compared. In Python 3, disparate types (such as a str and an int) do not have a consistent relative ordering, and attempts to compare these types raises a TypeError exception. While it was possible to compare disparate types in Python 2 (for example, whether a string was greater-than or less-than an integer), the ordering was undefined; this was considered a historical design quirk and was ultimately removed in Python 3.\nChained comparison expressions such as a < b < c have roughly the meaning that they have in mathematics, rather than the unusual meaning found in C and similar languages. The terms are evaluated and compared in order. The operation has short-circuit semantics, meaning that evaluation is guaranteed to stop as soon as a verdict is clear: if a < b is false, c is never evaluated as the expression cannot possibly be true anymore.\nFor expressions without side effects, a < b < c is equivalent to a < b and b < c. However, there is a substantial difference when the expressions have side effects. a < f(x) < b will evaluate f(x) exactly once, whereas a < f(x) and f(x) < b will evaluate it twice if the value of a is less than f(x) and once otherwise.\n\nLogical operators[edit]\nIn all versions of Python, boolean operators treat zero values or empty values such as "", 0, None, 0.0, [], and {} as false, while in general treating non-empty, non-zero values as true. The boolean values True and False were added to the language in Python 2.2.1 as constants (subclassed from 1 and 0) and were changed to be full blown keywords in Python 3. The binary comparison operators such as == and > return either True or False.\nThe boolean operators and and or use minimal evaluation. For example, y == 0 or x/y > 100 will never raise a divide-by-zero exception. These operators return the value of the last operand evaluated, rather than True or False. Thus the expression (4 and 5) evaluates to 5, and (4 or 5) evaluates to 4.\n\nFunctional programming[edit]\nAs mentioned above, another strength of Python is the availability of a functional programming style. As may be expected, this makes working with lists and other collections much more straightforward.\n\nComprehensions[edit]\nMain article: List comprehension\nOne such construction is the list comprehension, which can be expressed with the following format:\n\nL = [mapping_expression for element in source_list if filter_expression]\n\nUsing list comprehension to calculate the first five powers of two:\n\npowers_of_two = [2**n for n in range(1, 6)]\n\nThe Quicksort algorithm can be expressed elegantly (albeit inefficiently) using list comprehensions:\n\ndef qsort(L):\n    if L == []:\n        return []\n    pivot = L[0]\n    return (qsort([x for x in L[1:] if x < pivot]) +\n            [pivot] +\n            qsort([x for x in L[1:] if x >= pivot]))\n\nPython 2.7+[17] also supports set comprehensions[18] and dictionary comprehensions.[19]\n\nFirst-class functions[edit]\nIn Python, functions are first-class objects that can be created and passed around dynamically.\nPython\'s limited support for anonymous functions is the lambda construct. An example is the anonymous function which squares its input, called with the argument of 5:\n\nf = lambda x: x**2\nf(5)\n\nLambdas are limited to containing an expression rather than statements, although control flow can still be implemented less elegantly within lambda by using short-circuiting,[20] and more idiomatically with conditional expressions.[21]\n\nClosures[edit]\nPython has had support for lexical closures since version 2.2. Here\'s an example function that returns a function that approximates the derivative of the given function:\n\ndef derivative(f, dx):\n    """Return a function that approximates the derivative of f\n    using an interval of dx, which should be appropriately small.\n    """\n    def function(x):\n        return (f(x + dx) - f(x)) / dx\n    return function\n\nPython\'s syntax, though, sometimes leads programmers of other languages to think that closures are not supported. Variable scope in Python is implicitly determined by the scope in which one assigns a value to the variable, unless scope is explicitly declared with global or nonlocal.[22]\nNote that the closure\'s binding of a name to some value is not mutable from within the function. Given:\n\n>>> def foo(a, b):\n...     print(f\'a: {a}\')\n...     print(f\'b: {b}\')\n...     def bar(c):\n...         b = c\n...         print(f\'b*: {b}\')\n...     bar(a)\n...     print(f\'b: {b}\')\n... \n>>> foo(1, 2)\na: 1\nb: 2\nb*: 1\nb: 2\n\nand you can see that b, as visible from the closure\'s scope, retains the value it had; the changed binding of b inside the inner function did not propagate out.  The way around this is to use a nonlocal b statement in bar. In Python 2 (which lacks nonlocal), the usual workaround is to use a mutable value and change that value, not the binding.  E.g., a list with one element.\n\nGenerators[edit]\nIntroduced in Python 2.2 as an optional feature and finalized in version 2.3, generators are Python\'s mechanism for lazy evaluation of a function that would otherwise return a space-prohibitive or computationally intensive list.\nThis is an example to lazily generate the prime numbers:\n\nfrom itertools import count\n\ndef generate_primes(stop_at=None):\n    primes = []\n    for n in count(start=2):\n        if stop_at is not None and n > stop_at:\n            return # raises the StopIteration exception\n        composite = False\n        for p in primes:\n            if not n % p:\n                composite = True\n                break\n            elif p ** 2 > n:\n                break\n        if not composite:\n            primes.append(n)\n            yield n\n\nWhen calling this function, the returned value can be iterated over much like a list:\n\nfor i in generate_primes(100):  # iterate over the primes between 0 and 100\n    print(i)\n\nfor i in generate_primes():  # iterate over ALL primes indefinitely\n    print(i)\n\nThe definition of a generator appears identical to that of a function, except the keyword yield is used in place of return. However, a generator is an object with persistent state, which can repeatedly enter and leave the same scope. A generator call can then be used in place of a list, or other structure whose elements will be iterated over. Whenever the for loop in the example requires the next item, the generator is called, and yields the next item.\nGenerators don\'t have to be infinite like the prime-number example above. When a generator terminates, an internal exception is raised which indicates to any calling context that there are no more values. A for loop or other iteration will then terminate.\n\nGenerator expressions[edit]\nFurther information: List comprehension\nIntroduced in Python 2.4, generator expressions are the lazy evaluation equivalent of list comprehensions.  Using the prime number generator provided in the above section, we might define a lazy, but not quite infinite collection.\n\nfrom itertools import islice\n\nprimes_under_million = (i for i in generate_primes() if i < 1000000)\ntwo_thousandth_prime = islice(primes_under_million, 1999, 2000).next()\n\nMost of the memory and time needed to generate this many primes will not be used until the needed element is actually accessed.  Unfortunately, you cannot perform simple indexing and slicing of generators, but must use the itertools module or "roll your own" loops.  In contrast, a list comprehension is functionally equivalent, but is greedy in performing all the work:\n\nprimes_under_million = [i for i in generate_primes(2000000) if i < 1000000]\ntwo_thousandth_prime = primes_under_million[1999]\n\nThe list comprehension will immediately create a large list (with 78498 items, in the example, but transiently creating a list of primes under two million), even if most elements are never accessed.  The generator comprehension is more parsimonious.\n\nDictionary and set comprehensions[edit]\nWhile lists and generators had comprehensions/expressions, in Python versions older than 2.7 the other Python built-in collection types (dicts and sets) had to be kludged in using lists or generators:\n\n>>> dict((n, n*n) for n in range(5))\n{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}\n\nPython 2.7 and 3.0 unified all collection types by introducing dictionary and set comprehensions, similar to list comprehensions:\n\n>>> [n*n for n in range(5)]  # regular list comprehension\n[0, 1, 4, 9, 16]\n>>>\n>>> {n*n for n in range(5)}  # set comprehension\n{0, 1, 4, 9, 16}\n>>>\n>>> {n: n*n for n in range(5)}  # dict comprehension\n{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}\n\nObjects[edit]\nPython supports most object oriented programming (OOP) techniques. It allows polymorphism, not only within a class hierarchy but also by duck typing. Any object can be used for any type, and it will work so long as it has the proper methods and attributes. And everything in Python is an object, including classes, functions, numbers and modules. Python also has support for metaclasses, an advanced tool for enhancing classes\' functionality. Naturally, inheritance, including multiple inheritance, is supported. Python has very limited support for private variables using name mangling which is rarely used in practice as information hiding is seen by some as unpythonic, in that it suggests that the class in question contains unaesthetic or ill-planned internals. The slogan "we\'re all responsible users here" is used to describe this attitude.[23]\n\nAs is true for modules, classes in Python do not put an absolute barrier between definition and user, but rather rely on the politeness of the user not to "break into the definition."— 9. Classes, The Python 2.6 Tutorial (2013)\nOOP doctrines such as the use of accessor methods to read data members are not enforced in Python. Just as Python offers functional-programming constructs but does not attempt to demand referential transparency, it offers an object system but does not demand OOP behavior. Moreover, it is always possible to redefine the class using properties (see Properties) so that when a certain variable is set or retrieved in calling code, it really invokes a function call, so that spam.eggs = toast might really invoke spam.set_eggs(toast). This nullifies the practical advantage of accessor functions, and it remains OOP because the property eggs becomes a legitimate part of the object\'s interface: it need not reflect an implementation detail.\nIn version 2.2 of Python, "new-style" classes were introduced. With new-style classes, objects and types were unified, allowing the subclassing of types.\nEven entirely new types can be defined, complete with custom behavior for infix operators. This allows for many radical things to be done syntactically within Python. A new method resolution order for multiple inheritance was also adopted with Python 2.3.  It is also possible to run custom code while accessing or setting attributes, though the details of those techniques have evolved between Python versions.\n\nWith statement[edit]\nThe with statement handles resources, and allows users to work with the Context Manager protocol.[24] One function (__enter__()) is called when entering scope and another (__exit__()) when leaving. This prevents forgetting to free the resource and also handles more complicated situations such as freeing the resource when an exception occurs while it is in use. Context Managers are often used with files, database connections, test cases, etc.\n\nProperties[edit]\nProperties allow specially defined methods to be invoked on an object instance by using the same syntax as used for attribute access.  An example of a class defining some properties is:\n\nclass MyClass:\n    def __init__(self):\n        self._a = None\n\n    @property\n    def a(self):\n        return self._a\n\n    @a.setter  # makes the property writable\n    def a(self, value):\n        self._a = value\n\nDescriptors[edit]\nA class that defines one or more of the three special methods __get__(self, instance, owner), __set__(self, instance, value), __delete__(self, instance) can be used as a descriptor. Creating an instance of a descriptor as a class member of a second class makes the instance a property of the second class.[25]\n\nClass and static methods[edit]\nPython allows the creation of class methods and static methods via the use of the @classmethod  and @staticmethod decorators.  The first argument to a class method is the class object instead of the self-reference to the instance.  A static method has no special first argument.  Neither the instance, nor the class object is passed to a static method.\n\nExceptions[edit]\nPython supports (and extensively uses) exception handling as a means of testing for error conditions and other "exceptional" events in a program.\nPython style calls for the use of exceptions whenever an error condition might arise. Rather than testing for access to a file or resource before actually using it, it is conventional in Python to just go ahead and try to use it, catching the exception if access is rejected.\nExceptions can also be used as a more general means of non-local transfer of control, even when an error is not at issue. For instance, the Mailman mailing list software, written in Python, uses exceptions to jump out of deeply nested message-handling logic when a decision has been made to reject a message or hold it for moderator approval.\nExceptions are often used as an alternative to the if-block, especially in threaded situations. A commonly invoked motto is EAFP, or "It is Easier to Ask for Forgiveness than Permission,"[26] which is attributed to Grace Hopper.[27][28] The alternative, known as LBYL, or "Look Before You Leap", explicitly tests for pre-conditions.[29]\nIn this first code sample, following the LBYL approach, there is an explicit check for the attribute before access:\n\nif hasattr(spam, \'eggs\'):\n    ham = spam.eggs\nelse:\n    handle_missing_attr()\n\nThis second sample follows the EAFP paradigm:\n\ntry:\n    ham = spam.eggs\nexcept AttributeError:\n    handle_missing_attr()\n\nThese two code samples have the same effect, although there will be performance differences.  When spam has the attribute eggs, the EAFP sample will run faster.  When spam does not have the attribute eggs (the "exceptional" case), the EAFP sample will run slower. The Python profiler can be used in specific cases to determine performance characteristics. If exceptional cases are rare, then the EAFP version will have superior average performance than the alternative. In addition, it avoids the whole class of time-of-check-to-time-of-use (TOCTTOU) vulnerabilities, other race conditions,[28][30] and is compatible with duck typing. A drawback of EAFP is that it can be used only with statements; an exception cannot be caught in a generator expression, list comprehension, or lambda function.\n\nComments and docstrings[edit]\nPython has two ways to annotate Python code. One is by using comments to indicate what some part of the code does. Single-line comments begin with the hash character (#) and continue until the end of the line. Comments spanning more than one line are achieved by inserting a multi-line string (with """ or \'\'\' as the delimiter on each end) that is not used in assignment or otherwise evaluated, but sits in between other statements.\nCommenting a piece of code:\n\nimport sys\n\ndef getline():\n    return sys.stdin.readline()  # Get one line and return it\n\nCommenting a piece of code with multiple lines:\n\ndef getline():\n    """This function gets one line and returns it.\n\n    As a demonstration, this is a multiline docstring.\n\n    This full string can be accessed as getline.__doc__.\n    """\n    return sys.stdin.readline()\n\nDocstrings (documentation strings), that is, strings that are located alone without assignment as the first indented line within a module, class, method or function, automatically set their contents as an attribute named __doc__, which is intended to store a human-readable description of the object\'s purpose, behavior, and usage. The built-in help function generates its output based on __doc__ attributes. Such strings can be delimited with " or \' for single line strings, or may span multiple lines if delimited with either """ or \'\'\' which is Python\'s notation for specifying multi-line strings. However, the style guide for the language specifies that triple double quotes (""") are preferred for both single and multi-line docstrings.[31]\nSingle-line docstring:\n\ndef getline():\n    """Get one line from stdin and return it."""\n    return sys.stdin.readline()\n\nMulti-line docstring:\n\ndef getline():\n    """Get one line\n       from stdin\n       and return it.\n    """\n    return sys.stdin.readline()\n\nDocstrings can be as large as the programmer wants and contain line breaks. In contrast with comments, docstrings are themselves Python objects and are part of the interpreted code that Python runs. That means that a running program can retrieve its own docstrings and manipulate that information, but the normal usage is to give other programmers information about how to invoke the object being documented in the docstring.\nThere are tools available that can extract the docstrings from Python code and generate documentation. Docstring documentation can also be accessed from the interpreter with the help() function, or from the shell with the pydoc command pydoc.\nThe doctest standard module uses interactions copied from Python shell sessions into docstrings to create tests, whereas the docopt module uses them to define command-line options.\n\nFunction annotations[edit]\nFunction annotations (type hints) are defined in PEP 3107.[32] They allow attaching data to the arguments and return of a function. The behaviour of annotations is not defined by the language, and is left to third party frameworks. For example, a library could be written to handle static typing:[32]\n\ndef haul(item: Haulable, *vargs: PackAnimal) -> Distance\n\nDecorators[edit]\nSee also: Advice (programming)\nA decorator is any callable Python object that is used to modify a function, method or class definition.  A decorator is passed the original object being defined and returns a modified object, which is then bound to the name in the definition.  Python decorators were inspired in part by Java annotations, and have a similar syntax; the decorator syntax is pure syntactic sugar, using @ as the keyword:\n\n@viking_chorus\ndef menu_item():\n    print("spam")\n\nis equivalent to\n\ndef menu_item():\n    print("spam")\nmenu_item = viking_chorus(menu_item)\n\nDecorators are a form of metaprogramming; they enhance the action of the function or method they decorate. For example, in the sample below, viking_chorus might cause menu_item to be run 8 times (see Spam sketch) for each time it is called:\n\ndef viking_chorus(myfunc):\n    def inner_func(*args, **kwargs):\n        for i in range(8):\n            myfunc(*args, **kwargs)\n    return inner_func\n\nCanonical uses of function decorators are for creating class methods or static methods, adding function attributes, tracing, setting pre- and postconditions, and synchronization,[33] but can be used for far more, including tail recursion elimination,[34] memoization and even improving the writing of other decorators.[35]\nDecorators can be chained by placing several on adjacent lines:\n\n@invincible\n@favourite_colour("Blue")\ndef black_knight():\n    pass\n\nis equivalent to\n\ndef black_knight():\n    pass\nblack_knight = invincible(favourite_colour("Blue")(black_knight))\n\nor, using intermediate variables\n\ndef black_knight():\n    pass\nblue_decorator = favourite_colour("Blue")\ndecorated_by_blue = blue_decorator(black_knight)\nblack_knight = invincible(decorated_by_blue)\n\nIn the example above, the favourite_colour decorator factory takes an argument. Decorator factories must return a decorator, which is then called with the object to be decorated as its argument:\n\ndef favourite_colour(colour):\n    def decorator(func):\n        def wrapper():\n            print(colour)\n            func()\n        return wrapper\n    return decorator\n\nThis would then decorate the black_knight function such that the colour, "Blue", would be printed prior to the black_knight function running. Closure ensures that the colour argument is accessible to the innermost wrapper function even when it is returned and goes out of scope, which is what allows decorators to work.\nDespite the name, Python decorators are not an implementation of the decorator pattern. The decorator pattern is a design pattern used in statically-typed object-oriented programming languages to allow functionality to be added to objects at run time; Python decorators add functionality to functions and methods at definition time, and thus are a higher-level construct than decorator-pattern classes. The decorator pattern itself is trivially implementable in Python, because the language is duck typed, and so is not usually considered as such.[clarification needed]\n\nEaster eggs[edit]\nUsers of curly bracket languages, such as C or Java, sometimes expect or wish Python to follow a block-delimiter convention. Brace-delimited block syntax has been repeatedly requested, and consistently rejected by core developers. The Python interpreter contains an easter egg that summarizes its developers\' feelings on this issue. The code from __future__ import braces raises the exception SyntaxError: not a chance. The __future__ module is normally used to provide features from future versions of Python.\nAnother hidden message, the Zen of Python (a summary of Python design philosophy), is displayed when trying to import this.\nThe message Hello world! is printed when the import statement import __hello__ is used. In Python 2.7, instead of Hello world! it prints Hello world....\nImporting the antigravity module opens a web browser to xkcd comic 353 that portrays a humorous fictional use for such a module, intended to demonstrate the ease with which Python modules enable additional functionality.[36] In Python 3, this module also contains an implementation of the "geohash" algorithm, a reference to xkcd comic 426.[37]\n\nReferences[edit]\n\n\n^ "Readability counts." - PEP 20 - The Zen of Python Archived 2014-12-05 at the Wayback Machine\n\n^ "PEP 20 - The Zen of Python". Python Software Foundation. 2004-08-23. Archived from the original on 2008-12-03. Retrieved 2008-11-24.\n\n^ "2. Lexical analysis". Python 3 documentation. Python Software Foundation. Retrieved 2021-03-11.\n\n^ "2. Lexical analysis". Python v2.7.18 documentation. Python Software Foundation. Retrieved 2021-03-11.\n\n^ "New Keywords". Python v3.5 documentation. Docs.python.org. Archived from the original on 2016-06-18. Retrieved 2016-06-01.\n\n^ "2. Lexical analysis". Python 3 documentation. Python Software Foundation. Retrieved 2022-01-22.\n\n^ "PEP 622 -- Structural Pattern Matching". 2020-06-23. Retrieved 2022-01-22.\n\n^ "PEP 8 -- Style Guide for Python Code". Python.org. Retrieved 2021-03-17.\n\n^ Hoffa, Felipe (2017-07-26). "400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?". Medium. Retrieved 2021-03-11.\n\n^ "Tabs or Spaces". ukupat.github.io. Retrieved 2021-03-11.\n\n^ "PEP 8 -- Style Guide for Python Code". Python.org. Retrieved 2021-03-11.\n\n^ "PEP 498 - Literal String Interpolation". What’s New In Python 3.6. 2016-12-23. Archived from the original on 2017-03-30. Retrieved 2017-03-29.\n\n^ "2. Lexical analysis". Python v2.7.5 documentation. Docs.python.org. Archived from the original on 2012-10-23. Retrieved 2013-08-16.\n\n^ "2. Lexical analysis". Python v2.7.5 documentation. Docs.python.org. Archived from the original on 2012-10-23. Retrieved 2013-08-16.\n\n^ Hashable items are usually immutable, but not necessarily so by definition. See python.org/3/glossary.htm\n\n^ "6. Expressions — Python 3.9.2 documentation". docs.python.org. Retrieved 2021-03-17.\n\n^ "Python 2.7.0 Release". Archived from the original on 2016-01-27. Retrieved 2016-01-19.\n\n^ "5. Data Structures — Python 2.7.18 documentation". Archived from the original on 2016-01-26. Retrieved 2016-01-19.\n\n^ "5. Data Structures — Python 2.7.18 documentation". Archived from the original on 2016-01-26. Retrieved 2016-01-19.\n\n^ David Mertz. "Functional Programming in Python". IBM developerWorks. Archived from the original on 2007-02-20. Retrieved 2007-08-27.\n\n^ "PEP 308 -- Conditional Expressions". Archived from the original on 2016-03-13. Retrieved 2016-04-14.\n\n^ The nonlocal keyword was adopted by PEP 3104 Archived 2014-12-02 at the Wayback Machine\n\n^ "Python Style Guide". docs.python-guide.org. Archived from the original on 2015-03-09. Retrieved 2015-03-08.\n\n^ "PEP 343 -- The "with" Statement". Archived from the original on 2014-12-14. Retrieved 2014-08-15.\n\n^ "Glossary — Python 3.9.2 documentation". docs.python.org. Retrieved 2021-03-23.\n\n^ EAFP Archived 2012-10-26 at the Wayback Machine, Python Glossary\n\n^ Hamblen, Diane. "Only the Limits of Our Imagination: An exclusive interview with RADM Grace M. Hopper". Department of the Navy Information Technology Magazine. Archived from the original on January 14, 2009. Retrieved 2007-01-31.\n\n^ a b Python in a nutshell, Alex Martelli, p. 134\n\n^ LBYL Archived 2018-01-21 at the Wayback Machine, Python Glossary\n\n^ Alex Martelli (19 May 2003). "EAFP v. LBYL". python-list mailing list. Archived from the original on 14 July 2012. Retrieved 18 July 2011.\n\n^ "PEP 8 -- Style Guide for Python Code". Python.org. Retrieved 2021-03-23.\n\n^ a b "PEP 3107 -- Function Annotations". Archived from the original on 2015-01-06. Retrieved 2014-08-15.\n\n^ "Python 2.4 Decorators: Reducing code duplication and consolidating knowledge". Dr. Dobb\'s. 2005-05-01. Archived from the original on 2007-02-06. Retrieved 2007-02-08.\n\n^ "New Tail Recursion Decorator". ASPN: Python Cookbook. 2006-11-14. Archived from the original on 2007-02-09. Retrieved 2007-02-08.\n\n^ "The decorator module". Archived from the original on 2007-02-10. Retrieved 2007-02-08.\n\n^ cpython: The Python programming language, Python, 2017-10-15, archived from the original on 2017-09-15, retrieved 2017-10-15\n\n^ "Another hidden treasure. · python/cpython@b1614a7". GitHub. Retrieved 2017-10-15.\n\n\nExternal links[edit]\n"The Python Language Reference".\nVan Rossum, Guido. "The Python Tutorial". (written by the author of Python)\nRamalho, Luciano (April 2022). Fluent Python, 2nd Edition. O\'Reilly Media, Inc. ISBN 9781492056355.\n\n\n\n',
  'Online IDE and web hosting service\nPythonAnywhereDeveloper(s)Anaconda, IncWritten inPythonOperating systemCross-platform / HTML5TypeIntegrated development environment, Web hosting serviceLicenseProprietaryWebsitewww.pythonanywhere.com\nPythonAnywhere is an online integrated development environment (IDE) and web hosting service (Platform as a service) based on the Python programming language.[1]  Founded by Giles Thomas and Robert Smithson in 2012, it provides in-browser access to server-based Python and Bash command-line interfaces, along with a code editor with syntax highlighting.  Program files can be transferred to and from the service using the user\'s browser.  Web applications hosted by the service can be written using any WSGI-based application framework.\nPythonAnywhere was created by Resolver Systems,[2] who also produced Resolver One, a Python-based Spreadsheet program. On 16 October 2012 the product was acquired by a new company, PythonAnywhere LLP, who took on the existing development team.[3]  In June, 2022, PythonAnywhere was acquired by Anaconda, Inc.[4]\nThe development team uses PythonAnywhere to develop PythonAnywhere, and say that its collaboration features help because they use the extreme programming methodology.[5]\n\n\nFeatures[edit]\nCPython, PyPy and IPython support, including Python versions 2.7, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, and 3.9.[6]\nIn-browser interactive consoles with code running on hosted servers, shareable between multiple users.\nWSGI-based web hosting, e.g. Django, Flask, web2py\nSupport for coding from iPad and other mobile devices.\nSyntax-highlighting in-browser editor.\nMany popular Python modules pre-installed.[7]\nCron-like scheduled tasks to run scripts at a given time of day.\nAlways-on tasks to run scripts and restart them automatically when they fail.[8][9]\nUses[edit]\nPythonAnywhere is described as "the simplest way to deploy web2py applications" in the official book on the web framework,[10] is suggested when learning NumPy,[11] is deployment platform of choice in Django Girls tutorial,[12] and is recommended as a way of  hosting machine learning-based web applications.[13]\n\nSee also[edit]\nComparison of Python integrated development environments\nList of Python software\nReferences[edit]\n\n\n^ "PythonAnywhere: un ambiente Python nel proprio browser". html.it.\n\n^ "Products - Resolver Systems". Resolver Systems. Archived from the original on 2014-07-17. Retrieved 2012-05-16.\n\n^ "Resolver Systems News: Acquisition". Resolver Systems. Archived from the original on 2013-02-01. Retrieved 2012-11-22.\n\n^ "Anaconda acquires PythonAnywhere in a bid to improve Python accessibility". ITPro.\n\n^ "Installation-Free Programming in the Cloud". Develop in the Cloud. Archived from the original on 2013-01-21. Retrieved 2012-07-12.\n\n^ "Python 3.8 now available! - PythonAnywhere News".\n\n^ "Batteries included: PythonAnywhere".\n\n^ "Always-on tasks". 13 May 2015.\n\n^ "Always-on tasks - PythonAnywhere News".\n\n^ Massimo Di Pierro (2013). web2py (5th ed.). Lulu.com. pp. 568–. ISBN 978-0-578-12021-8.\n\n^ Ivan Idris (29 April 2015). NumPy Cookbook - Second Edition. Packt Publishing Ltd. pp. 85–. ISBN 978-1-78439-982-5.\n\n^ "Django Girls Tutorial: Deploy!". Django Girls.\n\n^ Sebastian Raschka (23 September 2015). Python Machine Learning. Packt Publishing Ltd. pp. 272–. ISBN 978-1-78355-514-7.\n\n\nExternal links[edit]\nPythonAnywhere Homepage\nvteCloud computingBusiness models\nContent as a service\nData as a service\nDesktop as a service\nFunction as a service\nInfrastructure as a service\nIntegration platform as a service\nBackend as a service\nNetwork as a service\nPlatform as a service\nSecurity as a service\nSoftware as a service\nTechnologies\nCloud database\nCloud-native computing\nCloud storage\nCloud storage gateways\nData centers\nDew computing\nDistributed file system for cloud\nHardware virtualization\nInternet\nMobile cloud computing\nNative cloud application\nNetworking\nSecurity\nServerless computing\nStructured storage\nVirtual appliance\nWeb APIs\nVirtual private cloud\nApplications\nBox\nDropbox\nGoogle\nWorkspace\nDrive\nHP Cloud (closed)\nIBM Cloud\nMicrosoft\nOffice 365\nOneDrive\nNextcloud\nOracle Cloud\nRackspace\nSalesforce\nWorkday\nZoho\nPlatforms\nAlibaba Cloud\nAmazon Web Services\nAppScale\nBox\nCloudBolt\nCloud Foundry\nCocaine (PaaS)\nCreatio\nEngine Yard\nHelion\nGE Predix\nGoogle App Engine\nGreenQloud\nHeroku\nIBM Cloud\nInktank\nJelastic\nMicrosoft Azure\nMindSphere\nNetlify\nOracle Cloud\nOutSystems\nopenQRM\nOpenShift\nPythonAnywhere\nRightScale\nScalr\nForce.com\nSAP Cloud Platform\nSplunk\nVercel\nvCloud Air\nWaveMaker\nInfrastructure\nAlibaba Cloud\nAmazon Web Services\nAbiquo Enterprise Edition\nCloudStack\nCitrix Cloud\nDeft\nDigitalOcean\nEMC Atmos\nEucalyptus\nFujitsu\nGoogle Cloud Platform\nGreenButton\nGreenQloud\nIBM Cloud\niland\nJoyent\nLinode\nLunacloud\nMicrosoft Azure\nMirantis\nNetlify\nNimbula\nNimbus\nOpenIO\nOpenNebula\nOpenStack\nOracle Cloud\nOrionVM\nRackspace Cloud\nSafe Swiss Cloud\nZadara\nlibvirt\nlibguestfs\nOVirt\nVirtual Machine Manager\nWakame-vdc\nVercel\nVirtual Private Cloud OnDemand\n\n Category\n Commons\n\nvteIntegrated development environmentsC, C++Open source\nAndroid Studio\nCode::Blocks\nCodeLite\nDev-C++\nEclipse\nEmacs\nGeany\nGNOME Builder\nKDevelop\nNetBeans\nTheIDE\nQDevelop\nQt Creator\nVi–Vim\nOpenWatcom\nFreeware\nOracle Developer Studio\nVisual Studio Community\nXcode\nDevEco Studio\nRetail\nC++Builder\nEclipse-based\nCodeWarrior\nMyEclipse\nVisual Studio\nBy JetBrains\nIntelliJ IDEA\nAppCode\nCLion\nLabWindows/CVI\nIBM Rational Software Architect\nUnderstand\nSlickEdit\nDiscontinued\nAnjuta\nVisualAge\nVisual C++ Express\nMonoDevelop\nSharpDevelop\nBorland Turbo C, C++\nQuickC\nJavaOpen source\nAnjuta\nBlueJ\nDrJava\nEclipse\nGeany\nGreenfoot\nIntelliJ IDEA Community Edition\nAndroid Studio\nNetBeans\nDevEco Studio\nFreeware\njGRASP\nJDeveloper\nRetail\nJCreator\nMyEclipse\nJetBrains IntelliJ IDEA\nSlickEdit\nUnderstand\nDiscontinued\nMetrowerks CodeWarrior Pro for Java\nJBuilder\nSun Java Studio Creator (superseded by NetBeans)\nVisualAge (superseded by Eclipse)\nVisual Café (aka Espresso, superseded by JBuilder)\nVisual J++\nXelfi (became NetBeans)\nJavaScriptOpen source\nVim\nVisual Studio Code\nAtom\nChromium\nDevEco Studio\nCLI (.NET)Open source\nVisual Studio Code\nPascalABC.NET\nFreeware\nVisual Studio Community\nRetail\nVisual Studio\nRider\nUnderstand\nDiscontinued\nXamarin Studio\nMonoDevelop\nSharpDevelop\nVisual Basic Express\nVisual Web Developer Express\nVisual J# Express\nVisual Studio Express for Windows Phone\nVisual C++ Express\nVisual C# Express\nExpress for Desktop\nExpress for Web\nExpress for Windows\nFlash\nAdobe Flash Builder\nFlashDevelop\nPowerflasher FDT\nPHPOpen source\nAptana\nNetBeans\nKomodo Edit\nKomodo IDE\nKDevelop\nProprietary\nCodelobster\nPhpStorm\nPHPEdit\nSlickEdit\nZend Studio\nR\nRStudio\nR Tools for Visual Studio\nPythonOpen source\nAnjuta\nIDLE\nEric\nLight Table\nNinja-IDE\nPyDev\nPyScripter\nPIDA\nSpyder\nKomodo Edit\nKomodo IDE\nKDevelop\nVim\nVisual Studio Code\nThonny\nDevEco Studio\nProprietary\nPyCharm\nPythonAnywhere\nVisual Studio Code\nSlickEdit\nWing IDE\nPascal,Object PascalOpen source\nFree Pascal IDE\nLazarus\nDev-Pascal\nGNAVI\nPascalABC.NET\nFreeware\nDelphi Community\nRetail\nDelphi\nDiscontinued\nTurbo Pascal\nVirtual Pascal\nBorland Kylix\nQuickPascal\nBASICOpen source\nBasic-256\nB4X\nMicrosoft Small Basic\nSdlBasic\nGambas\nBasic4GL\nVisualFBEditor / WinFBE\nInForm\nFreeware\nFutureBASIC\nRapidQ\nthinAir\nVisual Studio Community\nRetail\nVisual Studio\nNS Basic\nPureBasic\nGLBasic\nLiberty BASIC\nXojo\nDiscontinued\nCA-Realizer\nMonoDevelop\nPhoenix Object Basic\nQuickBASIC\nQBasic\nSharpDevelop\nVisual Basic\nVisual Basic Express\nGoOpen source\nVim\nVisual Studio Code (VSCode)\nEclipse\nFreeware\nCloud9 IDE\nRetail\nGoLand\nHaxe\nIntelliJ IDEA\nVS Code\nSublime Text\nPowerflasher FDT\nPOP-11\nPoplog\nOnline\nAWS Cloud9 IDE\nEclipse Che\nSourceLair\n\nComparison\nCategory\n\n\n\n\n',
  "(RUR-PLE) - RUR - Python Learning EnvironmentRUR-PLE in actionInitial releaseDecember 12, 2004; 19 years ago (2004-12-12)[1]Stable release1.0.1\n   / December 29, 2009; 14 years ago (2009-12-29)\nWritten inPythonOperating systemCross-platformAvailable inPythonTypeEducational programming languageLicenseGNU General Public LicenseWebsitecode.google.com/p/rur-ple\nRUR - Python Learning Environment (RUR-PLE) is an educational tool to help students learn the Python programming language. Made by André Roberge. RUR-PLE uses the idea behind Karel the Robot, making the learning of Python programming more interesting. A student writes a program that controls a 'robot' that moves through a city consisting of a rectangular grid of streets (left-right) and avenues (up-down). \nIt is very similar to Guido van Robot (GvR), but RUR-PLE can use all  Python features (while GvR only limited subset of syntax).\nRUR-PLE has 48 lessons (in main European languages and Chinese) with the code and robot environment examples to experiment with.\nA second implementation of RUR-PLE, Rurple NG is in progress.[2]\n\nReferences[edit]\n\n\n^ [Gvr-devel] First release of RUR: a Python Learning Environment From: Andre Roberge - 2004-12-12 04:04, Email Archive: gvr-devel , Guido van Robot, SourceForge.net\n\n^ Crowley, Paul (2009), Rurple NG: teaching programming with Python\n\n\nExternal links[edit]\nRUR-PLE homepage\nRUR-PLE on sourceforge (no longer maintained)\n\n\n\n",
  'This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources: "Spyce" software – news · newspapers · books · scholar · JSTOR (May 2021) (Learn how and when to remove this message)\nWebsitespyce.sourceforge.net \nSpyce is technology similar to PHP that can be used to embed Python code into webpages.  Spyce is free software, distributed under a BSD-style licence, with some additional restrictions about documentation notices.[1][2][3][4][5][6]\n\n\nCommon Spyce embedding methods[edit]\nSince Python uses indentation to determine the beginning and end of a block, Spyce includes several ways to embed Python code. Shown below are the three most common ways. Spyce supports ASP/JSP-style delimiters (<% and %>) as well as double braces ([[ and ]])\n\nPython \'chunks\' (multiple Python statements with traditional indentation):\nIt\'s <b>[[\\\n\nfrom time import asctime, localtime\nprint(asctime(localtime()))\n\n]]</b> right now!\n\nor\n\nIt\'s <b><%\\\n\nfrom time import asctime, localtime\nprint(asctime(localtime()))\n\n%></b> right now!\nIndividual statements within delimiters (indentation not required):\n [[for x in xrange(3): { ]]\n <b>Hello, </b>\n [[} ]]\n\nor\n\n <% for x in xrange(3): { %>\n <b>Hello, </b>\n <% } %>\nExpressions evaluation\n<b>I am [[= 5*3 ]] years old.</b>\nor\n\n<b>I am <%= 5*3 %> years old.</b>\nThe techniques above can be freely mixed and embedded in any HTML document.\nAny legal Python code can be embedded and any Python module can be imported, which makes it especially suited for writing very robust applications (using exception handling and unit testing single modules individually).\n\nFeatures[edit]\nSome other features include custom tags (ala JSP), spyce lambdas and active handlers (reminiscent of ASP).\n\nRequirements[edit]\nSpyce brings Python\'s standard library and the programming language itself to the web. The minimum requirement is a working Python installation (it ships with a standalone web server written in Python that can be used during development), although it can be used in conjunction with several web servers such as Apache and IIS in a variety of ways.\nConfiguration is done using Python modules that are imported by the web server during initialization, so all that is really required to get started with Spyce is basic knowledge of Python.\n\nSee also[edit]\n\nFree and open-source software portal\nmod_python\nReferences[edit]\n\n\n^ Spyce - Python Server Pages (PSP)\n\n^ Petreley, Nicholas (2002-11-11). "PHP and Python Hit Prime Time". Computerworld. Retrieved 2021-10-03.\n\n^ "Release (#25976) - Spyce - Python Server Pages - OSDN". osdn.net. Retrieved 2021-10-03.\n\n^ "SPYCE - Python Server Pages". www.onworks.net. Retrieved 2021-10-03.\n\n^ "Spyce Development Tips and Techniques". Neotitans Technologies Inc. Retrieved 2021-10-03.\n\n^ Lutz, Mark; Ascher, David (2003-12-23). Learning Python. "O\'Reilly Media, Inc.". ISBN 978-0-596-55193-3.\n\n\nExternal links[edit]\nOfficial website\nvteWeb frameworks\nComparison\n.NET\nASP.NET\nCore\nAJAX\nDynamic Data\nMVC\nRazor\nWeb Forms\nBlazor\nDNN\nBFC\nMonoRail\nUmbraco\nWebSharper\nC++\nCppCMS\nDrogon\nWt\nColdFusion\nColdBox Platform\nCommon Lisp\nCL-HTTP\nHaskell\nServant\nSnap\nYesod\nJava\nAppFuse\nGrails\nGWT\nICEfaces\nJHipster\nJWt\nMojarra\nPlay\nRemote Application Platform\nSeam\nSling\nSpring\nStripes\nStruts\nTapestry\nVaadin\nVert.x\nWicket\nWaveMaker\nZK\nJavaScript\nAngular/AngularJS\nBackbone.js\nClosure\nDojo Toolkit\nEmber.js\nExpress.js\nExt JS\njQuery\nKnockout.js\nMeteor\nMooTools\nNext.js\nNode.js\nOpenUI5\nPrototype\nReact\nRemix\nSencha Touch\nSproutCore\nSvelte\nVue.js\nPerl\nCatalyst\nDancer\nMaypole\nMojolicious\nWebGUI\nPHP\nCakePHP\nCodeIgniter\nDrupal\neZ Publish\nFat-Free\nFlow\nFuelPHP\nGrav\nGyroscope\nHorde\nJoomla!\nLaminas\nLaravel\nli₃\nMidgard\nMODX\nPhalcon\nPHP-Fusion\nPHP-Nuke\nPop PHP\nPRADO\nProcessWire\nQcodo\nSilverstripe\nSymfony\nTYPO3\nWordPress\nXOOPS\nYii\nPython\nBlueBream\nCherryPy\nCubicWeb\nDjango\nFastAPI\nFlask\nGrok\nNevow\nPyjs\nPylons\nPyramid\nQuixote\nTACTIC\nTornado\nTurboGears\nweb2py\nZope 2\nmore...\nRuby\nMerb\nPadrino\nRuby on Rails\nSinatra\nRust\nRocket\nScala\nLift\nPlay\nScalatra\nSmalltalk\nAIDA/Web\nSeaside\nOther languages\nApplication Express (PL/SQL)\nGrails (Groovy)\nOpenACS (Tcl)\nPhoenix (Elixir)\nSproutCore (JavaScript-Ruby)\nYaws (Erlang)\n\n\n\nThis programming-language-related article is a stub. You can help Wikipedia by expanding it.vte\n\n\n\n',
  'Calling convention for web servers to forward requests to web applications written in Python\n"WSGI" redirects here. For the radio station in Springfield, Tennessee, see WSGI (AM).\n\nThe Web Server Gateway Interface (WSGI, pronounced whiskey[1][2] or WIZ-ghee[3]) is a simple calling convention for web servers to forward requests to web applications or frameworks written in the Python programming language. The current version of WSGI, version 1.0.1, is specified in Python Enhancement Proposal (PEP) 3333.[4]\nWSGI was originally specified as PEP-333 in 2003.[5] PEP-3333, published in 2010, updates the specification for Python 3.\n\nBackground[edit]\nIn 2003, Python web frameworks were typically written against only CGI, FastCGI, mod_python, or some other custom API of a specific web server.[6] To quote PEP 333:\n\nPython currently boasts a wide variety of web application frameworks, such as Zope, Quixote, Webware, SkunkWeb, PSO, and Twisted Web -- to name just a few. This wide variety of choices can be a problem for new Python users, because generally speaking, their choice of web framework will limit their choice of usable web servers, and vice versa... By contrast, although Java has just as many web application frameworks available, Java\'s "servlet" API makes it possible for applications written with any Java web application framework to run in any web server that supports the servlet API.\nWSGI was thus created as an implementation-neutral interface between web servers and web applications or frameworks to promote common ground for portable web application development.[4]\n\nSpecification overview[edit]\nThe WSGI has two sides:\n\nthe server/gateway side. This is often running full web server software such as Apache or Nginx, or is a lightweight application server that can communicate with a webserver, such as flup.\nthe application/framework side. This is a Python callable, supplied by the Python program or framework.\nBetween the server and the application, there may be one or more WSGI middleware components, which implement both sides of the API, typically in Python code.\nWSGI does not specify how the Python interpreter should be started, nor how the application object should be loaded or configured, and different frameworks and webservers achieve this in different ways.\n\nWSGI middleware[edit]\nA WSGI middleware component is a Python callable that is itself a WSGI application, but may handle requests by delegating to other WSGI applications. These applications can themselves be WSGI middleware components.[7]\nA middleware component can perform such functions as:[7]\n\nRouting a request to different application objects based on the target URL, after changing the environment variables accordingly.\nAllowing multiple applications or frameworks to run side-by-side in the same process\nLoad balancing and remote processing, by forwarding requests and responses over a network\nPerforming content post-processing, such as applying XSLT stylesheets\nExamples[edit]\nExample application[edit]\nA WSGI-compatible "Hello, World!" application written in Python:\n\ndef application(environ, start_response):\n    start_response(\'200 OK\', [(\'Content-Type\', \'text/plain\')])\n    yield b\'Hello, World!\\n\'\n\nWhere:\n\nLine 1 defines a function[8] named application, which takes two parameters, environ and start_response. environ is a dictionary containing CGI environment variables as well as other request parameters and metadata under well-defined keys.[9] start_response is a callable itself, taking two positional parameters, status and response_headers.\nLine 2 calls start_response, specifying "200 OK" as the HTTP status and a "Content-Type" response header.\nLine 3 makes the function into a generator. The body of the response is returned as an iterable of byte strings.\nExample of calling an application[edit]\nA full example of a WSGI network server is outside the scope of this article. Below is a sketch of how one would call a WSGI application and retrieve its HTTP status line, response headers, and response body, as Python objects.[10] Details of how to construct the environ dict have been omitted.\n\nfrom io import BytesIO\n\ndef call_application(app, environ):\n    status = None\n    headers = None\n    body = BytesIO()\n    \n    def start_response(rstatus, rheaders):\n        nonlocal status, headers\n        status, headers = rstatus, rheaders\n        \n    app_iter = app(environ, start_response)\n    try:\n        for data in app_iter:\n            assert status is not None and headers is not None, \\\n                "start_response() was not called"\n            body.write(data)\n    finally:\n        if hasattr(app_iter, \'close\'):\n            app_iter.close()\n    return status, headers, body.getvalue()\n\nenviron = {...}  # "environ" dict\nstatus, headers, body = call_application(app, environ)\n\nWSGI-compatible applications and frameworks[edit]\nThis section may contain excessive or irrelevant examples. Please help improve the article by adding descriptive text and removing less pertinent examples. (September 2018)\nNumerous web frameworks support WSGI:\n\n\nbjoern\nBlueBream\nbobo[11]\nBottle\nCherryPy\nDjango[12]\nEventlet[13]\nFastWSGI\nFlask\nFalcon (web framework) [14]\nGevent-FastCGI[15]\nGoogle App Engine\'s webapp2\nGunicorn\nprestans[16]\nmod_wsgi for use with Apache[17]\nnetius\npycnic[18]\nPaste component WebOb is specifically a WSGI extension. It was adopted by the Pylons project.\nPylons\nPyramid\nrestlite[19]\nTornado\nTrac\nTurboGears\nUliweb[20]\nuWSGI\nWaitress[21]\nweb.py[22]\nweb2py\nweblayer[23]\nWerkzeug[24]\nRadicale[25]\n\nCurrently wrappers are available for FastCGI, CGI, SCGI, AJP (using flup), twisted.web, Apache (using mod_wsgi or mod_python), Nginx (using ngx_http_uwsgi_module),[26] Nginx Unit (using the Python language module),[27] and Microsoft IIS (using WFastCGI,[28] isapi-wsgi,[29] PyISAPIe,[30] or an ASP gateway).\n\nSee also[edit]\n Asynchronous Server Gateway Interface (ASGI) – The spiritual successor to WSGI, adding support for asynchronous applications\nRack – Ruby web server interface\nPSGI – Perl Web Server Gateway Interface\nSCGI – Simple Common Gateway Interface\nJSGI – JavaScript web server gateway interface\nReferences[edit]\n\n\n^ Simionato, Michele (June 11, 2007). "An Introduction to Web Programming with WSGI".\n\n^ Edge, Jake (July 9, 2019). "Mucking about with microframeworks". LWN.\n\n^ Goldberg, Kevin (2016-05-09). "An Introduction to Python WSGI Servers for Performance | AppDynamics". Application Performance Monitoring Blog | AppDynamics. Retrieved 2020-08-20.\n\n^ a b "PEP 3333 - Python Web Server Gateway Interface v1.0.1". Python.org. Retrieved 2018-04-04.\n\n^ "PEP 333 -- Python Web Server Gateway Interface v1.0". Python.org. Retrieved 2018-04-04.\n\n^ "FrontPage - Python Wiki". Python.org. Retrieved 2017-01-27.\n\n^ a b "PEP 3333 -- Python Web Server Gateway Interface v1.0.1". Python.org. Retrieved 2018-04-04.\n\n^ i.e. "a function, method, class, or an instance with a __call__ method"\n\n^ "PEP 3333 -- Python Web Server Gateway Interface v1.0.1". Python.org. Retrieved 2018-04-04.\n\n^ "Creating WSGI Middleware - Alan Christopher Thomas - Minted - PythonKC". YouTube. 2015-08-28. Archived from the original on 2021-12-12. Retrieved 2017-01-27.\n\n^ "プエラリアジェルの効果は?". Bobo.digicool.com. Retrieved 2017-01-27.\n\n^ "Django without mod_python, and WSGI support | Weblog | Django". Djangoproject.com. 2005-07-18. Retrieved 2017-01-27.\n\n^ "wsgi – WSGI server — Eventlet 0.20.1 documentation". Eventlet.net. Retrieved 2017-01-27.\n\n^ "Falcon - Bare-metal web API framework for Python". Retrieved 2017-10-22.\n\n^ "gevent-fastcgi 1.0.2.1 : Python Package Index". Pypi.python.org. 2015-12-06. Retrieved 2017-01-27.\n\n^ "anomaly/prestans: A WSGI compliant REST micro-framework". GitHub.com. Retrieved 2017-01-27.\n\n^ "Google Code Archive - Long-term storage for Google Code Project Hosting". Code.google.com. Retrieved 2017-01-27.\n\n^ "Pycnic Framework". Pycnic.nullism.com. Retrieved 2017-01-27.\n\n^ "theintencity/restlite: Light-weight RESTful server tools in Python". GitHub.com. Retrieved 2017-01-27.\n\n^ "limodou/uliweb: Simple and easy use python web framework". GitHub.com. Retrieved 2017-01-27.\n\n^ "waitress documentation". docs.pylonsproject.org. Retrieved 2018-09-26.\n\n^ "Welcome to". Web.py. 2009-09-11. Retrieved 2017-01-27.\n\n^ "weblayer — weblayer v0.4.3 documentation". Packages.python.org. Retrieved 2017-01-27.\n\n^ "Welcome | Werkzeug (The Python WSGI Utility Library)". Werkzeug.pocoo.org. Retrieved 2017-01-27.\n\n^ "CalDAV and CardDAV Server - A Simple Calendar and Contact Server". Radicale.org. Retrieved 2017-01-27.\n\n^ "Module ngx_http_uwsgi_module". Nginx.org. Retrieved 2017-01-27.\n\n^ "Configuration — NGINX Unit". Unit.nginx.org. Retrieved 2023-05-04.\n\n^ "Python Tools for Visual Studio - Documentation". Pytools.codeplex.com. Retrieved 2017-01-27.\n\n^ "Google Code Archive - Long-term storage for Google Code Project Hosting". Code.google.com. Retrieved 2017-01-27.\n\n^ "Python ISAPI Extension for IIS download | SourceForge.net". Pyisapie.sourceforge.net. 2012-04-24. Retrieved 2017-01-27.\n\n\nExternal links[edit]\nPEP 333 – Python Web Server Gateway Interface\nPEP 3333 – Python Web Server Gateway Interface v1.0.1\nWSGI metaframework\nComprehensive wiki about everything WSGI\nWSGI Tutorial\nPython standard library module wsgiref\nGetting Started with WSGI\nNWSGI – .NET implementation of the Python WSGI specification for IronPython and IIS\nGevent-FastCGI server implemented using gevent coroutine-based networking library\nvtePythonImplementations\nCircuitPython\nCLPython\nCPython\nCython\nMicroPython\nNumba\nIronPython\nJython\nPsyco\nPyPy\nPython for S60\nShed Skin\nStackless Python\nUnladen Swallow\nmore...\nIDE\nEric Python IDE\nIDLE\nNinja-IDE\nPyCharm\nPyDev\nSpyder\nmore...\nTopics\nWSGI\nASGI\n\nsoftware (list)\nPython Software Foundation\nPyCon\n\nvteWeb interfacesServer-sideProtocols\nHTTP\nv2\nv3\nEncryption\nWebDAV\nCGI\nSCGI\nFCGI\nAJP\nWSRP\nWebSocket\nServer APIs\nC NSAPI\nC ASAPI\nC ISAPI\nCOM ASP\nJakarta Servlet\ncontainer\nCLI OWIN\nASP.NET Handler\nPython WSGI\nPython ASGI\nRuby Rack\nJavaScript JSGI\nPerl PSGI\nPortlet\ncontainer\nApache modules\nmod_include\nmod_jk\nmod_lisp\nmod_mono\nmod_parrot\nmod_perl\nmod_php\nmod_proxy\nmod_python\nmod_wsgi\nmod_ruby\nPhusion Passenger\nTopics\nWeb resource vs. Web service\nOpen API\nWebhook\nApplication server\ncomparison\nScripting\nClient-sideBrowser APIs\nC NPAPI\nLiveConnect\nXPConnect\nC NPRuntime\nC PPAPI\nNaCl\nActiveX\nBHO\nXBAP\nWeb APIsWHATWG\nAudio\nCanvas\nCORS\nDOM\nSSE\nVideo\nWebSockets\nWeb messaging\nWeb storage\nWeb worker\nXMLHttpRequest\nW3C\nDOM events\nEME\nFile\nGeolocation\nIndexedDB\nMSE\nSVG\nWebAssembly\nWebAuthn\nWebGPU\nWebRTC\nWebXR\nKhronos\nWebCL\nWebGL\nOthers\nGears\nWeb SQL Database (formerly W3C)\nWebUSB\nTopics\nAjax and Remote scripting vs. DHTML\nBrowser extension\nMashup\nWeb IDL\nScripting\nTopics\nMicroservices\nWeb page\nStatic\nDynamic\nWeb standards\nWeb API security\nWeb application\nRich\nSingle-page\nProgressive\nWeb framework\n\n\n\n\n',
  'Programming language design principles\nThe Zen of Python output in a terminal\nThe Zen of Python is a collection of 19 "guiding principles" for writing computer programs that influence the design of the Python programming language.[1] Python code that aligns with these principles is often referred to as "Pythonic".[2]\nSoftware engineer Tim Peters wrote this set of principles and posted it on the Python mailing list in 1999.[3] Peters\' list left open a 20th principle "for Guido to fill in", referring to Guido van Rossum, the original author of the Python language. The vacancy for a 20th principle has not been filled.\nPeters\' Zen of Python was included as entry number 20 in the language\'s official Python Enhancement Proposals and was released into the public domain.[4] It is also included as an Easter egg in the Python interpreter, where it can be displayed by entering import this.[1][4][a]\nIn May 2020, Barry Warsaw (developer of GNU Mailman) wrote the lyrics to music.[5][6]\n\n\nPrinciples[edit]\nThe Zen of Python illustrated\nThe principles are listed as follows:[b]\n\n\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren\'t special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.[c]\nAlthough that way may not be obvious at first unless you\'re Dutch.\nNow is better than never.\nAlthough never is often better than right now.[d]\nIf the implementation is hard to explain, it\'s a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea – let\'s do more of those!\n\n\nBeing Pythonic[edit]\nOne of the principles, "There should be one-- and preferably only one --obvious way to do it", can be referenced as the "Pythonic" way.[8] The official definition of "Pythonic" is:[2]An idea or piece of code which closely follows the most common idioms of the Python language, rather than implementing code using concepts common to other languages.  For example, a common idiom in Python is to loop over all elements of an iterable using a for statement. Many other languages don’t have this type of construct, so people unfamiliar with Python sometimes use a numerical counter instead:\nfor i in range(len(food)):\n    print(food[i])\n\nAs opposed to the cleaner, Pythonic method:\n\nfor piece in food:\n    print(piece)\n\n\nCode that is difficult to understand or reads like a rough transcription from another programming language is called unpythonic.[9][10]\n\nIn practice[edit]\nSince the release of the Zen of Python, there has been research done on its effectiveness and actual use among developers. Despite the difference in interpretation between beginners and experienced Python programmers, interviews among 13 Python programmers of varying skill show that the Zen of Python "positively influences the way developers write and talk about code".[8] Researchers extended this case study to explore the use of Python idioms on GitHub repositories, and found that the usage of "Pythonic idioms"[e] increased over time.[11] Writing Python code that aligns with the Zen of Python may save memory and run time of Python programs.[12] The desire to write in Pythonic code has led to refactoring tools to help programmers achieve this goal.[13][14]\n\nSee also[edit]\nConvention over configuration\nThere\'s more than one way to do it\nNotes[edit]\n\n\n^ The source code for the Zen of Python can be found on Github.\n\n^ Wikipedia links below are added for further reference and understanding, and were not explicitly linked in the Zen of Python\n\n^ The formatting of the dashes in this line and the final is purposely inconsistent, in reference to the varying formatting conventions.[7]\n\n^ In the interpreter easter egg, this is written as "Although never is often better than *right* now." This follows a longstanding convention of plain-text communication — in which common formatting features are often impossible — where emphasis is represented with asterisks.\n\n^ A list of their Pythonic idioms can be found here https://slimshadyiam.github.io/ZenYourPython/\n\n\nReferences[edit]\n\n\n^ a b Reitz, Kenneth (2011–2019). "Code Style". The Hitchhiker’s Guide to Python. § Zen of Python. Retrieved March 26, 2019.\n\n^ a b "Glossary". Python Documentation. Retrieved 2024-02-07.\n\n^ Peters, Tim (June 4, 1999). "The Python Way". Python Software Foundation. Retrieved March 26, 2019.\n\n^ a b Peters, Tim (August 19, 2004). "PEP 20—The Zen of Python". Python Software Foundation. Retrieved March 26, 2019.\n\n^ Warsaw, Barry (10 May 2020). "The Zen of Python". We Fear Change. Archived from the original on 2020-06-03.\n\n^ Warsaw, Barry (23 May 2020). The Zen of Python. YouTube. The Zbwedicon. Archived from the original on 2021-12-11. Archived 2020-06-03 at the Wayback Machine\n\n^ "Issue 3364: An ortographical typo in Zen of Python text - Python tracker". Retrieved 2021-02-10.\n\n^ a b Alexandru, Carol V.; Merchante, José J.; Panichella, Sebastiano; Proksch, Sebastian; Gall, Harald C.; Robles, Gregorio (2018-10-24). "On the usage of pythonic idioms". Proceedings of the 2018 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software (PDF). Onward! 2018. New York, NY, USA: Association for Computing Machinery. pp. 1–11. doi:10.1145/3276954.3276960. ISBN 978-1-4503-6031-9. OCLC 1362712424. S2CID 53057358. Archived from the original on 2018-10-03.\n\n^ Clark, Robert (26 April 2019). "How to be Pythonic and why you should care". Medium. Archived from the original on 13 August 2021. Retrieved 20 January 2021.\n\n^ "Code Style – The Hitchhiker\'s Guide to Python". docs.python-guide.org. Archived from the original on 27 January 2021. Retrieved 20 January 2021.\n\n^ Farooq, Aamir; Zaytsev, Vadim (2021-11-22). "There is more than one way to zen your Python". Proceedings of the 14th ACM SIGPLAN International Conference on Software Language Engineering. SLE 2021. New York, NY, USA: Association for Computing Machinery. pp. 68–82. doi:10.1145/3486608.3486909. ISBN 978-1-4503-9111-5.\n\n^ Leelaprute, Pattara; Chinthanet, Bodin; Wattanakriengkrai, Supatsara; Kula, Raula Gaikovina; Jaisri, Pongchai; Ishio, Takashi (2022-10-20). "Does coding in Pythonic zen peak performance?: Preliminary experiments of nine Pythonic idioms at scale". Proceedings of the 30th IEEE/ACM International Conference on Program Comprehension. ICPC \'22. New York, NY, USA: Association for Computing Machinery. pp. 575–579. doi:10.1145/3524610.3527879. ISBN 978-1-4503-9298-3.\n\n^ Zhang, Zejun; Xing, Zhenchang; Xia, Xin; Xu, Xiwei; Zhu, Liming (2022-07-12), Making Python Code Idiomatic by Automatic Refactoring Non-Idiomatic Python Code with Pythonic Idioms, arXiv:2207.05613, retrieved 2024-02-07\n\n^ Phan-udom, Purit; Wattanakul, Naruedon; Sakulniwat, Tattiya; Ragkhitwetsagul, Chaiyong; Sunetnanta, Thanwadee; Choetkiertikul, Morakot; Kula, Raula Gaikovina (2020-09-05), Teddy: Automatic Recommendation of Pythonic Idiom Usage For Pull-Based Software Projects, arXiv:2009.03302, retrieved 2024-02-07\n\n\nExternal links[edit]\nPEP20 on Python website\nPEP 20 ~ The Zen of Python by Tim Peters\nThis article about an essay or essay collection is a stub. You can help Wikipedia by expanding it.vte\n\n\n\n',
];

export const dataResult = [
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 0,
    inappropriate: 100,
  },
  {
    appropriate: 0,
    inappropriate: 110,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 0,
    inappropriate: 100,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 0,
    inappropriate: 100,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 0,
    inappropriate: 100,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 99,
    inappropriate: 1,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
  {
    appropriate: 100,
    inappropriate: 0,
  },
];
